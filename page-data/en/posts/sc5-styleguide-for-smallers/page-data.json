{"componentChunkName":"component---src-templates-post-js","path":"/en/posts/sc5-styleguide-for-smallers/","result":{"data":{"mdx":{"id":"3f41d853-e452-5c30-a949-05b89f58e9de","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Style-guide the smaller things\",\n  \"date\": \"2015-07-30T00:00:00.000Z\",\n  \"v2\": true,\n  \"layout\": \"post\",\n  \"meta\": {\n    \"desc\": \"A story about how I tried to use SC5 Style Guide on my tiny tiny blog project and aparently got see the CSS architecture from completety different perspective.\\n\"\n  }\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"div\", {\n    \"data-excerpt\": true\n  }, mdx(\"p\", null, \"I've been presenting \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://styleguide.sc5.io/\"\n  }, \"SC5 Style Guide\"), \" several times during this year sharing my experience of using it for one\\nof the SC5's clients, Elisa. Assuming that Elisa is a huge mobile operator with a lot of websites and a need\\nto keep those websites visually consistent, there is no wonder that the SC5 Style Guide as a tool provides benefits\\nthere. But what about smaller websites? Would it be useful there? I did not know the answer to this question\\nand wanted to experiment. The experiment was conducted on my blog codebase.\")), mdx(\"p\", null, \"This is how the Living Style Guide looks like: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://varya.me/styleguide\"\n  }, \"varya.me/styleguide\"), \". You can see the interface\\ndecomposed into block pieces, each of those representing a meaningful interface unit. I haven't seen the interface of my blog\\nfrom this perspective before. It gave me a lot of insight into the ways the CSS architecture of my blog should be designed.\\nBut, let's consider things one by one.\"), mdx(\"h2\", {\n    \"id\": \"fine-tuning-the-sc5-style-guide-tool\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#fine-tuning-the-sc5-style-guide-tool\",\n    \"aria-label\": \"fine tuning the sc5 style guide tool permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Fine-tuning the SC5 Style Guide tool\"), mdx(\"p\", null, \"Everything starts with\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"npm install --save-dev sc5-styleguide\"))), mdx(\"p\", null, \"Then, I was able to use the tool to build the interface representation. It required\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/Gulpfile.js\"\n  }, \"a couple of Gulp tasks\"), \".\"), mdx(\"p\", null, \"I had to deviate from the example configuration in a couple of places to make my Style Guide work as it does now. Let me\\nname and explain these things.\"), mdx(\"h3\", {\n    \"id\": \"providing-the-code-classlanguage-textapprootcode-parameter\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#providing-the-code-classlanguage-textapprootcode-parameter\",\n    \"aria-label\": \"providing the code classlanguage textapprootcode parameter permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Providing the \", mdx(\"code\", {\n    parentName: \"h3\",\n    \"className\": \"language-text\"\n  }, \"appRoot\"), \" parameter.\"), mdx(\"p\", null, \"As I am hosting the Style Guide website not it the root folder but in a subfolder named \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"styleguide\"), \", I inform the\\ngenerator about that, so it can build the properly working app:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"js\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-js\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"gulp\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"task\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"styleguide:generate\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"function\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"return\"), \" gulp\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"src\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"[\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"desktop.blocks/**/*.css\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"pipe\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"styleguide\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"generate\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n      \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"title\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"Varya.me Styleguide\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n      \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"appRoot\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'/styleguide'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n      \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"...\")))), mdx(\"h3\", {\n    \"id\": \"providing-scripts\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#providing-scripts\",\n    \"aria-label\": \"providing scripts permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Providing scripts\"), mdx(\"p\", null, \"Under the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"extraHead\"), \" parameter I list all the additions needed. Some of my components\\nneed JavaScript to function. It is indeed possible to ignore that and present\\ntheir views only, but I wanted them to be exactly as they were used in the blog.\\nThanks to \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"extraHead\"), \" I could supply any code needed. I used it to\\nlink the same scripts that I have on my blog pages:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"js\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-js\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"gulp\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"task\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"styleguide:generate\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"function\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"return\"), \" gulp\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"src\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"[\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"desktop.blocks/**/*.css\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"pipe\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"styleguide\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"generate\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n      \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"title\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"Varya.me Styleguide\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n      \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"...\"), \"\\n      \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"extraHead\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"[\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'<script src=\\\"http://yandex.st/jquery/1.7.2/jquery.min.js\\\"></script>'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'<script src=\\\"/desktop.bundles/index/index.min.js\\\"></script>'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"...\"), \"\\n      \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"]\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"...\")))), mdx(\"p\", null, \"However, I needed yet another trick to make the scripts work properly. My components are written with \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"i-bem.js\"), \"\\nframework which automatically initialises them on the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"domReady\"), \" event. This is what I wanted for the static pages because the\\ncomponents markup is in HTML document. But for the Style Guide, which is architecturally a SPA, this did not work. The components\\nare rendered on the fly, and this obviously happens after \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"domReady\"), \"; that is why by default they stay\\nuninitialized. So they should be initialized after they had been rendered. Luckily, the Style Guide\\ntriggers an event on the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"window\"), \" object named \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"styleguide:onRendered\"), \" every time a new component is re-rendered.\\nBy handling this event, I managed to get the components initialized right after they appear on the page. This code is needed\\nfor the Style Guide only, so I do not include it into the project bundle but provide as an additional script in the\\nStyle Guide configuration:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"gulp.task(\\\"styleguide:generate\\\", function() {\\n\\n  return gulp.src([\\\"desktop.blocks/**/*.css\\\"])\\n    .pipe(styleguide.generate({\\n      title: \\\"Varya.me Styleguide\\\",\\n      ...\\n      extraHead: [\\n        ...\\n        '<script src=\\\"/styleguide/i-bem__init_styleguide.js\\\"></script>'\\n      ]\\n    ...\"))), mdx(\"p\", null, \"You can check how the JavaScript components are working with the block which is initially empty and renders the list\\nof repositories after querying the GitHub API: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://varya.me/styleguide/#/section/4.3\"\n  }, \"varya.me/styleguide/#/section/4.3\"), \".\\nOr try out the Candies randomly built with JavaScript \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://varya.me/styleguide/#/section/5.1\"\n  }, \"varya.me/styleguide/#/section/5.1\"), \".\"), mdx(\"p\", null, \"The last important thing to make JavaScript work is to use \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"disableEncapsulation: true\"), \" parameter. Normally the\\nStyle Guide wraps each component in the ShadowDOM because it lets us developers write component CSS without\\nworrying about affecting the Style Guide interface. But it also makes the components scoped from the JavaScript linked\\nto the Style Guide website \\u2014 including that additional JavaScript I showed above. By disabling the encapsulation, I made\\nthe components to be inserted into the HTML page as they are, without any scoping. As for affecting the Style Guide\\ninterface, in my case it will never happen as I use BEM and all my components are already \\\"encapsulated\\\" thanks to that methodology.\"), mdx(\"h3\", {\n    \"id\": \"hosting-a-static-page\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#hosting-a-static-page\",\n    \"aria-label\": \"hosting a static page permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Hosting a static page\"), mdx(\"p\", null, \"The SC5 Style Guide provides a development server which routes all the paths to its root. When hosting it outside, you\\nshould care about the routing yourself as you would do for any other SPA. But my blog is hosted on GitHub Pages\\nwhich is a simple static hosting and does not provide any routing capabilities. For managing this case, I use the\\n\", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"disableHtml5Mode: true\"), \" option. It makes the Style Guide application generate the old-school links with \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"#\"), \". And so it\\nworks.\"), mdx(\"h2\", {\n    \"id\": \"documenting-the-components\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#documenting-the-components\",\n    \"aria-label\": \"documenting the components permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Documenting the components\"), mdx(\"p\", null, \"As I used BEM for my website frontend from very beginning, the CSS was already written the component-way. I only\\nneeded to create a descriptive structure and document the blocks with KSS.\"), mdx(\"h3\", {\n    \"id\": \"structuring-the-code\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#structuring-the-code\",\n    \"aria-label\": \"structuring the code permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Structuring the code\"), mdx(\"p\", null, \"Unfortunately the BEM way of storing components in folders turned out to be not good enough to see\\nthe code from the living-style-guide perspective. On a file system, all the components are represented at the same\\nlevel which turns them into a long list without much structure:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"desktop.blocks/\\n\\u251C\\u2500\\u2500 article\\n\\u251C\\u2500\\u2500 articles-list\\n\\u251C\\u2500\\u2500 box\\n\\u251C\\u2500\\u2500 ...\\n\\u2514\\u2500\\u2500 text\"))), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/varya/varya.github.com/tree/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks\"\n  }, \"github/varya/varya.github.com/desktop-blocks\")), mdx(\"p\", null, \"In this case the atomic components are not distinct from the structural interface pieces (such as Header or Footer),\\nfrom the side blocks, or from CSS provided to style third-party things. Flat structure is indeed good for\\nbundling tools but we humans need more logical nesting.\"), mdx(\"p\", null, \"For that I provide the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"overview.css\"), \" file, which has nothing to do with the final product and only helps me arrange the\\nblocks. I have 5 sections, in which I place the blocks depending on what they are:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"/*\\nAtoms\\n\\nStyleguide 1\\n\\nstyleguide:ignore:start\\n\\n@import url(\\\"logo/logo.css\\\"); // 1.1\\n@import url(\\\"text/text.css\\\"); // 1.2\\n...\\n\\nstyleguide:ignore:end\\n*/\\n\\n/*\\nMain blocks\\n\\nStyleguide 2\\n\\nstyleguide:ignore:start\\n\\n@import url(\\\"header/header.css\\\"); // 2.1\\n...\\n\\nstyleguide:ignore:end\\n*/\"))), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks/overview.css\"\n  }, \"github/varya/varya.github.com/desktop-blocks/overview.css\")), mdx(\"p\", null, \"There are only comments in this file in which I provide the documentation of every subset as a Style Guide section.\\nListing the paths of the dependant CSS files makes it easier to navigate through the code. The \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"@import\"), \" syntax is used just\\nbecause :-)\"), mdx(\"p\", null, \"The only trick here is the magic \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"styleguide:ignore:start\"), \" and \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"styleguide:ignore:end\"), \" keywords. It is possible to\\nplace them inside comments in any piece of your CSS (or SASS or LESS) and make the Style Guide generator ignore\\nwhat is in between.\"), mdx(\"p\", null, \"In my case, I tell it skip my overview lists because they have nothing to do with the codebase. But the names of the\\nsections and their possible descriptions (I just haven't provided any) are in work.\"), mdx(\"h3\", {\n    \"id\": \"describing-the-pieces\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#describing-the-pieces\",\n    \"aria-label\": \"describing the pieces permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Describing the pieces\"), mdx(\"p\", null, \"Everything else went smoothly. For every component I provided the KSS description. The \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"logo\"), \" block can be the\\nsimplest example:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"css\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-css\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"/*\\n\\nLogo\\n\\nmarkup:\\n<logo class=\\\"logo\\\">\\xB7\\xB7\\xB7<b class=\\\"var\\\">var</b>\\xB7<b class=\\\"ya\\\">ya</b>;<b class=\\\"cursor\\\"></b></logo>\\n\\nStyleguide 1.1\\n\\n*/\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token selector\"\n  }, \".logo\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n...\"))), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks/logo/logo.css\"\n  }, \"github/varya/varya.github.com/desktop-blocks/logo/logo.css\")), mdx(\"p\", null, \"See it rendered: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://varya.me/styleguide/#/section/1.1\"\n  }, \"varya.me/styleguide/#/section/1.1\")), mdx(\"p\", null, \"In some other components I used extra features. For example, different social icons are the same \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"ico\"), \" element with different\\nmodifiers. In the Style Guide I could documents them all together:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"css\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-css\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"/*\\nSocial icon\\n\\n.social-ico__ico_type_rss         - RSS\\n.social-ico__ico_type_twitter     - Twitter\\n.social-ico__ico_type_github      - Github\\n.social-ico__ico_type_facebook    - Facebook\\n.social-ico__ico_type_linkedin    - LinkedIn\\n\\nmarkup:\\n<a class=\\\"link social-ico__ico {$modifiers}\\\" href=\\\"#\\\" title=\\\"Icon title\\\"></a>\\n\\nStyleguide 1.5.1\\n*/\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token selector\"\n  }, \".social-ico__ico\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n...\"))), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks/social-ico/social-ico.css#L49\"\n  }, \"github/varya/varya.github.com/desktop-blocks/social-ico/social-ico.css\")), mdx(\"p\", null, \"In the website the component is rendered separately with every modifier possible:\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://varya.me/styleguide/#/section/1.5.1\"\n  }, \"varya.me/styleguide/#/section/1.5.1\")), mdx(\"p\", null, \"For the complex components which contain other ones I used \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"<sg-insert>\"), \" keyword. It takes another component's markup\\nby its reference number.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"css\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-css\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"/*\\nSidebar\\nmarkup:\\n<nav class=\\\"sidebar\\\">\\n  <sg-insert>4.2</sg-insert>\\n  <sg-insert>4.3</sg-insert>\\n</nav>\\nStyleguide 4.1\\n*/\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token selector\"\n  }, \".sidebar\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n...\"))), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks/sidebar/sidebar.css\"\n  }, \"github/varya/varya.github.com/desktop-blocks/sidebar/sidebar.css\")), mdx(\"p\", null, \"This makes the markup examples pretty short, however it expands for rendering the component and showing the\\nmarkup on the website: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://varya.me/styleguide/#/section/4.1\"\n  }, \"varya.me/styleguide/#/section/4.1\")), mdx(\"h2\", {\n    \"id\": \"style-guide-driven-development\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#style-guide-driven-development\",\n    \"aria-label\": \"style guide driven development permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Style-Guide-Driven Development\"), mdx(\"p\", null, \"If you type \\\"logo\\\" in the Style Guide search field, it will find and render all the components where \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"logo\"), \" is found!\\nThe search goes through all the CSS codebase. Similarly you can search for the components using \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"<em>\"), \" in their markup.\\nOr \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"font:\"), \" in their CSS.\"), mdx(\"p\", null, \"I personally like that the search source is not only the CSS of components but also their markup examples. During the\\nrefactorings this, for example, makes possible to select all the components containing inputs and look how the changes affect them.\"), mdx(\"p\", null, \"However this is just a small addition to one major benefit I see in using the Style Guide. I find it far more important\\nthat \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"it reveals my mistakes\"), \".\"), mdx(\"p\", null, \"I already used the component way when building my blog. And I was pretty sure that my BEM experience is a 100%\\nguarantee that I get this right. But even developing with a highly modular approach in mind, I did this from the page perspective.\\nBefore the components were integrated into the blog engine, I had developed a static page and this was where the\\ncomponents fitted first.\"), mdx(\"p\", null, \"I considered them independent and so tried to write my code. But \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sitting at the same page they never actually were\\nindependent\"), \".\"), mdx(\"p\", null, \"After the SC5 Style Guide magically represented each of them separately, I can see that the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://varya.me/styleguide/#/section/1.1\"\n  }, \"logo\"), \" is aligned to the right.\\nAnd why should it be? Obviously, my mistake when I tried to made it fit into the Header.\"), mdx(\"p\", null, \"The same goes for the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://varya.me/styleguide/#/section/1.4\"\n  }, \"language switcher\"), \" positioned on the right.\"), mdx(\"p\", null, \"In the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://varya.me/styleguide/#/section/1.5\"\n  }, \"set of social icons\"), \", the language switcher provided with the RSS\\nicon was considered to stay with it. But this only happens because at the blog pages\\nit is placed into a narrow container. The Style Guide represents it on its own and I can see that it is not that\\nflawless as I thought.\"), mdx(\"p\", null, \"Such discoveries obviously lead to the refactoring :-)\"), mdx(\"p\", null, \"To top it off, I must say that the experiment does not end and there are already findings for further\\nposts. Stay tuned!\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"readingTime":{"minutes":8.505},"slug":"en/posts/sc5-styleguide-for-smallers/","disqusIdentifier":"posts-sc5-styleguide-for-smallers-index-en"},"frontmatter":{"title":"Style-guide the smaller things","subTitle":null,"date":"30 July 2015","v2":true,"old":null,"tumblr":null,"tags":null,"meta":{"desc":"A story about how I tried to use SC5 Style Guide on my tiny tiny blog project and aparently got see the CSS architecture from completety different perspective.\n"},"canonical":null,"cover":null}},"site":{"siteMetadata":{"siteUrl":"https://varya.me"}}},"pageContext":{"slug":"en/posts/sc5-styleguide-for-smallers/","prev":{"id":"fc97fdb5-b28c-5e40-a8b8-72235671c46e","fileAbsolutePath":"/home/runner/work/varya.github.com/varya.github.com/content/posts/bem-faq/index.md","fields":{"slug":"blog/bem-faq/","disqusIdentifier":"blog-bem-faq","level":1,"fileRelativePath":"bem-faq/index.md","lang":"en"},"frontmatter":{"title":"Automating Style-Guide-Driven Development","subTitle":null,"link":null,"v2":null,"old":null,"date":"2015-03-05T00:00:00.000Z","layout":null,"tags":null}},"next":{"id":"5f7913c2-e6aa-58b7-a13f-62c7bd5b27f3","fileAbsolutePath":"/home/runner/work/varya.github.com/varya.github.com/content/posts/on-the-unicorn-law/index_en.md","fields":{"slug":"en/posts/on-the-unicorn-law/","disqusIdentifier":"posts-on-the-unicorn-law-index-en","level":1,"fileRelativePath":"on-the-unicorn-law/index_en.md","lang":"en"},"frontmatter":{"title":"An answer to the question which should not have been asked","subTitle":null,"link":null,"v2":true,"old":null,"date":"2015-09-07T00:00:00.000Z","layout":"post","tags":null}},"fileSourceUrl":"https://github.com/varya/varya.github.com/edit/develop/content/posts/sc5-styleguide-for-smallers/index_en.md"}},"staticQueryHashes":[]}