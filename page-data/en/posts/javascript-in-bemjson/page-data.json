{"componentChunkName":"component---src-templates-post-js-content-file-path-home-runner-work-varya-github-com-varya-github-com-content-posts-javascript-in-bemjson-index-en-md","path":"/en/posts/javascript-in-bemjson/","result":{"data":{"mdx":{"id":"8ec5d75e-d0a5-5c1e-bbfe-dc330839520e","body":"\nWe usually start developing a web site prototyping the interface and then\nimplementing HTML/CSS and bacis JavaScript. In case\nof using the full BEM stack a tranformation from prototype to a functioning web\nsite goes smoothly. You can clone the project from\n[project-stub](https://github.com/bem/project-stub) and create a static web page\nas it was [described\nearlier](http://bem.info/articles/start-with-project-stub/).\n<excerpt/>\n\nThanks to `BEMHTML` templates, you do not need write all the HTML manually.\nDescribing page sructure in `BEMJSON` rather than writing all the tags manually\nsaves time. But sometimes this is still a lot of work to do, especially for large\npages.\n\nLuckily BEMJSON can include JavaScript pieces to produce some blocks dymamically.\nI created an example of such usage:\n\n```js\n({\n    block: 'page',\n    ...\n    content:[\n        ...\n        {\n            block: 'content',\n            content: (function() {\n                var res = [];\n                for(var i = 0; i < 10; i++) {\n                    res.push({\n                        block: 'button',\n                        content: 'Button ' + (i + 1)\n                    });\n                }\n                return res;\n            })()\n        },\n        ...\n    ]\n})\n```\n\n[full\ncode](https://github.com/varya/dynamic-bemjson/blob/master/desktop.bundles/page1/page1.bemjson.js)\n\nThis JavaScript creates 10 `button` blocks when the page is being built with\n`bem-tools`.\nCheck the [result\npage](http://varya.me/dynamic-bemjson/desktop.bundles/page1/page1.html)\nto see them.\n\nAnother example is a `menu` block. Such interface pieces usually consist of a\nlot of items with minor differences which cases a lot of copy-paste on a page.\nWith JavaScript in BEMJSON this can be easily reduced.\n\n```js\n({\n    block: 'page',\n    ...\n    content:[\n        ...\n        {\n            block: 'menu',\n            content: [\n                {\n                    title: 'Index',\n                    isSelected: false,\n                },\n                {\n                    title: 'Products',\n                    isSelected: true\n                },\n                {\n                    title: 'Contact',\n                    isSelected: false\n                }\n            ].map(function(item){\n                var block = {\n                    block: 'menu',\n                    elem: 'item',\n                    content: item.title,\n                    mods: {\n                        selected: item.isSelected\n                    }\n                };\n                return block;\n            })\n        },\n        ...\n    ]\n})\n```\n\n[full\ncode](https://github.com/varya/dynamic-bemjson/blob/master/desktop.bundles/page2/page2.bemjson.js)\n\nThis gives a [page with a menu of 3 items](http://varya.me/dynamic-bemjson/desktop.bundles/page2/page2.html).\nThe bigger is the array of items, the more you save. Especially when the structure\nof every item changes while developing.\n\nIndeed, this feature is not needed when BEMJSON is a result of 1st layer templates\n(like BEMTREE, priv.js) you can produce as much BEMJSON as is necessary. But with\ninitial development of a static web page, the JavaScript tricks help to avoid\ncopy-paste.\n","fields":{"slug":"en/posts/javascript-in-bemjson/","disqusIdentifier":"en-issues-javascript-in-bemjson","readingTime":{"minutes":1.76}},"frontmatter":{"title":"JavaScript in BEMJSON","subTitle":null,"date":"21 January 2014","v2":null,"old":true,"tumblr":null,"tags":null,"meta":null,"canonical":null,"cover":null}},"site":{"siteMetadata":{"siteUrl":"https://varya.me"}}},"pageContext":{"slug":"en/posts/javascript-in-bemjson/","prev":{"id":"0d2c810d-5300-5495-b0df-a1c8ad703156","fields":{"slug":"en/posts/blocks-and-bundles/","disqusIdentifier":"en-issues-blocks-and-bundles","level":1,"fileRelativePath":"blocks-and-bundles/index_en.md","lang":"en","readingTime":{"minutes":4.095}},"frontmatter":{"title":"Blocks are bricks, and bundles are buildings","subTitle":null,"link":null,"v2":null,"old":true,"date":"2014-01-06T00:00:00.000Z","layout":"post","tags":null},"internal":{"contentFilePath":"/home/runner/work/varya.github.com/varya.github.com/content/posts/blocks-and-bundles/index_en.md"}},"next":{"id":"cc30eaaa-6fb1-59ff-bc9e-bbcad01f383f","fields":{"slug":"en/posts/ym-modular-system/","disqusIdentifier":"en-issues-ym-modular-system","level":1,"fileRelativePath":"ym-modular-system/index_en.md","lang":"en","readingTime":{"minutes":4.24}},"frontmatter":{"title":"YM Modular System. Why?","subTitle":null,"link":null,"v2":null,"old":true,"date":"2014-02-25T00:00:00.000Z","layout":"post","tags":null},"internal":{"contentFilePath":"/home/runner/work/varya.github.com/varya.github.com/content/posts/ym-modular-system/index_en.md"}},"fileSourceUrl":"https://github.com/varya/varya.github.com/edit/develop/content/posts/javascript-in-bemjson/index_en.md","frontmatter":{"title":"JavaScript in BEMJSON","categories":"en issues","old":true,"date":"2014-01-21T00:00:00.000Z","layout":"post"}}},"staticQueryHashes":[],"slicesMap":{}}