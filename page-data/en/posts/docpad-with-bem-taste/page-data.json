{"componentChunkName":"component---src-templates-post-js-content-file-path-home-runner-work-varya-github-com-varya-github-com-content-posts-docpad-with-bem-taste-index-en-md","path":"/en/posts/docpad-with-bem-taste/","result":{"data":{"mdx":{"id":"1062dc1e-8d13-511e-97d5-132fc46a17d5","body":"\n<div data-excerpt>\n\nLet me present a stub for **docpad-run** project with\n**bem-built** static assets. If you ever wanted to be\na generic blog holder equiped with nice and neat static\nfiles, here we go.\n\n</div>\n\n## How to start\n\nYou need install the docpad first. Follow their [Installation Guide](http://docpad.org/docs/install).\n\nThen, the installation of the blog is super short and easy. Clone, fork or\ncopy from the [docpad-bem-stub repository](https://github.com/varya/docpad-bem-stub).\nThen, go though the 3 installation steps:\n\n```bash\nnpm install\n./node_modules/bower-npm-install/bin/bower-npm-install\ndocpad run\n```\n\nWith these 3 steps you will get:\n\n- a local server with a generic docpad blog;\n- [bem-core](http://bem.info/libs/bem-core/2.2.0/) and [bem-components](http://bem.info/libs/bem-components/v2/)\n  libraries of reusable CSS/JavaScript/templates code;\n- fully tuned static-build instructions which run on changes\n  in your source code;\n- initial blog structure.\n\n## How to write\n\nIn the given structure you can write either pages or blog posts.\nThe posts are listed in the index page. Once you added a new\nitem, you can see it in this list and navigate to its page;\nthe docpad rebuilds from source automatically.\n\nPlace the pages as `*.html.md` files into `src/documents/pages`\ndirectory. The posts are kept into `src/documents/posts`.\n\n## How to develop statics\n\nThe statics is developed with [BEM](http://bem.info/).\nYou can get CSS and JavaScript files for your pages in\n`desktop.bundles` directory. The pages are built with blocks\nfrom `desktop.blocks` folder.\n\nThe rebuild process for statics runs under docpad server.\n\nSometimes you may prefer to develop static pages separately.\nFor this run\n\n```\n./node_modules/enb/bin/enb server\n```\n\nYou will get another server which rebuilds statics. It\nproduces static html files from `*.bemjson.js` files in\n`desktop.bundles`. You can develop the layout inserting\njson there and providing `BEMHTML` templates for the\ncorresponding block. Find the documentation about `BEMHTML`\nhere:\n\n- [BEMHTML quick start](http://bem.info/libs/bem-core/2.2.0/templating/intro/)\n\nFor the same blocks you can provide `*.css` and `*.js` files\nand get them built into pages.\n\n## How to publish\n\nThe blog is tuned to be deployed on GitHub. Thus, your\nrepository has to be named as `<username>.github.com`. You\ncan develop in its `source` branch. For deploying on\n`<username>.github.io` host run this command:\n\n```bash\ndocpad deploy-ghpages\n```\n\nThis will create `master` branch of the repository whose\nsource is linked to the host.\n\nYou can also attach your own domain to the blog like I did.\nAlso, it is possible to host your blog in differently named\nrepository. However this will make you to provide changes\non `docpad.coffee` configuration file.<br/>\nStudy [Github Pages](https://pages.github.com/) to learn more.\n\n## Why Docpad?\n\nThis blog had been running on Jekyll for a while. This was an\nacceptable soltuion for a quick start. However with the growth\nof the posts base I started to suffer from not very fast\nrebuilds. Also, sometimes providing changes into the blog\nlayout was hard, mostly due to the limitations of `liquid`\ntemplates.\n\nI've decided that [Docpad](http://docpad.org/) should be much\nbetter alternative. It is served as an npm package, possible to\nbe extended with plugins and has an active fast-growing\ndevelopers community.\n\nThe `docpad-bem-stub` gives you initial structure, from which\nyou already can write and publish. If you want to provide changes\ninto the build process, modify the templates or extend with\nplugins, [learn at Docpad website](http://docpad.org/).\n\nMoreover, [Stackoverflow](http://stackoverflow.com/) indeed already\nhas an answer to almost all the questions you have. If not, create a new\none.\n\n## Why BEM?\n\nBEM is a very flexible modular solution for frontend which\nenables to develop reusable CSS and JavaScript components. Plus, some code\ncan be taken from their open source libraries.\n\nYou can learn a lot about BEM from [my articles and talks](/en/content)\nor at the [official BEM site](http://bem.info/).\n\n## Inside about\n\nAbove I described all you need to know for using your blog. Below there\nare a little more technical details on what is behind.\n\n### ENB\n\nI use [enb](https://github.com/enb-make/enb) for building pages with block\ncomponents. This solution is preferable to bem-tools because of it is much\nfaster. When rebuilding pages on every change, this is sensetive.\n\n### i-bem.js and modules\n\nI personally love that this solution brings `i-bem.js` library to the\nproject. Hope to demonstrate its amazing capabilities here in near future.\nBut before I stuff my blog with complex JavaScript components, you\ncan see some examples and very detailed explanations in [Step-by-step tutorial on\ni-bem.js](http://bem.info/tutorials/bem-js-tutorial/).\n\nAnother JavaScript feature you can enjoy is [YM modular system](/en/issues/ym-modular-system).\nThese are JavaScript modules with asynchronious resolving.\n\n### BEMHTML\n\nAs mentioned above, `BEMHTML` is a templating solution. Being JavaScript-based,\nthese templates can be applied on both server and client side. There are\na couple of documents for a deeper dive into it here:\n\n- [BEMHTML templates description](http://bem.info/libs/bem-core/2.2.0/templating/rationale/)\n- [BEMHTML tutorial](http://bem.info/libs/bem-core/2.2.0/templating/reference/)\n\n### bem-core and bem-components\n\nBEM is also nice for a possibility to borrow the components from libraries.\n`docpad-bem-stub` uses 2 now available libraries:\n\n- [bem-core](http://bem.info/libs/bem-core/2.2.0/)\n- [bem-components](http://bem.info/libs/bem-components/v2/)\n\nI hope to see more in the future.\n\n## What next?\n\nIndeed everything can be improved. These are my thoughts on how\nto continue.\n\n- detect changes in static files<br/>\n  Docpad watches over the changes in `src` directory. This means that\n  when developing statics you will not get the rebuild. I am thinking\n  on running `enb server` under `docpad run` and proxy. This maybe\n  better than watch over a lot of files in `desktop.blocks`, `desktop.bundles`\n  and all the libraries.\n- css preprocessors<br/>\n  The blog styles are in pure CSS now. But with a little\n  change into enb configuration we can learn it to build with\n  preprocessors.\n- fresh design<br/>\n  Creating a simple layout is the most difficult design task. Don't you agree?\n- nice initial posts<br/>\n  This is even harder than the desing tasks but I think the users feel much\n  more comfortable when getting a blog with predefined texts.\n\nIf you feel your oats and want to do your bit, fork [the repository](https://github.com/varya/docpad-bem-stub)\nand start :-)\n","fields":{"slug":"en/posts/docpad-with-bem-taste/","disqusIdentifier":"posts-docpad-with-bem-taste-index-en","readingTime":{"minutes":4.795}},"frontmatter":{"title":"Docpad with the taste of BEM","subTitle":null,"date":"04 June 2014","v2":true,"old":null,"tumblr":null,"tags":null,"meta":null,"canonical":null,"cover":null}},"site":{"siteMetadata":{"siteUrl":"https://varya.me"}}},"pageContext":{"slug":"en/posts/docpad-with-bem-taste/","prev":{"id":"f681afa9-8369-56dd-aa4a-4aa1abfdccf6","fields":{"slug":"en/posts/html5-mobile-app-width-native-ui/","disqusIdentifier":"posts-html5-mobile-app-width-native-ui-index-en","level":1,"fileRelativePath":"html5-mobile-app-width-native-ui/index_en.md","lang":"en","readingTime":{"minutes":5.865}},"frontmatter":{"title":"HTML5 mobile apps with native UI on Steroids","subTitle":null,"link":null,"v2":true,"old":null,"date":"2014-05-26T00:00:00.000Z","layout":"post","tags":null},"internal":{"contentFilePath":"/home/runner/work/varya.github.com/varya.github.com/content/posts/html5-mobile-app-width-native-ui/index_en.md"}},"next":{"id":"ae0614c4-ddaa-577c-bd33-c8d5032cbfff","fields":{"slug":"en/posts/steroids-drawers/","disqusIdentifier":"posts-steroids-drawers-index-en","level":1,"fileRelativePath":"steroids-drawers/index_en.md","lang":"en","readingTime":{"minutes":3.495}},"frontmatter":{"title":"Using side drawers in mobile apps on Steroids.js","subTitle":null,"link":null,"v2":true,"old":null,"date":"2014-06-09T00:00:00.000Z","layout":"post","tags":null},"internal":{"contentFilePath":"/home/runner/work/varya.github.com/varya.github.com/content/posts/steroids-drawers/index_en.md"}},"fileSourceUrl":"https://github.com/varya/varya.github.com/edit/develop/content/posts/docpad-with-bem-taste/index_en.md","frontmatter":{"title":"Docpad with the taste of BEM","date":"2014-06-04T00:00:00.000Z","v2":true,"layout":"post"}}},"staticQueryHashes":[],"slicesMap":{}}