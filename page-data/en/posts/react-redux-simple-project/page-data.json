{"componentChunkName":"component---src-templates-post-js","path":"/en/posts/react-redux-simple-project/","result":{"data":{"mdx":{"id":"7133669b-96c2-5804-aea7-2682954657fb","body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Simple yet promising structure for React/Redux project\",\n  \"date\": \"2016-11-21T00:00:00.000Z\",\n  \"v2\": true,\n  \"cover\": \"thumb.png\",\n  \"layout\": \"post\",\n  \"meta\": {\n    \"desc\": \"Very simple React/Redux project structure with a lot of space for evolving into bigger but still neat project. This is an extract from real project of migrating large e-commerce website from old-school stack to modern cutting edge solutions.\\n\"\n  }\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"div\", {\n    \"data-excerpt\": true\n  }, mdx(\"p\", null, \"Two weeks ago, I have started a new project of migrating a large website to React. Although this is not developing from\\nscratch but refactoring, there still was a great chance to reconsider the project file structure in its client part.\"), mdx(\"p\", null, \"As a proof-of-concept, I have chosen a pair of components: shopping cart and adding button. This is e-commerce what we\\nare building here :-) My initial goal was to create simple components and demonstrate their reusing as well as introduce\\nRedux as a glue to the components in the data area. As a result, I think I provided a nice and neat structure which\\nhelps a developer to understand what serves what. On the other hand, I tried to keep it simple. In the beginning, there\\nis no need in overcomplicated.\")), mdx(\"p\", null, \"In this post, I present the initial state of the project structure, extracted from the working repository. In our actual\\nproject, it has already evolved to use other patterns and helping tools. I hope I will make it to present these changes\\nin the following posts.\"), mdx(\"p\", null, \"The demonstrative extract is a public repository at\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/varya/react-redux-project\"\n  }, \"varya/react-redux-project\"), \". To run it locally, you need to check it out\\nrun \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"npm install\"), \" and then \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"npm start\"), \". You will see a page, similar to what is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://varya.me/react-redux-project/index.html\"\n  }, \"hosted\\nhere\"), \".\"), mdx(\"p\", null, \"In this page, two React components are sharing one data store. You can see how the number in \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"Cart\"), \" increments every\\ntime you click a button.\"), mdx(\"p\", null, \"Now, let's have a look at the project file structure. You will find all the source files in \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"src\"), \" folder in the\\nrepository:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"src/\\n  components/\\n    AddToCartButton/\\n    Button/\\n    Cart/\\n    Icon/\\n  containers/\\n    AddToCartButton/\\n  redux/\\n    modules/\\n      cart.js\\n      reducer.js\\n  index.js\"))), mdx(\"p\", null, \"The \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"components\"), \" folder is dedicated for representative, \\\"static\\\" components. The components can reuse one another. For\\nexample, in the project, the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"AddToCartButton\"), \" wraps the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"Button\"), \".\"), mdx(\"p\", null, \"On the file system, each component is a folder. Inside there are usually \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"index.js\"), \", almost always \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"style.css\"), \" and other\\nfiles such as images if needed. I used to name the JavaScript file by the component name, like \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"Button.js\"), \" and\\n\", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"Button.css\"), \". But in this\\nproject, I tried more unified structure. It turned out to be very handy, especially in the beginning, when we make a lot\\nof small components. Now the component folders can be copied and renamed easily.\"), mdx(\"p\", null, \"Next folder is named \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"containers\"), \". It is for the wrappers around the components. These wrappers often have the same\\nnames. Unlike representative components, which only know about how to render the data, the containers are for getting\\nthe data and passing it down. Technically the containers are also React components, but they are decorated with\\n\", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"connect\"), \" from Redux. This provides the glue for view and data. You can see typical container here:\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/varya/react-redux-project/blob/eb0e7a24ba8a723ce373d3763c299b95661fdfc6/src/containers/AddToCartButton/index.js\"\n  }, \"src/containers/AddToCartButton\")), mdx(\"p\", null, \"For the data, the containers use reducers from Redux. The project is made in a hope for future growing. This is why the\\nreducers are divided into modules (meaning, separate files) according to what are the entities they operate with. They\\nare stores in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/varya/react-redux-project/tree/master/src/redux/modules\"\n  }, \"src/modules\"), \" directory. It\\nhas yet one module and the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/varya/react-redux-project/blob/master/src/redux/modules/reducer.js\"\n  }, \"src/modules/reducer.js\"), \" which\\ncombines them all.\"), mdx(\"p\", null, \"Take a look at the module code.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"js\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-js\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token constant\"\n  }, \"ADD\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"cart/ADD\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" initialState \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"goods\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, \"0\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"export\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"default\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"function\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"cart\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token parameter\"\n  }, \"state \", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" initialState\", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" action \", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token punctuation\"\n  }, \"}\")), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"switch\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"action\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"type\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"case\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token constant\"\n  }, \"ADD\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \"\\n      \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"return\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"...\"), \"state\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"goods\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"++\"), \"state\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"goods\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n      \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"default\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \"\\n      \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"return\"), \" state\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"export\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"function\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"add\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"return\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"type\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token constant\"\n  }, \"ADD\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\")))), mdx(\"p\", null, \"This style of organizing reducers is called \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/erikras/ducks-modular-redux\"\n  }, \"Ducks\"), \".\"), mdx(\"p\", null, \"The entering file of the application \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/varya/react-redux-project/blob/master/src/index.js\"\n  }, \"src/index.js\"), \"\\ntakes the components or containers, makes the Redux store and creates the app with them. In here, you can also decorate\\nrepresentative components with Redux' \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"connect\"), \" if they do not have a special container.\"), mdx(\"p\", null, \"As the following weeks showed, this structure turned out to be very convenient. Of course, it has evolved more. I hope\\nto cover the changes in the next posts.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"readingTime":{"minutes":3.545},"slug":"en/posts/react-redux-simple-project/","disqusIdentifier":"posts-react-redux-simple-project-index-en"},"frontmatter":{"title":"Simple yet promising structure for React/Redux project","subTitle":null,"date":"21 November 2016","v2":true,"old":null,"tumblr":null,"tags":null,"meta":{"desc":"Very simple React/Redux project structure with a lot of space for evolving into bigger but still neat project. This is an extract from real project of migrating large e-commerce website from old-school stack to modern cutting edge solutions.\n"},"canonical":null,"cover":{"childImageSharp":{"fluid":{"src":"/static/0f64a7e54ac619f71019bcf603d463fe/5e6f2/thumb.png"}}}}},"site":{"siteMetadata":{"siteUrl":"https://varya.me"}}},"pageContext":{"slug":"en/posts/react-redux-simple-project/","prev":{"id":"c59501b5-a54b-533a-9a1b-9e179d01db6e","fileAbsolutePath":"/home/runner/work/varya.github.com/varya.github.com/content/posts/week-44-2016/index_en.md","fields":{"slug":"en/posts/week-44-2016/","disqusIdentifier":"posts-week-44-2016-index-en","level":1,"fileRelativePath":"week-44-2016/index_en.md","lang":"en"},"frontmatter":{"title":"Week 44, 2016","subTitle":null,"link":null,"v2":true,"old":null,"date":"2016-11-08T00:00:00.000Z","layout":"post","tags":null}},"next":{"id":"0ed7f853-37b0-5555-87be-6deb08c1f819","fileAbsolutePath":"/home/runner/work/varya.github.com/varya.github.com/content/posts/to-bem-or-not-to-bem/index.md","fields":{"slug":"blog/to-bem-or-not-to-bem/","disqusIdentifier":"blog-to-bem-or-not-to-bem","level":1,"fileRelativePath":"to-bem-or-not-to-bem/index.md","lang":"en"},"frontmatter":{"title":"To BEM or not to BEM interview","subTitle":null,"link":null,"v2":null,"old":null,"date":"2017-05-28T00:00:00.000Z","layout":null,"tags":null}},"fileSourceUrl":"https://github.com/varya/varya.github.com/edit/develop/content/posts/react-redux-simple-project/index_en.md"}},"staticQueryHashes":[]}