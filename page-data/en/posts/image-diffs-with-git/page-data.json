{"componentChunkName":"component---src-templates-post-js-content-file-path-home-runner-work-varya-github-com-varya-github-com-content-posts-image-diffs-with-git-index-en-md","path":"/en/posts/image-diffs-with-git/","result":{"data":{"mdx":{"id":"9a86729c-8065-5cee-b67a-d49edc342011","body":"\n<div data-excerpt>\n\nMy first task for new projects is to create a git repository. Whether it is a new app, or conference slides, or even an\narticle, I prefer to keep everything in Git. It is an excellent tool, and, personally, I enjoy its command line\ninterface.\n\nHowever, there is always room for improvement. Recently I found an idea how to make my git visualize the changes that\nI've done to the images in a repository.\n\n</div>\n\n```sh\nVaryas-MBP £ ~/path/to/project ⤳ master*\n  › git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   desktop.blocks/social-ico/social-ico__rss.png\n    modified:   desktop.blocks/social-ico/social-ico__twitter.png\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nVaryas-MBP £ ~/path/to/project ⤳ master*\n```\n\nI can run `git diff` over each of the modified images to see the following:\n\n![](./diff1.png)\n\n![](./diff2.png)\n\nFor every picture displayed, I can see a previous version (on the left side), a current version (on the right side) and\nvisually represented difference (in between). This feature is useful for tracking exact changes in the image. Now, I can\neasily spot if some particular details were shifted, some colors were changed, or a picture was accidentally blended\nwith another one.\n\nYou can configure git to do the same. First, install ImageMagick to provide a visual comparison. Note that for the\nlatest versions of OS X you need to install a package with a support of X11. To install with `brew`, do the following:\n\n```\n  › brew install imagemagick --with-x11\n```\n\nThen, create a script to compare two given images. Run `cat ~/bin/git-imgdiff`, and paste inside:\n\n```\n#!/bin/sh\ncompare $2 $1 png:- | montage -geometry +4+4 $2 - $1 png:- | display -title \"$1\" -\n```\n\nNow, test the script. It should do the comparison of two processed images:\n\n```\n  › ~/bin/git-imgdiff img1.png img2.png\n```\n\nAt this step, you need to show git how to use compariing script. For that, define the image files their extensions\nin a special file. Run `cat ~/.gitattributes` and paste the following:\n\n```\n*.gif diff=image\n*.jpg diff=image\n*.png diff=image\n```\n\nProvide git with this configuration by:\n\n```\n  › git config --global core.attributesfile '~/.gitattributes'\n```\n\nThe last step is to instruct git to use your script when `diff` command is applied to the matching files:\n\n```\n  › git config --global diff.image.command '~/bin/git-imgdiff'\n```\n\nThat's it. Now, running a `git diff` over your images you will get a human-friendly output. Enjoy!\n\n### References\n\n- [1](http://www.akikoskinen.info/image-diffs-with-git/)\n- [2](http://paulmestemaker.com/imagemagick-display-mac-os-x/)\n","fields":{"slug":"en/posts/image-diffs-with-git/","disqusIdentifier":"posts-image-diffs-with-git-index-en","readingTime":{"minutes":2.125}},"frontmatter":{"title":"Visual diffs for the images in a git repo","subTitle":null,"date":"18 March 2016","v2":true,"old":null,"tumblr":null,"tags":null,"meta":{"desc":"The modified images in git repositories can have a decent visual representation of file changes. For that, you simply run `git diff` command. However, to get this output, you have to do a little configuration. This article shows how.\n"},"canonical":null,"cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/46040b6f4a288812c1abdb04c0faf888/679fd/thumb.png","srcSet":"/static/46040b6f4a288812c1abdb04c0faf888/679fd/thumb.png 432w","sizes":"432px"},"sources":[{"srcSet":"/static/46040b6f4a288812c1abdb04c0faf888/e62c2/thumb.webp 432w","type":"image/webp","sizes":"432px"}]},"width":432,"height":188}}}}},"site":{"siteMetadata":{"siteUrl":"https://varya.me"}}},"pageContext":{"slug":"en/posts/image-diffs-with-git/","prev":{"id":"377702af-2ec6-57f3-b89f-2cafe1b10550","fields":{"slug":"en/posts/dealing-atomically-with-icon-fonts/","disqusIdentifier":"posts-dealing-atomically-with-icon-fonts-index-en","level":1,"fileRelativePath":"dealing-atomically-with-icon-fonts/index_en.md","lang":"en","readingTime":{"minutes":5.385}},"frontmatter":{"title":"Dealing atomically with icon fonts","subTitle":null,"link":null,"v2":true,"old":null,"date":"2015-11-10T00:00:00.000Z","layout":"post","tags":null},"internal":{"contentFilePath":"/home/runner/work/varya.github.com/varya.github.com/content/posts/dealing-atomically-with-icon-fonts/index_en.md"}},"next":{"id":"b3de70bf-f3b1-5d25-b789-e71ea8a7990a","fields":{"slug":"en/posts/react-hackathon-materials/","disqusIdentifier":"posts-react-hackathon-materials-index-en","level":1,"fileRelativePath":"react-hackathon-materials/index_en.md","lang":"en","readingTime":{"minutes":6.605}},"frontmatter":{"title":"Materials for your React hackathon","subTitle":null,"link":null,"v2":true,"old":null,"date":"2016-04-16T00:00:00.000Z","layout":"post","tags":null},"internal":{"contentFilePath":"/home/runner/work/varya.github.com/varya.github.com/content/posts/react-hackathon-materials/index_en.md"}},"fileSourceUrl":"https://github.com/varya/varya.github.com/edit/develop/content/posts/image-diffs-with-git/index_en.md","frontmatter":{"title":"Visual diffs for the images in a git repo","date":"2016-03-18T00:00:00.000Z","v2":true,"cover":"thumb.png","layout":"post","meta":{"desc":"The modified images in git repositories can have a decent visual representation of file changes. For that, you simply run `git diff` command. However, to get this output, you have to do a little configuration. This article shows how.\n"}}}},"staticQueryHashes":[],"slicesMap":{}}