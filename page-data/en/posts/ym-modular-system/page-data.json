{"componentChunkName":"component---src-templates-post-js-content-file-path-home-runner-work-varya-github-com-varya-github-com-content-posts-ym-modular-system-index-en-md","path":"/en/posts/ym-modular-system/","result":{"data":{"mdx":{"id":"cc30eaaa-6fb1-59ff-bc9e-bbcad01f383f","body":"\nThe recently published [step-by-step tutorial on\ni-bem.js](http://bem.info/tutorials/articles/bem-js-tutorial/) mentioned **YM\nmodular system** as a base for component JavaScript solution behind BEM. Why do\nwe need another modular system? Let us see...\n<excerpt/>\n\nThe author of YM modules, [Dmitry Filatov](https://github.com/dfilatov) recently\ncame up with an [article about YM modules](http://habrahabr.ru/post/213627/) in\nRussian. And below you can find the translation.\n\n<hr/>\n\nSo, one more modular system? Besides CommonJS and AMD? Why should we care?\n\nI will not write why modules and modular systems are needed, there are plenty of\narticles about it. Let us rather proceed to the main question: why do we need\n_another_ modular system?<br/>\nFor sure, there are CommonJS and AMD, but working on large projects with them I faced\nlarge drawbacks. One is that they are synchronous. This is not fatal, but in my\nproject we often had to provie different hacks for it.\n\nLet us say, we have 3 modules: moduleA, moduleB and moduleC. moduleC depends on\nboth moduleA and moduleB. Initially I will describe this in code for all the\nthree solutions:\n\n####CommonJS\n\n_moduleA.js:_\n\n```js\nmodule.exports = \"A\";\n```\n\n_moduleB.js:_\n\n```js\nmodule.exports = \"B\";\n```\n\n_moduleC.js:_\n\n```js\nvar moduleA = require(\"A\");\nmoduleB = require(\"B\");\n\nmodule.exports = moduleA + moduleB + \"C\";\n```\n\n_Linking and usage:_\n\n```js\nvar moduleC = require(\"C\");\nconsole.log(moduleC); // prints \"ABC\"\n```\n\n####AMD\n\n_moduleA.js:_\n\n```js\ndefine(\"A\", function () {\n  return \"A\";\n});\n```\n\n_moduleB.js:_:\n\n```js\ndefine(\"B\", function () {\n  return \"B\";\n});\n```\n\n_moduleC.js:_\n\n```js\ndefine(\"ะก\", [\"A\", \"B\"], function (moduleA, moduleB) {\n  return moduleA + moduleB + \"C\";\n});\n```\n\n_Linking and usage:_\n\n```js\nrequire([\"ะก\"], function (moduleC) {\n  console.log(moduleC); // prints \"ABC\"\n});\n```\n\n####YM\n\n_moduleA.js:_\n\n```js\nmodules.define(\"A\", function (provide) {\n  provide(\"A\");\n});\n```\n\n_moduleB.js:_\n\n```js\nmodules.define(\"B\", function (provide) {\n  provide(\"B\");\n});\n```\n\n_moduleC.js:_\n\n```js\nmodules.define(\"C\", [\"A\", \"B\"], function (provide, moduleA, moduleB) {\n  provide(moduleA + moduleB + \"C\");\n});\n```\n\n_Linking and usage:_\n\n```js\nmodules.require([\"ะก\"], function (moduleC) {\n  console.log(moduleC); // prints \"ABC\"\n});\n```\n\nNothing interesting yet. All three examples are similar, although you may\nnotice the `provide` callback in the YM example. What is it for?\n\nLet us imagine a case that `moduleA` and `moduleB` cannot be resolved immediately\n(synchronously, as it is required by CommonJS and AMD). Sometimes you need to\ndo an asynchronous action first. The simpliest example can be `setTimeout`.\nThere is no way to implement it elegantly with CommonJS and AMD.\nBut with `YM` it can be coded as follows:\n\n_moduleA.js:_\n\n```js\nmodules.define(\"A\", function (provide) {\n  setTimeout(function () {\n    provide(\"A\");\n  });\n});\n```\n\n_moduleB.js:_\n\n```js\nmodules.define(\"B\", function (provide) {\n  setTimeout(function () {\n    provide(\"B\");\n  });\n});\n```\n\n_moduleC.js:_\n\n```js\nmodules.define(\"C\", [\"A\", \"B\"], function (provide, moduleA, moduleB) {\n  provide(moduleA + moduleB + \"C\");\n});\n```\n\nInterestingly `moduleC` does not know anything about asynchronous actions in\nits dependant modules. _Win!_\n\n### Real life example\n\nAs for real file example, I often use the YandexMaps API\n([http://api.yandex.com/maps/](http://api.yandex.com/maps/), API of\n[Yandex.Maps](http://maps.yandex.com/)\npublic service). Yandex.Maps API has a complex loading scheme and this cannot be\ndone synchronously. This means that I cannot simply link it to a page\n`<script type=\"text/javascript\" src=\"url-of-ymaps.js\"></script>` and be sure that\nall the following scripts will get the API code ready. First I need to wait for\nthe event `ymaps.ready` to fire.\n\nThe project I am working for is quite complex; we have many classes inherited\nfrom the basic API. For example, we have a `ComplexLayer` class based on `ymaps.Layer`.\nWith YM modules it is simple to implement. We define a `ymaps` module which loads\nthe API code, waits for the `ymaps.ready` event and then provides itself. All\nthe modules which have the `ymaps` module as a dependency only start to resolve\nafter this. As you can see, other modules know nothing about the asynchronicity of the\nYandex.Map API. _No hacks in code!_\n\n_ymaps.js:_\n\n```js\nmodules.define(\"ymaps\", [\"loader\", \"config\"], function (\n  provide,\n  loader,\n  config\n) {\n  var url =\n    config.hosts.ymaps +\n    \"/2.1.4/?lang=ru-RU\" +\n    \"&load=package.full&coordorder=longlat\";\n\n  loader(url, function () {\n    ymaps.ready(function () {\n      provide(ymaps);\n    });\n  });\n});\n```\n\nThere are 2 other modules in use here: `loader` and `config`. I do not show\ntheir code, but the first one loads scripts and the second one is a hash with\nconstant values.\n\n_ComplexLayer.js:_\n\n```js\nmodules.define('ComplexLayer', ['inherit', 'ymaps'], function(provide, inherit, ymaps) {\n    var ComplexLayer = inherit(ymaps.Layer, ...);\n\n    provide(ComplexLayer);\n});\n```\n\nWe can do the same if jQuery is needed. There is a module to load jQuery:\n\n```js\nmodules.define(\n    'jquery',\n    ['loader',\n    function(provide, loader) {\n\n    loader('//yandex.st/jquery/2.1.0/jquery.min.js', function() {\n        provide(jQuery.noConflict(true));\n    });\n});\n```\n\nThen we make other modules dependent on `jquery` module.\n\nThus, the whole project code is represented with modules. There is no global, no\nneed for agreement on the order of linking the scripts (including third-party ones),\nno dirty hacks for asynchronicity.\n\nAnd to wrap up, let me demonstrate you the YM modular system API (indeed, it has more\nmethods, and these are only the basic ones).\n\n_Defining a module:_\n\n```js\nvoid modules.define(\n    String moduleName,\n    [String[] dependencies],\n    Function(\n        Function(Object objectToProvide) provide,\n        [Object resolvedDependency, ...],\n        [Object previousDeclaration]\n    ) declarationFunction\n)\n```\n\n_Requiring a module:_\n\n```js\nvoid modules.require(\n    String[] dependencies,\n    Function(\n        [Object resolvedDependency, ...]\n    ) callbackFunction\n)\n```\n\nThe project is open source and hosted at GitHub:\n[github.com/ymaps/modules](https://github.com/ymaps/modules).\n","fields":{"slug":"en/posts/ym-modular-system/","disqusIdentifier":"en-issues-ym-modular-system","readingTime":{"minutes":4.24}},"frontmatter":{"title":"YM Modular System. Why?","subTitle":null,"date":"25 February 2014","v2":null,"old":true,"tumblr":null,"tags":null,"meta":null,"canonical":null,"cover":null}},"site":{"siteMetadata":{"siteUrl":"https://varya.me"}}},"pageContext":{"slug":"en/posts/ym-modular-system/","prev":{"id":"8ec5d75e-d0a5-5c1e-bbfe-dc330839520e","fields":{"slug":"en/posts/javascript-in-bemjson/","disqusIdentifier":"en-issues-javascript-in-bemjson","level":1,"fileRelativePath":"javascript-in-bemjson/index_en.md","lang":"en","readingTime":{"minutes":1.76}},"frontmatter":{"title":"JavaScript in BEMJSON","subTitle":null,"link":null,"v2":null,"old":true,"date":"2014-01-21T00:00:00.000Z","layout":"post","tags":null},"internal":{"contentFilePath":"/home/runner/work/varya.github.com/varya.github.com/content/posts/javascript-in-bemjson/index_en.md"}},"next":{"id":"57e8c1a5-9efe-5134-aac6-3eed6cbde5e1","fields":{"slug":"en/posts/borschik-static-assets/","disqusIdentifier":"en-issues-borschik-static-assets","level":1,"fileRelativePath":"borschik-static-assets/index_en.md","lang":"en","readingTime":{"minutes":2.565}},"frontmatter":{"title":"Borschik helps with remote static assets","subTitle":null,"link":null,"v2":null,"old":true,"date":"2014-03-10T00:00:00.000Z","layout":"post","tags":null},"internal":{"contentFilePath":"/home/runner/work/varya.github.com/varya.github.com/content/posts/borschik-static-assets/index_en.md"}},"fileSourceUrl":"https://github.com/varya/varya.github.com/edit/develop/content/posts/ym-modular-system/index_en.md","frontmatter":{"title":"YM Modular System. Why?","categories":"en issues","old":true,"date":"2014-02-25T00:00:00.000Z","layout":"post"}}},"staticQueryHashes":[],"slicesMap":{}}