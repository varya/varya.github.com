{"componentChunkName":"component---src-templates-post-js","path":"/ru/posts/sc5-styleguide-for-smallers/","result":{"data":{"mdx":{"id":"c4e686a9-60fa-50e5-9655-f7392ebf9fc9","body":"\nВ этом году у меня было несколько презентаций про [SC5 Style Guide](http://styleguide.sc5.io/), в которых\nя делилась опытом использования инструмента на проектах одного их наших клиентов — мобильного оператора Elisa.\nУчитывая, что Elisa — огромная компания с массой вебсайтов, на которых нужно поддерживать единый стиль, не\nудивительно, что SC5 Style Guide как инструмент там очень полезен. Но как насчет небольших проектов? Стоит ли для них\nделать стайл гайды? Я сама не знала ответ на этот вопрос и захотела поэкспериментировать. В качестве подопытного\nсайта взяла собственный блог.\n<excerpt/>\n\nЖивой стайл гайд моего блога выглядит вот так: [varya.me/styleguide](http://varya.me/styleguide). Вы можете видеть\nвесь интерфейс, разделенный на блоки, каждый из которых подразумевает самостоятельный компонент. Я до сих пор не\nсмотрела на интерфейс своего блога в таком ключе, и это заставляет меня даже пересмотреть CSS-архитектуру проекта. Но\nдавайте обо всём по порядку.\n\n## Настройка SC5 Style Guide\n\nВсё начинается с установки пакета\n\n```\nnpm install --save-dev sc5-styleguide\n```\n\nПосле этого я смогла сгенерировать веб-сайт стайл гайда. Для этого понадобилась\n[парочка gulp тасков](https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/Gulpfile.js).\n\nМне нужно было немного отступить от конфигурации, которая предлагается в документации, чтобы решить свои задачи. Напишу\nоб этом подробно.\n\n### Использование параметра `appRoot`\n\nМой стайл гайд находится не в корне домена, а в папке, которая называется `styleguide`. Об этом нужно сообщить\nинструменту, чтобы сгенерированное им приложение использовало верные ссылки:\n\n```js\ngulp.task(\"styleguide:generate\", function() {\n\n  return gulp.src([\"desktop.blocks/**/*.css\"])\n    .pipe(styleguide.generate({\n      title: \"Varya.me Styleguide\",\n      appRoot: '/styleguide',\n      ...\n```\n\n### Подключение JavaScript\n\nВ качестве значения параметра `extraHead` можно перечислить все, что нужно подключить к странице. У меня для некоторых\nкомпонент требуется JavaScript. Конечно, не обязательно делать так, чтобы он работал, можно просто делать стайл гайд\nтолько на базе CSS. Но мне хотелось, чтобы компоненты в документации выглядели бы абсолютно так же как в блоге. И\nблагодаря `extraHead` я могу указать, какой JavaScript файл нужен.\n\n```js\ngulp.task(\"styleguide:generate\", function() {\n\n  return gulp.src([\"desktop.blocks/**/*.css\"])\n    .pipe(styleguide.generate({\n      title: \"Varya.me Styleguide\",\n      ...\n      extraHead: [\n        '<script src=\"http://yandex.st/jquery/1.7.2/jquery.min.js\"></script>',\n        '<script src=\"/desktop.bundles/index/index.min.js\"></script>',\n        ...\n      ]\n    ...\n```\n\nНо на самом деле нужна ещё одна хитрость. Мои компоненты написаны на `i-bem.js` и автоматически инициализируются по\n`domReady`. Это как раз то что нужно для блога, ведь страницы статические и вся HTML-разметка сразу загружается. Но сайт\nстайл гайда — это SPA (одностраничное приложение), и там это не работало. Компоненты отрисовываются на страницах\nстайлгайда \"на лету\", и очевидно, что это происходит позже `domReady`. То есть они не инициализируются автоматически.\nК счастью, можно использовать событие `styleguide:onRendered` на объекте `window`, которое SC5 Style Guide создаёт\nкаждый раз, когда компонент перересовывается. Я сделала инициализацию компонент на это событие, то есть сразу после того\nкак они появляются на странице. Такая инициализация нужна только на сайте стайл гайда, поэтому этот код не включается\nв общую сборку и подключается к стайл гайду как дополнительный файл.\n\n```\ngulp.task(\"styleguide:generate\", function() {\n\n  return gulp.src([\"desktop.blocks/**/*.css\"])\n    .pipe(styleguide.generate({\n      title: \"Varya.me Styleguide\",\n      ...\n      extraHead: [\n        ...\n        '<script src=\"/styleguide/i-bem__init_styleguide.js\"></script>'\n      ]\n    ...\n```\n\nВы можете посмотреть, как работают компоненты с JavaScript на примере блока, который показывает список репозиториев\nна GitHub после того как сделает запрос в GitHub API:\n[varya.me/styleguide/#/section/4.3](http://varya.me/styleguide/#/section/4.3). Или на странице блока с кружочками,\nкоторые генерируются случайным образом: [varya.me/styleguide/#/section/5.1](http://varya.me/styleguide/#/section/5.1).\n\nИ последняя, очень важная деталь для того, чтобы заставить JavaScript работать — это использование параметра\n`disableEncapsulation: true`. По умолчанию Style Guide оборачивает каждый компонент в ShadowDOM. Это даёт разработчику\nвозможность не беспокоиться о том, что его стили пересекутся со стилями сгенерированного веб-сайта. Но в то же время\nэто инкапсулирует компонент, в том числе и от JavaScript, подключённого в `<head>`. Но благодаря специальному параметру\nэту инкапсуляцию можно предотвратить. Так что у меня компоненты просто вставляются в HTML-код сайта как есть. Что\nкасается возможности перезаписать стили сайта, этого не случится. Я использую БЭМ, поэтому все компоненты уже\n\"инкапсулированы\" на уровне методологии.\n\n### Стайл гайд как статическая страница\n\nДля режима разработки у SC5 Style Guide запускается сервер, который разруливает все пути в корневой каталог, откуда и\nраздаётся сгененированный SPA-сайт. Если вы хотите пользоваться результатом в своём сервере, о такой маршрутизации\nпридется позаботиться самостоятельно. Но в моём случае сайт располагается на GitHub Pages, это статический хостинг и там\nникакой маршрутизации не предусмотрено. Однако на этот случай есть настройка `disableHtml5Mode: true`. Она говорит\nгенератору, что в приложении должны быть старые добрые ссылки с решеткой `#`. Так что всё работает.\n\n## Документирование компонент\n\nЕщё до внедрения стайл гайда, у меня весь CSS был написан по БЭМ, то есть с компонентым подходом. Для стайл гайда нужно\nбыло только задать компонентам структуру и задокументировать блоки при помощи KSS.\n\n### Структурирование кода\n\nОказалось, что файловая структура, которую предлагает БЭМ, не самое лучшее решение для разработки живого стайлгайда. На\nфайловой системе все компоненты представлены длинным плоским списком:\n\n```\ndesktop.blocks/\n├── article\n├── articles-list\n├── box\n├── ...\n└── text\n```\n\n[github/varya/varya.github.com/desktop-blocks](https://github.com/varya/varya.github.com/tree/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks)\n\nТо есть маленькие атомарные компоненты никак не отличаются от блоков для структуры страницы (таких как Header или\nFooter), от блоков из сайдбара или от CSS для сторонних виджетов. Разумеется, плоская структура более удобна для\nсборщиков, но с точки зрения разработки нужна какая-то каталогизация.\n\nДля этого я сделала файл `overview.css`, в котором нет никакого активного CSS, но он помогает мне организовать блоки.\nУ меня там 5 секций, и в каждой относящиеся к ней компоненты:\n\n```\n/*\nAtoms\n\nStyleguide 1\n\nstyleguide:ignore:start\n\n@import url(\"logo/logo.css\"); // 1.1\n@import url(\"text/text.css\"); // 1.2\n...\n\nstyleguide:ignore:end\n*/\n\n/*\nMain blocks\n\nStyleguide 2\n\nstyleguide:ignore:start\n\n@import url(\"header/header.css\"); // 2.1\n...\n\nstyleguide:ignore:end\n*/\n```\n\n[github/varya/varya.github.com/desktop-blocks/overview.css](https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks/overview.css)\n\nПо сути в файле кроме комментариев ничего нет. А в комментариях — описание каждой секции. Также перечислены\nфайлы блоков, имеющие к ней отношение. Это удобно для навигации по коду. В этом перечислении я использовала `@import`\n(просто потому что могу).\n\nЗдесь только одна особенность — использование волшебных комментариев `styleguide:ignore:start` и\n`styleguide:ignore:end`. Ими можно обернуть любой кусок CSS (SASS или LESS) кода и таким образом сказать генератору SC5\nStyle Guide, что этот кусок нужно проигнорировать.\n\nЯ игнорирую свои списки блоков, потому что они никак не влияют на код. Но описания секций остаются.\n\n### Описание блоков\n\nВсе остальное легко. Перед каждым компонентом я размещаю комментарий с KSS описанием. Например, один из простых блоков,\nLogo:\n\n```css\n/*\n\nLogo\n\nmarkup:\n<logo class=\"logo\">···<b class=\"var\">var</b>·<b class=\"ya\">ya</b>;<b class=\"cursor\"></b></logo>\n\nStyleguide 1.1\n\n*/\n.logo\n{\n...\n```\n\n[github/varya/varya.github.com/desktop-blocks/logo/logo.css](https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks/logo/logo.css)\n\nSee it rendered: [varya.me/styleguide/#/section/1.1](http://varya.me/styleguide/#/section/1.1)\n\nВ некоторых компонентах использованы дополнительные возможности. Например, социальные иконки — это один и тот же блок\nс разными модификаторыми. Такое можно задокументировать одним махом:\n\n```css\n/*\nSocial icon\n\n.social-ico__ico_type_rss         - RSS\n.social-ico__ico_type_twitter     - Twitter\n.social-ico__ico_type_github      - Github\n.social-ico__ico_type_facebook    - Facebook\n.social-ico__ico_type_linkedin    - LinkedIn\n\nmarkup:\n<a class=\"link social-ico__ico {$modifiers}\" href=\"#\" title=\"Icon title\"></a>\n\nStyleguide 1.5.1\n*/\n\n.social-ico__ico\n{\n...\n```\n\n[github/varya/varya.github.com/desktop-blocks/social-ico/social-ico.css](https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks/social-ico/social-ico.css#L49)\n\nВ документации компоненты прорисованны по отдельности для каждого модификатора:\n[varya.me/styleguide/#/section/1.5.1](http://varya.me/styleguide/#/section/1.5.1)\n\nДля сложносоставных компоненты, которые используют внутри себя другие, я использовала ключевой тег `<sg-insert>`.\nОн вставляет вместо себя код компонента с соответствующим номером.\n\n```css\n/*\nSidebar\nmarkup:\n<nav class=\"sidebar\">\n  <sg-insert>4.2</sg-insert>\n  <sg-insert>4.3</sg-insert>\n</nav>\nStyleguide 4.1\n*/\n\n.sidebar\n{\n...\n```\n\n[github/varya/varya.github.com/desktop-blocks/sidebar/sidebar.css](https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks/sidebar/sidebar.css)\n\nБлагодаря этому документация в коде приемлемого размера, а на сайте все раскрывается в полном виде:\n[varya.me/styleguide/#/section/4.1](http://varya.me/styleguide/#/section/4.1)\n\n## Style-Guide-Driven Development\n\nЕсли в получившемся стайл гайде в поле для поиска вы наберете \"logo\", то увидите все компоненты, который используют\nлоготип! Поиск проводится по всему коду. Точно так же можно поискать компоненты, в разметке которых используется `<em>`.\nИли в чьих стилях есть `font:`.\n\nМне лично особенно нравится, что можно искать и по разметке. Этим можно пользоваться во время рефакторинга. Например,\nизменив input, я могу найти все использующие его блоки и посмотреть, не сломались ли они.\n\nХотя на самом деле это лишь небольшое дополнение к главному преимуществу использования стайл гайда. По-моему, его\nосновной плюс — **демонстрация ошибок вёрстки**.\n\nВ CSS моего блога ещё до внедрения стайл гайда использовался компонентый подход. Учитывая мой БЭМ опыт, я была на 100%\nуверена, что компоненты написаны хорошо. Но даже такая компонентная разработка всё равно происходила с точки зрения\nстраницы. До того как блоки были внедрены в блог, я делала их на отдельной статической странице. То есть отдельно, вне\nстраницы, они никогда и не существовали.\n\nБлоки разрабатывались как независимые, я писала код, пытаясь этого достигнуть. Но **будучи размещенными вместе на одной и\nтой же странице, они никогда независимыми не были**.\n\nПосле того как SC5 Style Guide волшебным образом отрисовал их по отдельности, я могу видеть, что блок\n[logo](http://varya.me/styleguide/#/section/1.1) выровнен по правому краю. Хотя почему бы это? Очевидно, это моя ошибка,\nдопущенная, когда я верстала логитип внутри блока Header.\n\nТо же самое произошло с [переключалкой языков](http://varya.me/styleguide/#/section/1.4), она так же выровнена вправо.\n\nВ [блоке социальных иконок](http://varya.me/styleguide/#/section/1.5) переключалка языков подразумевалась рядом с\nиконкой RSS. Но на странице они располагаются близко друг к другу только потому что весь блок помещен в узкий контейнер.\nВ стайл гайде блок отрисован отдельно, и мне теперь видно, что он свёрстан неидеально.\n\nКонечно, такие открытия подразумевают скорый рефакторинг :-)\n\nИ в довершение нужно сказать, что эксперимент не закончен. Есть и другие открытия для новых постов.\n","fields":{"slug":"ru/posts/sc5-styleguide-for-smallers/","disqusIdentifier":"posts-sc5-styleguide-for-smallers-index-ru","readingTime":{"minutes":7.11}},"frontmatter":{"title":"Стайл гайд для самых маленьких","subTitle":null,"date":"18 August 2015","v2":true,"old":null,"tumblr":null,"tags":null,"meta":null,"canonical":null,"cover":null}},"site":{"siteMetadata":{"siteUrl":"https://varya.me"}}},"pageContext":{"slug":"ru/posts/sc5-styleguide-for-smallers/"}},"staticQueryHashes":[],"slicesMap":{}}