{"componentChunkName":"component---src-templates-post-js","path":"/ru/posts/xpath-prime-numbers/","result":{"data":{"mdx":{"id":"8c0aa3d2-d9d6-510d-8d59-8a412f713705","body":"\nИногда мы на работе решаем интересные задачки. Вот, например, одна (почти первая) в постановке\n<a href=\"http://alpha-san.ya.ru/\"><span style=\"color: #000000;\"><strong><span style=\"color: #ff0000;\">n</span>op`а</strong></span></a>:\n<excerpt/>\n\n## Частный случай\n\nДан такой xml:\n\n```xml\n<items>\n  <item>1</item>\n  <item>2</item>\n  ...\n  <item>N-1</item>\n  <item>N</item>\n</items>\n```\n\nт.е. выписаны все натуральные числа от 1 до N включительно. Про N ничего заранее не известно --\nбольшое, маленькое, еще какое-то &mdash; мы не знаем.\n\nНужно. Написать **xpath**, выбирающий все item'ы с простыми числами.\nПодчеркиваю - **xpath**.\nТ.е. внутри тега xsl:stylesheet должен быть один примерно такой шаблон:\n\n```xslt\n<xsl:template match=\"/\">\n  <xsl:copy-of select=\".......\"/>\n</xsl:template>\n```\n\nи больше ничего &mdash; ни переменных, ни других шаблонов, ни функций.\n\nНа выходе будет что-то типа:\n\n```xml\n<item>2</item>\n<item>3</item>\n<item>5</item>\n<item>7</item>\n...\n```\n\nРешение следующее:\n\n```xslt\n<xsl:template match=\"/\">\n  <items>\n    <xsl:copy-of\n      select=\"items/item[\n        not(preceding-sibling::item[(last() + 1) mod . = 0 and . != 1])\n        and\n        . != 1\n      ]\"/>\n  </items>\n</xsl:template>\n```\n\n## Общая задача\n\nУсложненный вариант &mdash; все тоже самое, но в xml просто набор item'ов с какими-то натуральными числами\nв каком-то порядке, например:\n\n```xml\n<items>\n  <item>142</item>\n  <item>73</item>\n  <item>10000341</item>\n  <item>10</item>\n  ...\n</items>\n```\n\nРешение:\n\n```xslt\n<xsl:template match=\"/\">\n  <items>\n    <xsl:copy-of select=\"items/item[\n      not(\n        str:tokenize(str:padding(. - 1, '1'), '')[\n          (last() + 1 ) mod position()= 0\n          and position() != 1\n        ]\n      ) and . != 1\n      ]\"/>\n  </items>\n</xsl:template>\n```\n\nЧтобы понять, что тут делается, надо прочитать про функции\n[padding](http://exslt.org/str/functions/padding/index.html) и\n[tokenize](http://exslt.org/str/functions/tokenize/index.html) на EXSLT.org.\n","fields":{"slug":"ru/posts/xpath-prime-numbers/","disqusIdentifier":"ru-issues-xpath-prime-numbers","readingTime":{"minutes":1.1}},"frontmatter":{"title":"Простые числа и XPath","subTitle":null,"date":"21 June 2009","v2":null,"old":true,"tumblr":null,"tags":null,"meta":null,"canonical":null,"cover":null}},"site":{"siteMetadata":{"siteUrl":"https://varya.me"}}},"pageContext":{"slug":"ru/posts/xpath-prime-numbers/"}},"staticQueryHashes":[],"slicesMap":{}}