{"componentChunkName":"component---src-templates-post-js","path":"/ru/posts/javascript-in-bemjson/","result":{"data":{"mdx":{"id":"db60daaa-3c30-523d-8e77-53b89a6112fe","body":"\nОбычно разработка страницы начинается с прототипирования интерфейса и затем\nпродолжается созданием статической странички при помощи HTML/CSS и элементарного\nJavaScript. Если использууется полный стек БЭМ, переход от прототипирования к\nполноценному сайту происходит постепенно. Можно склонировать проект\n[project-stub](https://github.com/bem/project-stub)\nи сделать статическую страницу, об этом уже опубликован\n[туториал](http://bem.info/articles/start-with-project-stub/).<excerpt/>\n\nБлагодаря `BEMHTML` вам не нужно писать весь HTML для страницы вручную. Описывая\nстраницу в BEMJSON, вы экономите время, ведь не нужно писать каждый тег. Но в\nслучае больших страниц этого мало.\n\nК счастью, в BEMJSON можно включать JavaScript, результатом которого будет\nописание блоков.\nВот пример такой страницы:\n\n```js\n({\n    block: 'page',\n    ...\n    content:[\n        ...\n        {\n            block: 'content',\n            content: (function() {\n                var res = [];\n                for(var i = 0; i < 10; i++) {\n                    res.push({\n                        block: 'button',\n                        content: 'Button ' + (i + 1)\n                    });\n                }\n                return res;\n            })()\n        },\n        ...\n    ]\n})\n```\n\n[полный\nкод](https://github.com/varya/dynamic-bemjson/blob/master/desktop.bundles/page1/page1.bemjson.js)\n\nКогда страница собирается при помощи `bem-tools`, этот JavaScript создает 10\nблоков `button`.\nМожете проверить [результирующую страницу](http://varya.me/dynamic-bemjson/desktop.bundles/page1/page1.html)\nчтобы увидеть их.\n\nЕщё одним примером может служить блок `menu`. Такой интерфейсный компонент\nобычно состоит из множества повторяющихся пунктов с минимальными различиями.\nПолучается копипаст, которого можно избежать, используя JavaScript в BEMJSON.\n\n```js\n({\n    block: 'page',\n    ...\n    content:[\n        ...\n        {\n            block: 'menu',\n            content: [\n                {\n                    title: 'Index',\n                    isSelected: false,\n                },\n                {\n                    title: 'Products',\n                    isSelected: true\n                },\n                {\n                    title: 'Contact',\n                    isSelected: false\n                }\n            ].map(function(item){\n                var block = {\n                    block: 'menu',\n                    elem: 'item',\n                    content: item.title,\n                    mods: {\n                        selected: item.isSelected\n                    }\n                };\n                return block;\n            })\n        },\n        ...\n    ]\n})\n```\n\n[full\ncode](https://github.com/varya/dynamic-bemjson/blob/master/desktop.bundles/page2/page2.bemjson.js)\n\nВ результате получается [страница с меню из 3х пунктов](http://varya.me/dynamic-bemjson/desktop.bundles/page2/page2.html).\nЧем больше массив с пунктами меню, тем больше пользы. Особенно если структура\nменю меняется в процессе разработки.\n\nКонечно, этой возможностью не придется пользоваться, если BEMJSON — это\nрезультат первого слоя шаблонов (таких как BEMTREE или priv.js) — там вы можете\nпроизвести столько BEMJSON, сколько требуется. Но на первом этапе разработки,\nкогда делается статическая страница, трюки с JavaScript в BEMJSON помогут\nизбежат копипаста.\n","fields":{"slug":"ru/posts/javascript-in-bemjson/","disqusIdentifier":"ru-issues-javascript-in-bemjson","readingTime":{"minutes":1.575}},"frontmatter":{"title":"JavaScript в BEMJSON","subTitle":null,"date":"21 January 2014","v2":null,"old":true,"tumblr":null,"tags":null,"meta":null,"canonical":null,"cover":null}},"site":{"siteMetadata":{"siteUrl":"https://varya.me"}}},"pageContext":{"slug":"ru/posts/javascript-in-bemjson/"}},"staticQueryHashes":[],"slicesMap":{}}