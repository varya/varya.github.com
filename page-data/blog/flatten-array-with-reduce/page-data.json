{"componentChunkName":"component---src-templates-post-js-content-file-path-home-runner-work-varya-github-com-varya-github-com-content-posts-flatten-array-with-reduce-index-md","path":"/blog/flatten-array-with-reduce/","result":{"data":{"mdx":{"id":"3d8bf7cc-35c1-5e06-b597-68c7a8742740","body":"\n<div data-excerpt>\n\nNested structures are useful for managing and editing. But when it comes to representation in UI, it might\nnot be trivial to iterate through all the deep levels. Often happens, that it is more useful to have\na flat structure which probably preserves the depth of the items. In JavaScript, easiest way to transform such structure is\n`reduce` method.\n\n</div>\n\n<div class=\"small\" markdown=\"1\">\n\n![](thumb.jpg)<br/>\nImage source:\n[https://macwright.org/2015/01/03/reduce-juice.html](https://macwright.org/2015/01/03/reduce-juice.html)\n\n</div>\n\nSay, we have a nested structure representing the parts of a design system. This is a list of categories\nwith underlying item which, in turn, may have subitems.\n\n```javascript\nexport const parts = [\n  {\n    title: \"Visual language\",\n    parts: [\n      {\n        title: \"Color\",\n        parts: [\"Palettes\", \"Contrast\", \"Meaning\", \"Swatches\"],\n      },\n      {\n        title: \"Typography\",\n        parts: [\"Hierarchy\", \"Weights / types\", \"Web fonts\", \"Baseline grid\"],\n      },\n      \"Photography\",\n    ],\n  },\n  {\n    title: \"UI elements\",\n    category: true,\n    parts: [\n      \"Paragraph\",\n      \"Block quote\",\n      \"Headers (H1 - H6)\",\n      \"Lists\",\n      \"Links\",\n      {\n        title: \"Buttons\",\n        parts: [\"Primary\", \"Secondary\", \"Button groups\", \"Menu buttons\"],\n      },\n      \"Slider\",\n    ],\n  },\n];\n```\n\nInstead of going deeper and deeper, it's worth to flatten the structure with the help of `reduce` function, and then\niterate through the new structure.\n\n```javascript\nconst flatten = (obj, depth, currentDepth = 0) => {\n  const array = Array.isArray(obj) ? obj : [obj];\n  return array.reduce((acc, value) => {\n    acc.push({\n      title: value.title || value,\n      depth: currentDepth,\n    });\n    if (value.parts) {\n      acc = acc.concat(flatten(value.parts, depth, currentDepth + 1));\n    }\n    return acc;\n  }, []);\n};\n\nconst partsFlattened = parts.map((category) => {\n  const categoryFlattened = {\n    parts: flatten(category.parts),\n    title: category.title,\n    category: category.category,\n  };\n  return categoryFlattened;\n});\n```\n\nThis code fallens the given structure as the following.\n\n```javascript\n[\n  {\n    category: \"undefined\",\n    parts: [\n      {\n        depth: 0,\n        title: \"Color\",\n      },\n      {\n        depth: 1,\n        title: \"Palettes\",\n      },\n      {\n        depth: 1,\n        title: \"Contrast\",\n      },\n      {\n        depth: 1,\n        title: \"Meaning\",\n      },\n      {\n        depth: 1,\n        title: \"Swatches\",\n      },\n      {\n        depth: 0,\n        title: \"Typography\",\n      },\n      {\n        depth: 1,\n        title: \"Hierarchy\",\n      },\n      {\n        depth: 1,\n        title: \"Weights / types\",\n      },\n      {\n        depth: 1,\n        title: \"Web fonts\",\n      },\n      {\n        depth: 1,\n        title: \"Baseline grid\",\n      },\n      {\n        depth: 0,\n        title: \"Photography\",\n      },\n    ],\n    title: \"Visual language\",\n  },\n  {\n    category: true,\n    parts: [\n      {\n        depth: 0,\n        title: \"Paragraph\",\n      },\n      {\n        depth: 0,\n        title: \"Block quote\",\n      },\n      {\n        depth: 0,\n        title: \"Headers (H1 - H6)\",\n      },\n      {\n        depth: 0,\n        title: \"Lists\",\n      },\n      {\n        depth: 0,\n        title: \"Links\",\n      },\n      {\n        depth: 0,\n        title: \"Buttons\",\n      },\n      {\n        depth: 1,\n        title: \"Primary\",\n      },\n      {\n        depth: 1,\n        title: \"Secondary\",\n      },\n      {\n        depth: 1,\n        title: \"Button groups\",\n      },\n      {\n        depth: 1,\n        title: \"Menu buttons\",\n      },\n      {\n        depth: 0,\n        title: \"Slider\",\n      },\n    ],\n    title: \"UI elements\",\n  },\n];\n```\n\nLately, the flat structure can be used if, for instance, you need to output the items similarly but\nprovide additional CSS classes depending on the depth of the items. [Run the demo](https://jsfiddle.net/1ew8gn63/15/)\nto see how it can work.\n","fields":{"slug":"blog/flatten-array-with-reduce/","disqusIdentifier":"blog-flatten-array-with-reduce","readingTime":{"minutes":2.375}},"frontmatter":{"title":"Flatten array with JavaScript reduce function","subTitle":null,"date":"01 June 2020","v2":null,"old":null,"tumblr":null,"tags":null,"meta":{"desc":"Javascript reduce function helps to transform data array structures, for example flatten them into 1-level arrays which are easier to iterate.\n"},"canonical":null,"cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/d74aa486feb57818f4c5271cffcda76e/a4f83/thumb.jpg","srcSet":"/static/d74aa486feb57818f4c5271cffcda76e/a4f83/thumb.jpg 1280w","sizes":"1280px"},"sources":[{"srcSet":"/static/d74aa486feb57818f4c5271cffcda76e/f5b15/thumb.webp 1280w","type":"image/webp","sizes":"1280px"}]},"width":1280,"height":1505}}}}},"site":{"siteMetadata":{"siteUrl":"https://varya.me"}}},"pageContext":{"slug":"blog/flatten-array-with-reduce/","prev":{"id":"1bb16b91-b2b7-5de5-9c04-e09da3b0cfda","fields":{"slug":"blog/webfonts-with-sass-and-webpack/","disqusIdentifier":"blog-webfonts-with-sass-and-webpack","level":1,"fileRelativePath":"webfonts-with-sass-and-webpack/index.md","lang":"en","readingTime":{"minutes":2.225}},"frontmatter":{"title":"Using web fonts with SASS and Webpack","subTitle":null,"link":null,"v2":null,"old":null,"date":"2020-05-12T00:00:00.000Z","layout":"post","tags":"webpack"},"internal":{"contentFilePath":"/home/runner/work/varya.github.com/varya.github.com/content/posts/webfonts-with-sass-and-webpack/index.md"}},"next":{"id":"3087ebf6-a03a-5bf8-9399-dfe839daa079","fields":{"slug":"blog/proptypes-in-zeroheight/","disqusIdentifier":"blog-proptypes-in-zeroheight","level":1,"fileRelativePath":"proptypes-in-zeroheight/index.md","lang":"en","readingTime":{"minutes":1.8}},"frontmatter":{"title":"PropTypes documentation in ZeroHeight","subTitle":null,"link":null,"v2":null,"old":null,"date":"2020-06-16T00:00:00.000Z","layout":"post","tags":null},"internal":{"contentFilePath":"/home/runner/work/varya.github.com/varya.github.com/content/posts/proptypes-in-zeroheight/index.md"}},"fileSourceUrl":"https://github.com/varya/varya.github.com/edit/develop/content/posts/flatten-array-with-reduce/index.md","frontmatter":{"title":"Flatten array with JavaScript reduce function","date":"2020-06-01T00:00:00.000Z","cover":"thumb.jpg","layout":"post","meta":{"desc":"Javascript reduce function helps to transform data array structures, for example flatten them into 1-level arrays which are easier to iterate.\n"}}}},"staticQueryHashes":[],"slicesMap":{}}