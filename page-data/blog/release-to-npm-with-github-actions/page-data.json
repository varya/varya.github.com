{"componentChunkName":"component---src-templates-post-js-content-file-path-home-runner-work-varya-github-com-varya-github-com-content-posts-release-to-npm-with-github-actions-index-md","path":"/blog/release-to-npm-with-github-actions/","result":{"data":{"mdx":{"id":"f44fd5a8-c973-5c86-8077-b252f4dbc96e","body":"\n<div data-excerpt>\n\nRecently I implemented a new cool feature to one of the npm packages I develop. Later this day, I was\nshowing it to a friend, and ... nothing worked. What a shame, I forgot to publish the package. The\nfeature successfully passed the tests, and was pushed to the package GitHub repository but no one could not\nenjoy it anyway. Is there anything to help to avoid such situations? Yes, it is [GitHub Actions](https://github.com/features/actions) — automated workflows that can run different jobs, including publishing packages to npm.\n\n</div>\n\nSetting up a workflow is surprisingly simple: you only need to create a `.yml` file in `.github/workflows` folder. A file could\nhave any name as there can be more than one workflow.\n\nHere is the content of my `.github/workflow/gatsby-theme-npm-publish.yml`\n\n```yml\nname: Gatsby theme npm package\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  publish-npm:\n    runs-on: ubuntu-latest\n    env:\n      working-directory: ./gatsby-theme\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v1\n        with:\n          node-version: 12\n          registry-url: https://registry.npmjs.org/\n      - run: npm install -g yarn\n      - name: install packages\n        run: yarn\n        working-directory: ${{env.working-directory}}\n      - name: publish\n        run: npm publish\n        working-directory: ${{env.working-directory}}\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.npm_token}}\n```\n\nAs you can see, the jobs run on every push to the `master` branch. There are a couple of special details in this workflow.\n\nNote that the package build is made not in the root directory but in the `gatsby-theme` directory. This repository hosts several packages, this is why. To run the commands in the correct context, I had to specify the directory. For that, I first define the `working-directory` variable in the `env` section of the job and later use it az `${{env.working-directory}}`.\n\nAnother detail is providing an authorization token for npm. Such tokens are to generate on the [https://www.npmjs.com/](https://www.npmjs.com/) website:\n\n![](./npm-token1.png)\n\nClick on the **Create new token** button.\n\n![](./npm-token2.png)\n\nAnd choose to create a token with the right to publish.\n\n![](./npm-token3.png)\n\nCopy the token you got into the clipboard.\n\nAfter that, you need to add this token to the secrets of your repository. Go to the **Settings** tab of the repository:\n\n![](./github-token1.png)\n\nFind the **Secrets** page in the sidebar.\n\n![](./github-token2.png)\n\nCreate a new secret.\n\n![](github-token3.png)\n\nPut the npm token which you have in the clipboard to the texarea and give it a name, say `npm_token`.\n\n![](./github-token4.png)\n\nThis name is what has to be provided as a value of `NODE_AUTH_TOKEN` variable in the `env` section of\nthe `npm publish` command.\n\n```\nNODE_AUTH_TOKEN: ${{secrets.npm_token}}\n```\n\nVoilà! Now I have the npm package automatically published every time the `master` branch is updated.\n\n![](./github-workflow.png)\n","fields":{"slug":"blog/release-to-npm-with-github-actions/","disqusIdentifier":"blog-release-to-npm-with-github-actions","readingTime":{"minutes":2.085}},"frontmatter":{"title":"Automatic releases of npm packages with GitHub actions","subTitle":null,"date":"17 August 2020","v2":null,"old":null,"tumblr":null,"tags":null,"meta":{"desc":"How to tune GitHub workflows for automatic releases of an npm package. The npm publish can be run on every change to the master branch keeping your npm package up-to-date with its repository.\n"},"canonical":null,"cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#c82828","images":{"fallback":{"src":"/static/83dfc8224dc5a9215da6264dd62ac021/6b063/thumb.png","srcSet":"/static/83dfc8224dc5a9215da6264dd62ac021/6b063/thumb.png 2400w","sizes":"2400px"},"sources":[{"srcSet":"/static/83dfc8224dc5a9215da6264dd62ac021/19ade/thumb.webp 2400w","type":"image/webp","sizes":"2400px"}]},"width":2400,"height":1260}}}}},"site":{"siteMetadata":{"siteUrl":"https://varya.me"}}},"pageContext":{"slug":"blog/release-to-npm-with-github-actions/","prev":{"id":"64ec2207-171b-5679-838d-f67ec19a1ded","fields":{"slug":"blog/stories-with-different-viewports/","disqusIdentifier":"blog-stories-with-different-viewports","level":1,"fileRelativePath":"stories-with-different-viewports/index.md","lang":"en","readingTime":{"minutes":3.275}},"frontmatter":{"title":"Generic Storybook stories with different viewports","subTitle":null,"link":null,"v2":null,"old":null,"date":"2020-08-12T00:00:00.000Z","layout":"post","tags":"storybook"},"internal":{"contentFilePath":"/home/runner/work/varya.github.com/varya.github.com/content/posts/stories-with-different-viewports/index.md"}},"next":{"id":"9ae08b64-48c9-5555-98c6-352415aef98c","fields":{"slug":"blog/design-tokens-and-components/","disqusIdentifier":"blog-design-tokens-and-components","level":1,"fileRelativePath":"design-tokens-and-components/index.md","lang":"en","readingTime":{"minutes":0.29}},"frontmatter":{"title":"The context dilemma: design tokens and components\n","subTitle":null,"link":null,"v2":null,"old":null,"date":"2021-01-15T00:00:00.000Z","layout":null,"tags":null},"internal":{"contentFilePath":"/home/runner/work/varya.github.com/varya.github.com/content/posts/design-tokens-and-components/index.md"}},"fileSourceUrl":"https://github.com/varya/varya.github.com/edit/develop/content/posts/release-to-npm-with-github-actions/index.md","frontmatter":{"title":"Automatic releases of npm packages with GitHub actions","date":"2020-08-17T00:00:00.000Z","cover":"thumb.png","layout":"post","meta":{"desc":"How to tune GitHub workflows for automatic releases of an npm package. The npm publish can be run on every change to the master branch keeping your npm package up-to-date with its repository.\n"}}}},"staticQueryHashes":[],"slicesMap":{}}