{"componentChunkName":"component---src-templates-blog-index-js","path":"/blog/9/","result":{"data":{"posts":{"edges":[{"node":{"body":"\nThis article features common problems that developers often face, or maybe used\nto face before the current open source era, when writing JavaScript for the\nclient side; showcase of possible solutions to these problems and explanations\nof my choices.\n<excerpt/>\n\n## Client-side magic\n\nI am going to write about client-side JavaScript code only which runs under a\nbrowser and empowers an interface with interactivity.\n\nA piece of interface is represented with some HTML (and obviously styled with\nCSS). Also it can be equiped with JavaScript usually describing how to react to\nuser's actions.\n\nSo, when developing a piece of interface, we write:\n\n1. HTML/CSS\n2. JavaScript\n3. Some code to link 2 to 1.<br/>\n   (This code says which part of HTML on a page corresponds to a JavaScript\n   component.)\n\n## A few ways to matchmake\n\nThus, the so-called 'linking' joins designated piece of JavaScript to its\ncorresponding piece of HTML. There are different ways around this.\n\n### Linking with event attributes. The old school way.\n\nSince, in most cases running JavaScript is a reaction to some events firing,\nthere is an obvious way to declare in HTML what the reaction should be. These\nare the [intrinsic event\nattributes](http://www.w3.org/TR/html401/interact/scripts.html#events).\n\nFor example, if you need a hidden `<div>` with an authorization form to be shown\nwhen a user clicks on a 'log in' link you can write a JavaScript function for\nthat. Then, call it in with an `onclick` attribute.\n\n```html\n<a href=\"/login-page\" onclick=\"return showLogin()\">log in</a>\n<div id=\"login-form\">\n  <form name=\"login\" ...>...</form>\n</div>\n```\n\n```js\ndom = document.getElementById ? true : false;\n\nfunction showLogin() {\n  if (dom && document.forms[\"login\"]) {\n    document.getElementById(\"login-form\").style.display = \"block\";\n    return false;\n  } else return true;\n}\n```\n\nThat works fine, except it uses global variables and demonstrates constraint\nwith choosing a script loading strategy, which will be detailed below. Also in\nthis case you cannot code any predefined action; everything happens after a user\ndoes something.<br/>\nI personally don't like this method because it leaves JavaScript implants in\nHTML code, whose main purpose is to describe the document structure, not page\nbehavior.\n\n### Moving JavaScript into JavaScript\n\nTherefore, a better way would be to stack everything related to JavaScript into\nthe page `.js` file.\n\nFrom here I will write jQuery code to save time and space. If you prefer another\nlibrary, just get the gist.\n\n```js\n$.fn.myPlugin = function() {\n  this.fadeIn(\n    'normal',\n    function() { ... }\n  );\n}\n\n...\n\n$('#element').myPlugin();\n```\n\nWith plugins you can describe behavioral pattern and then apply it to the\nelements needed. In this case you don't need to inject JavaScript into HTML any\nmore, which makes maintenance easier. But for every single element you still\nhave to write a line of code to apply the plugin.\n\n### Declaring behavior with CSS classes\n\nWhen having many controls per page it's not useful to initialize each of them\nseparately. A better way would be to mark HTML block with a matching CSS class.\n\n```html\n<input class=\"js-myPlugin\" type=\"text\" name=\"login\" />\n```\n\n```js\n$.fn.myPlugin = function() {\n  this.fadeIn(\n    'normal',\n    function() { ... }\n  );\n}\n\n$('.js-myPlugin').myPlugin();\n```\n\nWith that you need your 'linking' code only once for a plugin; it can be written\nin the plugin file to maintain consistency.\n\n### One CSS class to rule them all\n\nHowever, when the variety of components grows, the 'linking' solution should be\neven more declarative. If there is JavaScript to run for a component, it will be\nvisible from the block HTML structure. You can mark all the 'alive' parts of\nyour page with a special CSS class; for now let’s stick with `js` class.\n\n```html\n<input class=\"inpt js\" data-component=\"myPlugin\" name=\"login\" value=\"\" />\n```\n\nThe step up of this method is the need of information which plugin is to apply\nto a particular control and a little more code to initialize. This leads onto a\nquestion about how to parametrize the component. This example suggests data\nattributes although there is another idea (spoiler!).\n\nWith minor change there is the code initializing a proper JavaScript component\nfor all the blocks on a page:\n\n```js\n$(\".js\").each(function () {\n  var $this = $(this);\n  $this[$this.data(\"component\")]();\n});\n```\n\n## Parametrizing\n\nNot only a component name has to be provided when initializing with `js` CSS\nclass. Different instances of the same component also may need to pass some\ninformation. For example, an input plugin can validate the field value. But\ndepending on the input different kinds of data can be expected.\n\n```js\n$.fn.myInput = function () {\n  // ...\n};\n```\n\n```html\n<input name=\"login\" value=\"\" /> <input name=\"zipcode\" value=\"\" />\n```\n\nIt is easy to provide per-instance parameters when initializing every instance\nseparately.\n\n```js\n$('input[name=\"login\"]').myInput({\n  validator: \"login\",\n});\n$('input[name=\"zipcode\"]').myInput({\n  validator: \"zipcode\",\n});\n```\n\n### data attributes\n\nWith more declarative manner you need to include such information into a\ncomponent HTML structure. Already mentioned data attributes can help with that.\n\n```html\n<input\n  class=\"inpt js\"\n  data-component=\"myInput\"\n  data-validator=\"login\"\n  name=\"login\"\n  value=\"\"\n/>\n\n<input\n  class=\"inpt js\"\n  data-component=\"myInput\"\n  data-validator=\"zipcode\"\n  name=\"login\"\n  value=\"\"\n/>\n```\n\n```js\n$.fn.myInput = function() {\n    if (this.data('validator') === 'login') // Supported by many frameworks\n}\n```\n\nData attributes is a brainchild of HTML5, so carry a doctype when using them.\n\nAs a widespread solution with many libraries providing helpers for them, data\nattributes make parametrizing not difficult. Although the limitation of being\nable to use key-value pairs only can affect the plugin architecture.\n\n### onclick\n\nAn elegant way is to provide data for a JavaScript component using natural\nJavaScript format, such as hashes. Here the event attributes can serve us again.\n\n```html\n<input\n  class=\"myInput\"\n  onclick=\"return {\n        validator: 'login'\n    }\"\n  name=\"login\"\n  value=\"\"\n/>\n```\n\nWhen a user normally clicks, the hash is booleanized into `true`, so the default\nbrowser click reaction is exactly as expected. From your plugin you can call the\nevent-named method and get the data in its native JavaScript format without any\nneed to parse and convert.\n\n```js\n$.fn.myInput = function () {\n  this[0].onclick().validator === \"login\";\n};\n```\n\nAs JavaScript, this data can be of any type. Not only strings and numbers, but\nlarge treeish hashes, arrays and even functions are possible. Such flexibility\nis extra salutary for organizing data when writing complex components and for\ncustomization.\n\n```html\n<input\n  class=\"inpt js\"\n  onclick=\"return {\n        component: 'myInput',\n        validator: function() { ... }\n    }\"\n  name=\"login\"\n  value=\"\"\n/>\n```\n\nWith nested hashes an HTML block can be operated by 2 or more different\nJavaScript components, each with its own set of parameters.\n\n```html\n<input\n  class=\"inpt js\"\n  onclick=\"return {\n        'myInput' : {\n            validator: function() { ... }\n        },\n        'anotherPlugin' : {}\n    }\"\n  name=\"login\"\n  value=\"\"\n/>\n```\n\n## Start fast\n\n### Initializing components\n\nApplying plugins to elements is only possible when the page is loaded and your\nlibrary can look for these elements in the document.\n\nFirst, you can link the script file after its related piece of HTML code.\n\n```html\n<input\n  class=\"myInput\"\n  onclick=\"return {\n        validator: 'login'\n    }\"\n  name=\"login\"\n  value=\"\"\n/>\n<script src=\"js/plugins/myInput.js\"></script>\n```\n\nWhilst it can work sometimes, the method is just unreliable. It's not certain\nthat the DOM will be ready by the time of the script loaded. Loading every\nplugin as a separate file definitely slows down the page. In addition, this is\njust ugly.\n\nThe page needs to be loaded when running scripts. So, logically an `onload` event\non the `window` object can help.\n\n```js\n$(window).load(function () {\n  $(\".js\").each(function () {\n    var $this = $(this);\n    $this[$this.data(\"component\")]();\n  });\n});\n```\n\nThe drawback is that `window.onload` occurs when all the content is loaded.\nIncluding images, which mostly are not necessary to run scripts.\n\nThe time to safely initialize your components is right after the document has\nbeen loaded and parsed into DOM, which is accompanied by a `document.ready` event.\n\n```js\n$(function () {\n  $(\".js\").each(function () {\n    var $this = $(this);\n    $this[$this.data(\"component\")]();\n  });\n});\n```\n\nWith that all the plugins used can be bundled into one JavaScript file and\nlinked to a page within the `<head>` element as usual. Purposely loaded in\nadvance, the script will be run when the page is ready.\n\n### Loading scripts\n\nAlthough, putting `<script>` tag into `<head>` also delays page loading. A better\nstrategy is to draw a page as fast as possible and then introduce JavaScript\nmagic. Reach that by placing `<script>` before the closing `</body>` tag.\n\nOn the other hand, when a user sees a page, it is expected to work. By now, it's\nhardly possible to respond user actions with plain HTML; people are used to rich\ninterfaces. If that's crucial for your page functioning, divide the script file\ninto 2. The first one linked in `<head>` provides major functionality. And the\nsecond, placed before `</body>` contains all the magic tricks.\n\n## Common best practises\n\n### Cover up\n\nIn this article, I switched from calling `showLogin` function to jQuery plugins\nand some improvements were made in linking components to HTML code. But more\nthan this, giving JavaScript responsibility for the page behavior also enables\nto step forward with avoiding global variables in the code.\n\nThis is true not only for JavaScript. The ids, form names and input names (all\nthe things that can be named in HTML) are also a kind of global object.\n\nCommon advice is to avoid their use.\n\n> By reducing your global footprint to a single name, you significantly reduce\n> the chance of bad interactions with other applications, widgets, or libraries.\n> Douglas Crockford\n\nWith the [module\npattern](http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html)\nwrapping your component into self-invoking anonymous function all the global\nvariables turn into local ones.\n\nUse CSS classes instead of `id` and `name` attributes to identify elements and\naccess them from JavaScript. This makes code more declarative, introduces\nflexibility and is easier to maintain in the long run.\n\n### Doublecheck you don't double-do\n\nInitializing components can take time and resources. So, when first initialized,\nthe result can be saved and reused later. jQuery provides a nice `data` method\nsuitable for that.\n\n```js\n$.fn.myPlugin = function() { return this.each(function() {\n  var $this = $(this),\n      data = $this.data('myPlugin');\n  if (!data) {\n    // init...\n    $this.data('myPlugin', { /* ... */ });\n  }\n}};\n```\n\n### Life beyond the element\n\nIf the corresponding block has been removed from a page, it's the component's\nresponsibility to clean up. Event listeners, constant background calculations\nand even layout changes, that could have happend before. When being deactivated,\na component has to place things back with a `destroy` method.\n\n```js\n$.fn.myPlugin = function() { return this.each(function() {\n  var $this = $(this),\n      data = $this.data('myPlugin');\n  if (!data) {\n    // init...\n    $this.data('myPlugin', {\n      destroy: function() { /* ... */ }\n    });\n  }\n}};\n```\n\n### Initializing by request\n\nWith dynamically changed pages it's not enough to initialize components just the\nones after `domReady`. There has to be some code to run every time you append\nnew block onto a page, which turns HTML fragment into a functioning component.\n\n```\n$.fn.myInit = function() {\n    this.find('.js').each(function() {\n        var $this = $(this);\n        $this[$this.data('component')]();\n    });\n    return this;\n})\n```\n\nA special method to destroy the components being removed has similar sense.\n\n```js\n$.fn.myDestroy = function() {\n    this.find('.js').each(function() {\n        var $this = $(this),\n            name = $this.data('component');\n        $this.data(name).destroy();\n    });\n    return this.remove();\n})\n```\n\n### Lazy initialization\n\nOne more trick is a [lazy\ninitialization](http://en.wikipedia.org/wiki/Lazy_initialization) of components.\nThe idea is similar to [lazy\nloading](https://github.com/stevekwan/best-practices/blob/master/javascript/best-practices.md#lazy-load-assets-that-arent-immediately-required)\nand merely means do as less as possible beforehand.\n\nInstead of initializing all the components when `domReady` fires, you can do\nthis separately for every component at the time the particular component needs\nthat. Usually that's after a user started to interact with\nit and the respective events triggered. So, all the necessary predefined actions\nwon't be run in advance and won't\nslow down page rendering and the work of other components. Objects corresponding\nto never-used components won't be created, which saves memory.\n\n## Component core\n\nMany code practises above would be repeated again and again when implementing\na lot of components. As you can guess, all the common things can be wrapped with\na framework representing the core code for the components.\n\nOne of the examples of this is jQuery UI. As many other frameworks it provides\nAPI to create your own JavaScript components.\n\n### Predefined component structure\n\nWith a component framework a developer uses API and describes a predefined\ncomponent structure. All the common things are in the core.\n\n```js\n$.widget('my.component', {\n    _create: function() { /* ... */ },\n    destroy: function() { /* ... */ }\n    myMethod: function() { /* ... */ },\n});\n```\n\n### High-level patterns\n\nBesides predefined structure, frameworks also provide architectural solutions to\ndifferent problems.<br/>\nFor example, with the releaving modules a core can provide an API to extend the\nmain component functionality.\n\n```js\n$.widget(\"ui.dialog\", $.ui.dialog, {\n  close: function () {\n    if (confirm(\"Close???\")) {\n      this._super(\"close\");\n    }\n  },\n});\n```\n\nComponent frameworks define basics for reusing code and implementing reusable\nJavaScript modules.\n\nAnother example of such a high-level component framework is JavaScript part of\n[BEM](http://bem.info/). A developer can operate components with OOP common\npatterns; create classes, their dynamic and static methods, as well as inherit\ncomponent and extend their functionality and reuse basics with super calls.\n\n```js\nBEM.DOM.decl(\n  { block: \"my-dialog\", baseBlock: \"dialog\" },\n  {\n    myMethod: function () {\n      this.__base();\n      this.__self.myStaticMethod();\n    },\n  },\n  {\n    myStaticMethod: function () {\n      /*...*/\n    },\n  }\n);\n```\n\n## From now on\n\nA number of JavaScript frameworks and libraries were created last years.\nGenerally they contain the solutions to the problems listed and also cover\nothers, like:\n\n- loading by request\n- building page `.js` files\n- dependency system\n- complex component relations and data sharing\n- data binding\n\nWith comparing articles like [Rich JavaScript Applications – the Seven\nFrameworks](http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/)\nby Steven Sanderson you can choose the one you like and have a quick look under\nthe hood.\n\n## Credits\n\nBefore I wrap up, let me\nthank [Sergey Berezhnoy](https://github.com/veged) also known as\n[@veged](https://twitter.com/veged) for his presentation about creating\nJavaScript components. Russian speaking readers can also enjoy the video! [\nСергей Бережной, Яндекс\nРазные способы создания клиентских\njs-компонентов](http://events.yandex.ru/events/yasubbotnik/msk-jul-2012/talks/302/)\n","excerpt":"This article features common problems that developers often face, or maybe used to face before the current open source era, when writing JavaScript for the client side; showcase of possible solutions to these problems and explanations of my choices. Client-side magic\n\nI am going to write about client-side JavaScript code only which runs under a browser and empowers an interface with interactivity.\n\nA piece of interface is represented with some HTML (and obviously styled with CSS). Also it can be equiped with JavaScript usually describing how to react to user's actions.\n\nSo, when developing a…","fields":{"slug":"en/posts/javascript-component-solutions/","readingTime":{"minutes":11.505}},"frontmatter":{"title":"JavaScript components low basics","link":null,"date":"28 June 2013","cover":null}}},{"node":{"body":"\nAs you might know, I recently run the [BEM\nLOVE](https://github.com/toivonen/bem-love) project to demonstrate how blocks\ncan communicate with JavaScript.<excerpt/>\n\nThe first example is dull enough; [a boy, a girl and the heartless\nworld](http://toivonen.github.com/bem-love/desktop.bundles/ask-her-what-music-she-likes/ask-her-what-music-she-likes.html).\n\nToday, I was going to start with another one with a boy plunging into\ndifficulties of choice. He has [two girls to\nask](http://toivonen.github.com/bem-love/desktop.bundles/choose-the-one/choose-the-one.html).\nSuddenly there is a **challenge for you**.\n\nLet's think if it's possible to attract a boy with a booooooring one-colour\ndress? Seems like no.<br/>\nSo, the girls in the page are in need of nice patterned dresses. Any ideas on\nhow to code a patterned triangle in CSS?\n\n### Where to code?\n\nTo dress the girls excellenty and toppingly you need just three steps:\n\n- Fork the project and [run the\n  server](https://github.com/toivonen/bem-love#how-to-contribute).\n- [Contribute to modifiers](https://github.com/toivonen/bem-love/tree/master/desktop.bundles/choose-the-one/blocks/girl/_dressed)\n- Make your pull request\n","excerpt":"As you might know, I recently run the BEM LOVE project to demonstrate how blocks can communicate with JavaScript. The first example is dull enough; a boy, a girl and the heartless world.\n\nToday, I was going to start with another one with a boy plunging into difficulties of choice. He has two girls to ask. Suddenly there is a challenge for you.\n\nLet's think if it's possible to attract a boy with a booooooring one-colour dress? Seems like no. So, the girls in the page are in need of nice patterned dresses. Any ideas on how to code a patterned triangle in CSS?\n\nWhere to code?\n\nTo dress the girls…","fields":{"slug":"en/posts/patterned-triangle/","readingTime":{"minutes":0.685}},"frontmatter":{"title":"Patterned triangles with  CSS","link":null,"date":"19 March 2013","cover":null}}},{"node":{"body":"\n<div data-excerpt>\n\nThe first article about BEM in English.\n\n</div>\n\n<Text size=\"large\" margin={{vertical: \"medium\"}}>\nRead at <Link to=\"http://coding.smashingmagazine.com/2012/04/16/a-new-front-end-methodology-bem/\">Smashing Magazine</Link>\n</Text>\n","excerpt":"","fields":{"slug":"blog/new-frontend-methodology-bem/","readingTime":{"minutes":0.1}},"frontmatter":{"title":"BEM - a new front-end methodology","link":null,"date":"16 April 2012","cover":null}}},{"node":{"body":"\n<div data-excerpt>\n\nA list of frequently asked questions about BEM and detailed answers to them.\n\n</div>\n\n<Text size=\"large\" margin={{vertical: \"medium\"}}>\nRead at <Link to=\"http://getbem.com/faq/\">Bem documentation site</Link>\n</Text>\n","excerpt":"","fields":{"slug":"blog/automating-style-guide-driven-development/","readingTime":{"minutes":0.135}},"frontmatter":{"title":"BEM FAQ","link":null,"date":"01 January 2012","cover":null}}},{"node":{"body":"\n<div data-excerpt>\n\nThis tutorial shows how to run a BEM-project and enjoy helpful bem tools,\nefficient BEMHTML templates and declarative JavaScript i-bem.js.\n\n</div>\n\n<Text size=\"large\" margin={{vertical: \"medium\"}}>\nRead at <Link to=\"http://bem.info/articles/start-with-project-stub/\">Bem.info</Link>\n</Text>\n","excerpt":"","fields":{"slug":"blog/quick-start-bem-stack/","readingTime":{"minutes":0.16}},"frontmatter":{"title":"Quick start with full BEM stack","link":null,"date":"01 January 2012","cover":null}}},{"node":{"body":"\n<div data-excerpt>\n\nThis set of well-explained examples demonstrates how to create JavaScript components using the basic features of i-bem.js.\n\n</div>\n\n<Text size=\"large\" margin={{vertical: \"medium\"}}>\nRead at <Link to=\"http://bem.info/tutorials/bem-js-tutorial/\">Bem.info</Link>\n</Text>\n","excerpt":"","fields":{"slug":"blog/tutorial-javascript-components/","readingTime":{"minutes":0.145}},"frontmatter":{"title":"Tutorial on JavaScript components with i-bem.js","link":null,"date":"01 January 2012","cover":null}}}]}},"pageContext":{"limit":6,"skip":48,"pageCount":9,"currentPage":9}},"staticQueryHashes":[],"slicesMap":{}}