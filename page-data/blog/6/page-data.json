{"componentChunkName":"component---src-templates-blog-index-js","path":"/blog/6/","result":{"data":{"posts":{"edges":[{"node":{"body":"\nimport PureHtml from '@components/PureHtml'\n\n<div data-excerpt>\n\nLast week I faced a need to make a fake tag cloud, where the words need to be of different size. This was needed for\na presentation slide, and as my slides are always in HTML/CSS, must be implemented with these technologies. It is always\npossible to inject some JavaScript and code anything. But what about pure CSS, do we get random sizes there?\n\n</div>\n\n<div class=\"testings\" markdown=\"1\">\n\n<ul class=\"cloud\">\n<li>performance testing</li>\n<li>stress testing</li>\n<li>conformance testing</li>\n<li>acceptane testing</li>\n<li>smoke testing</li>\n<li>regression testing</li>\n<li>white box testing</li>\n<li>functional testing</li>\n<li>system testing</li>\n<li>black box testing</li>\n<li>load testing</li>\n<li>compatibility testing</li>\n<li>unit testing</li>\n</ul>\n\n</div>\n\n<PureHtml html={`<style> .testings { text-align: center; width: 400px; } .testings .cloud { display: inline; list-style-type: none; width: 400px; } .testings .cloud li { list-style: none; display: inline; } .testings .cloud li:nth-of-type(3n + 1) { font-size: 1.25em; } .testings .cloud li:nth-of-type(4n+3) { font-size: 1.5em; } .testings .cloud li:nth-of-type(5n - 3) { font-size: 1em; } </style>`}/>\n\nThe tag cloud you see above is what I get. You may notice it's not real random; after refreshing you will always get the\nsame result. But still looks like a tag cloud of different sizes and works perfectly as an example.\n\nThis is a list, it's easy to generate from markdown:\n\n```html\n<ul class=\"cloud\">\n  <li>performance testing</li>\n  <li>stress testing</li>\n  <li>conformance testing</li>\n  <li>acceptane testing</li>\n  <li>smoke testing</li>\n  ...\n</ul>\n```\n\nThen, flattened as usual:\n\n```css\n.cloud {\n  display: inline;\n  list-style-type: none;\n  width: 400px;\n}\n.cloud li {\n  list-style: none;\n  display: inline;\n}\n```\n\nAnd then different sizes are made with a few `nth-of-type` combined in different variants:\n\n```css\n.cloud li:nth-of-type(3n + 1) {\n  font-size: 1.25em;\n}\n.cloud li:nth-of-type(4n + 3) {\n  font-size: 1.5em;\n}\n.cloud li:nth-of-type(5n - 3) {\n  font-size: 1em;\n}\n```\n\nI tuned the `nth-of-type` values so that it would look nicely. Depending on the length of the words used, you may need\nto play arownd with the values and maybe use more than 3 sizes.\n","excerpt":"The tag cloud you see above is what I…","fields":{"slug":"en/posts/pseudo-tag-cloud-css/","readingTime":{"minutes":1.63}},"frontmatter":{"title":"Tag cloud of random sizes in pure CSS","link":null,"date":"02 November 2015","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/56dd12d33db3da0cf256e530f31c2600/36f12/thumb.png","srcSet":"/static/56dd12d33db3da0cf256e530f31c2600/36f12/thumb.png 856w","sizes":"856px"},"sources":[{"srcSet":"/static/56dd12d33db3da0cf256e530f31c2600/558ab/thumb.webp 856w","type":"image/webp","sizes":"856px"}]},"width":856,"height":440}}}}}},{"node":{"body":"\n<div data-excerpt>\n\nI never thought that I would write a post about diversity. But as the **unicorn law** says that being a woman in tech you\nwill be eventually speaking about women in tech, I do so now. However I'm doing this not because it is a strong will of\nmine. Something happened which makes me to respond.\n\n</div>\n\nI was recently speaking at a conference (a very good conference, I must say this) and during the asking session after\nthe talk I got this question:\n\n**— How to solve the diversity problem and get more women in our industry?**\n\nI was absolutely not ready to this question. No wonder, being at stage and giving a presentation already brings a lot of\nstress. When it comes to a question session, it is even harder. And the last thing a speaker wants is to get such question.\n\nThis happened to me at the first time, so my response was not correct. In this post I will describe why conference\nattendants should not ask this question to female speakers. If you were willing to do so, please read. Maybe you will\nchange your mind. I will also try to propose a proper respond to future speakers and conference hosts. However, this is\nan open question, I believe many can propose much better options. Go ahead in comments :-)\n\n## Do not ask women in tech about women in tech\n\nAlthough I felt very uncomfortable when getting this question, it was hard to describe in words what exactly was wrong.\nSo, I made some research across the Internet articles and speaking with friends. This is how I learnt about the unicorn\nlaw formulated by [Emma Jane Westby](http://emmajane.net/):\n\n> If you are a woman in Open Source, you will eventually give a talk about being a woman in Open Source.\n\nI was surprised that the problem had been already formulated and number of people had faced it.\n\nThe presentation I gave was not related to gender problems, it was completely technical CSS/JavaScript speech. I am not\na social scientist but a programmer. Moreover, I am not a gender equality activist. I even had never written in my blog\nanything related to diversity. So, there is completely no objective reason to ask me questions like that. I was asked\nthis only because I am a woman.\n\nThis is the first answer on \"What is wrong?\". Asking a woman gender related questions because she is a woman is pushing\nher to represent her gender. However it was clear that my intention of speaking at the conference was to share my findings\nin programming and learn from another programmers. It had nothing to do with my gender.\n\nThen, this question could be to the point, if I were responsible for bad diversity situation in the industry. And I am\nobviously not. I did my part staying on stage and presenting the result of my work when being asked about the solutions\nto the problem which I did not cause.\n\nAnother thing, that not being a social scientist I don't have proper information to develop a good answer. So, the\nsituation may be described like \"a speaker stays on stage in front of hundreds of people looking at her and gets a\nquestion which she clearly is not able to answer\". It is known in advance that I cannot provide any valuable respond to\nthis question. There would not be any useful information coming from me. The only result was that I was put into an\nawkward situation.\n\nThe more relevant thing would be to ask a random female about what they know. For example, something about their\npersonal experience. However, I still do not suggest this, because questions like \"What are the difficulties you faced\nas a female developer\" are very often too personal to be answered on stage. I think that if not on stage but in a\nprivate conversation, I would not mind a question regarding my gender-in-tech experience.\n\nIf for some reason you would like a random female speaker to answer a gender-equality question publically, it might be a\ngood idea to formulate it as much related to their work as you could. Something like \"How do you solve diversity problem\n**in your company**?\" would work better.\n\nSo, the conclusion here is that the best way is not to have sexpectations (thanks my colleague Toni for the word) that\nfemale developers have knowledge in the diversity thing and even are interested in gender equality stuff. Ask them what\nyou would ask male programmers.\n\n## For women in tech: how to answer about women in tech\n\nAs I said, I was not ready for the question. However I felt uncomfortable, I tried to make laugh as I believe that most\nconflict situations may be avoided if turned out into a joke. So, I responded:\n\n— Would you ask me such a question if I were a man? So, my answer is: don't treat us differently.\n\nI do not suggest other ladies to reply like that as now I think that it might have sounded too aggressive. Also, if the\nperson who asked me the question is reading this post, I apologise for such a response.\n\nThe conference host could have help me. But he started to explain why it is a right thing to ask me this question being\nbased on my gender. I guess this is because the situation was unusual and unexpected for him as well. No one has yet\nenough experience in dealing with the stuff. However I believe that killing the discussion is the right thing.\nUnfortunately I cannot propose any solution on how exactly to wrap up a case and come to another question. But if you\nare going to be a conference host, please, think up.\n\nAnyway, in a few days already not being under stress and having a chance to deeply think about it, I still did not come\nup with an answer. Seriously, it is not that easy.\n\nI could say \"I don't know\". But these are not the words to pronounce when being on stage. I hope everyone agrees.\n\nAlso I could respond \"Sorry, I am not a social scientist\". But I don't want to make a fool of the person\nasking.\n\nThe honest version on the question about how to get more women in tech is \"If there are already some ladies who have\nchosen to be programmers and came into the industry, just leave them in peace. Maybe they will stay\".\n\nAny other ideas?\n\nBTW, this is a good article which helped me a lot to understand my feelings about the situation:\n[Breaking the Unicorn Law: Stop asking women in open tech/culture about women in open\ntech/culture](https://adainitiative.org/2014/03/breaking-the-unicorn-law-stop-asking-women-in-open-techculture-about-women-in-open-techculture/).\n","excerpt":"I was recently speaking at a conference (a very good conference, I must say this) and during the asking session after the talk I got this question: — How to solve the diversity problem and get more women in our industry?\n\nI was absolutely not ready to this question. No wonder, being at stage and giving a…","fields":{"slug":"en/posts/on-the-unicorn-law/","readingTime":{"minutes":5.615}},"frontmatter":{"title":"An answer to the question which should not have been asked","link":null,"date":"07 September 2015","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#f8e8b8","images":{"fallback":{"src":"/static/b1e195edf6d4db3d5b683b7be8c9cfb8/85cef/thumb.jpg","srcSet":"/static/b1e195edf6d4db3d5b683b7be8c9cfb8/85cef/thumb.jpg 618w","sizes":"618px"},"sources":[{"srcSet":"/static/b1e195edf6d4db3d5b683b7be8c9cfb8/30ff3/thumb.webp 618w","type":"image/webp","sizes":"618px"}]},"width":618,"height":915}}}}}},{"node":{"body":"\n<div data-excerpt>\n\nI've been presenting [SC5 Style Guide](http://styleguide.sc5.io/) several times during this year sharing my experience of using it for one\nof the SC5's clients, Elisa. Assuming that Elisa is a huge mobile operator with a lot of websites and a need\nto keep those websites visually consistent, there is no wonder that the SC5 Style Guide as a tool provides benefits\nthere. But what about smaller websites? Would it be useful there? I did not know the answer to this question\nand wanted to experiment. The experiment was conducted on my blog codebase.\n\n</div>\n\nThis is how the Living Style Guide looks like: [varya.me/styleguide](http://varya.me/styleguide). You can see the interface\ndecomposed into block pieces, each of those representing a meaningful interface unit. I haven't seen the interface of my blog\nfrom this perspective before. It gave me a lot of insight into the ways the CSS architecture of my blog should be designed.\nBut, let's consider things one by one.\n\n## Fine-tuning the SC5 Style Guide tool\n\nEverything starts with\n\n```\nnpm install --save-dev sc5-styleguide\n```\n\nThen, I was able to use the tool to build the interface representation. It required\n[a couple of Gulp tasks](https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/Gulpfile.js).\n\nI had to deviate from the example configuration in a couple of places to make my Style Guide work as it does now. Let me\nname and explain these things.\n\n### Providing the `appRoot` parameter.\n\nAs I am hosting the Style Guide website not it the root folder but in a subfolder named `styleguide`, I inform the\ngenerator about that, so it can build the properly working app:\n\n```js\ngulp.task(\"styleguide:generate\", function() {\n\n  return gulp.src([\"desktop.blocks/**/*.css\"])\n    .pipe(styleguide.generate({\n      title: \"Varya.me Styleguide\",\n      appRoot: '/styleguide',\n      ...\n```\n\n### Providing scripts\n\nUnder the `extraHead` parameter I list all the additions needed. Some of my components\nneed JavaScript to function. It is indeed possible to ignore that and present\ntheir views only, but I wanted them to be exactly as they were used in the blog.\nThanks to `extraHead` I could supply any code needed. I used it to\nlink the same scripts that I have on my blog pages:\n\n```js\ngulp.task(\"styleguide:generate\", function() {\n\n  return gulp.src([\"desktop.blocks/**/*.css\"])\n    .pipe(styleguide.generate({\n      title: \"Varya.me Styleguide\",\n      ...\n      extraHead: [\n        '<script src=\"http://yandex.st/jquery/1.7.2/jquery.min.js\"></script>',\n        '<script src=\"/desktop.bundles/index/index.min.js\"></script>',\n        ...\n      ]\n    ...\n```\n\nHowever, I needed yet another trick to make the scripts work properly. My components are written with `i-bem.js`\nframework which automatically initialises them on the `domReady` event. This is what I wanted for the static pages because the\ncomponents markup is in HTML document. But for the Style Guide, which is architecturally a SPA, this did not work. The components\nare rendered on the fly, and this obviously happens after `domReady`; that is why by default they stay\nuninitialized. So they should be initialized after they had been rendered. Luckily, the Style Guide\ntriggers an event on the `window` object named `styleguide:onRendered` every time a new component is re-rendered.\nBy handling this event, I managed to get the components initialized right after they appear on the page. This code is needed\nfor the Style Guide only, so I do not include it into the project bundle but provide as an additional script in the\nStyle Guide configuration:\n\n```\ngulp.task(\"styleguide:generate\", function() {\n\n  return gulp.src([\"desktop.blocks/**/*.css\"])\n    .pipe(styleguide.generate({\n      title: \"Varya.me Styleguide\",\n      ...\n      extraHead: [\n        ...\n        '<script src=\"/styleguide/i-bem__init_styleguide.js\"></script>'\n      ]\n    ...\n```\n\nYou can check how the JavaScript components are working with the block which is initially empty and renders the list\nof repositories after querying the GitHub API: [varya.me/styleguide/#/section/4.3](http://varya.me/styleguide/#/section/4.3).\nOr try out the Candies randomly built with JavaScript [varya.me/styleguide/#/section/5.1](http://varya.me/styleguide/#/section/5.1).\n\nThe last important thing to make JavaScript work is to use `disableEncapsulation: true` parameter. Normally the\nStyle Guide wraps each component in the ShadowDOM because it lets us developers write component CSS without\nworrying about affecting the Style Guide interface. But it also makes the components scoped from the JavaScript linked\nto the Style Guide website — including that additional JavaScript I showed above. By disabling the encapsulation, I made\nthe components to be inserted into the HTML page as they are, without any scoping. As for affecting the Style Guide\ninterface, in my case it will never happen as I use BEM and all my components are already \"encapsulated\" thanks to that methodology.\n\n### Hosting a static page\n\nThe SC5 Style Guide provides a development server which routes all the paths to its root. When hosting it outside, you\nshould care about the routing yourself as you would do for any other SPA. But my blog is hosted on GitHub Pages\nwhich is a simple static hosting and does not provide any routing capabilities. For managing this case, I use the\n`disableHtml5Mode: true` option. It makes the Style Guide application generate the old-school links with `#`. And so it\nworks.\n\n## Documenting the components\n\nAs I used BEM for my website frontend from very beginning, the CSS was already written the component-way. I only\nneeded to create a descriptive structure and document the blocks with KSS.\n\n### Structuring the code\n\nUnfortunately the BEM way of storing components in folders turned out to be not good enough to see\nthe code from the living-style-guide perspective. On a file system, all the components are represented at the same\nlevel which turns them into a long list without much structure:\n\n```\ndesktop.blocks/\n├── article\n├── articles-list\n├── box\n├── ...\n└── text\n```\n\n[github/varya/varya.github.com/desktop-blocks](https://github.com/varya/varya.github.com/tree/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks)\n\nIn this case the atomic components are not distinct from the structural interface pieces (such as Header or Footer),\nfrom the side blocks, or from CSS provided to style third-party things. Flat structure is indeed good for\nbundling tools but we humans need more logical nesting.\n\nFor that I provide the `overview.css` file, which has nothing to do with the final product and only helps me arrange the\nblocks. I have 5 sections, in which I place the blocks depending on what they are:\n\n```\n/*\nAtoms\n\nStyleguide 1\n\nstyleguide:ignore:start\n\n@import url(\"logo/logo.css\"); // 1.1\n@import url(\"text/text.css\"); // 1.2\n...\n\nstyleguide:ignore:end\n*/\n\n/*\nMain blocks\n\nStyleguide 2\n\nstyleguide:ignore:start\n\n@import url(\"header/header.css\"); // 2.1\n...\n\nstyleguide:ignore:end\n*/\n```\n\n[github/varya/varya.github.com/desktop-blocks/overview.css](https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks/overview.css)\n\nThere are only comments in this file in which I provide the documentation of every subset as a Style Guide section.\nListing the paths of the dependant CSS files makes it easier to navigate through the code. The `@import` syntax is used just\nbecause :-)\n\nThe only trick here is the magic `styleguide:ignore:start` and `styleguide:ignore:end` keywords. It is possible to\nplace them inside comments in any piece of your CSS (or SASS or LESS) and make the Style Guide generator ignore\nwhat is in between.\n\nIn my case, I tell it skip my overview lists because they have nothing to do with the codebase. But the names of the\nsections and their possible descriptions (I just haven't provided any) are in work.\n\n### Describing the pieces\n\nEverything else went smoothly. For every component I provided the KSS description. The `logo` block can be the\nsimplest example:\n\n```css\n/*\n\nLogo\n\nmarkup:\n<logo class=\"logo\">···<b class=\"var\">var</b>·<b class=\"ya\">ya</b>;<b class=\"cursor\"></b></logo>\n\nStyleguide 1.1\n\n*/\n.logo\n{\n...\n```\n\n[github/varya/varya.github.com/desktop-blocks/logo/logo.css](https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks/logo/logo.css)\n\nSee it rendered: [varya.me/styleguide/#/section/1.1](http://varya.me/styleguide/#/section/1.1)\n\nIn some other components I used extra features. For example, different social icons are the same `ico` element with different\nmodifiers. In the Style Guide I could documents them all together:\n\n```css\n/*\nSocial icon\n\n.social-ico__ico_type_rss         - RSS\n.social-ico__ico_type_twitter     - Twitter\n.social-ico__ico_type_github      - Github\n.social-ico__ico_type_facebook    - Facebook\n.social-ico__ico_type_linkedin    - LinkedIn\n\nmarkup:\n<a class=\"link social-ico__ico {$modifiers}\" href=\"#\" title=\"Icon title\"></a>\n\nStyleguide 1.5.1\n*/\n\n.social-ico__ico\n{\n...\n```\n\n[github/varya/varya.github.com/desktop-blocks/social-ico/social-ico.css](https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks/social-ico/social-ico.css#L49)\n\nIn the website the component is rendered separately with every modifier possible:\n[varya.me/styleguide/#/section/1.5.1](http://varya.me/styleguide/#/section/1.5.1)\n\nFor the complex components which contain other ones I used `<sg-insert>` keyword. It takes another component's markup\nby its reference number.\n\n```css\n/*\nSidebar\nmarkup:\n<nav class=\"sidebar\">\n  <sg-insert>4.2</sg-insert>\n  <sg-insert>4.3</sg-insert>\n</nav>\nStyleguide 4.1\n*/\n\n.sidebar\n{\n...\n```\n\n[github/varya/varya.github.com/desktop-blocks/sidebar/sidebar.css](https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks/sidebar/sidebar.css)\n\nThis makes the markup examples pretty short, however it expands for rendering the component and showing the\nmarkup on the website: [varya.me/styleguide/#/section/4.1](http://varya.me/styleguide/#/section/4.1)\n\n## Style-Guide-Driven Development\n\nIf you type \"logo\" in the Style Guide search field, it will find and render all the components where `logo` is found!\nThe search goes through all the CSS codebase. Similarly you can search for the components using `<em>` in their markup.\nOr `font:` in their CSS.\n\nI personally like that the search source is not only the CSS of components but also their markup examples. During the\nrefactorings this, for example, makes possible to select all the components containing inputs and look how the changes affect them.\n\nHowever this is just a small addition to one major benefit I see in using the Style Guide. I find it far more important\nthat **it reveals my mistakes**.\n\nI already used the component way when building my blog. And I was pretty sure that my BEM experience is a 100%\nguarantee that I get this right. But even developing with a highly modular approach in mind, I did this from the page perspective.\nBefore the components were integrated into the blog engine, I had developed a static page and this was where the\ncomponents fitted first.\n\nI considered them independent and so tried to write my code. But **sitting at the same page they never actually were\nindependent**.\n\nAfter the SC5 Style Guide magically represented each of them separately, I can see that the\n[logo](http://varya.me/styleguide/#/section/1.1) is aligned to the right.\nAnd why should it be? Obviously, my mistake when I tried to made it fit into the Header.\n\nThe same goes for the [language switcher](http://varya.me/styleguide/#/section/1.4) positioned on the right.\n\nIn the [set of social icons](http://varya.me/styleguide/#/section/1.5), the language switcher provided with the RSS\nicon was considered to stay with it. But this only happens because at the blog pages\nit is placed into a narrow container. The Style Guide represents it on its own and I can see that it is not that\nflawless as I thought.\n\nSuch discoveries obviously lead to the refactoring :-)\n\nTo top it off, I must say that the experiment does not end and there are already findings for further\nposts. Stay tuned!\n","excerpt":"This is how the Living Style Guide looks like: varya.me/styleguide. You can see…","fields":{"slug":"en/posts/sc5-styleguide-for-smallers/","readingTime":{"minutes":8.285}},"frontmatter":{"title":"Style-guide the smaller things","link":null,"date":"30 July 2015","cover":null}}},{"node":{"body":"\n<div data-excerpt>\n\nThis article at SmashingMagazine was published on 5th March 2015. It explained the motivation and benefits\nof style-guide-driven development and component-based approach in frontend.\n\n</div>\n\n<Text size=\"large\" margin={{vertical: \"medium\"}}>\nRead at <Link to=\"http://www.smashingmagazine.com/2015/03/05/automating-style-guide-driven-development/\">Smashing Magazine</Link>\n</Text>\n","excerpt":"","fields":{"slug":"blog/bem-faq/","readingTime":{"minutes":0.185}},"frontmatter":{"title":"Automating Style-Guide-Driven Development","link":null,"date":"05 March 2015","cover":null}}},{"node":{"body":"\n<div data-excerpt>\n\nThis time I would like to share my experience of keeping a codestyle in one of my working projects. This is about a new\ntool called **JSCS** which we have recently chosen with the team and now are very pleased with the result.\n\n</div>\n\nOnce I joined [SC5 Styleguide](http://styleguide.sc5.io/) project, I discovered that it was not consistent enough from\nits codestyle perspective. It was not frightening by that time, but it was already clear that the project was going to\ngrow fast and the sooner we start bothering about keeping the codestyle the better. I was already aware about JSCS and\nits features because had published [a translation of author's tool\nintroduction](http://frontendbabel.info/articles/jscs-javascript-code-style/) in one of my side-projects. So the\ndecision which tool to use was made quickly.\n\nThere are indeed many other solutions, such as JSLint and JSHint, the most mentioned once. But let me first tell you a\nstory.\n\nInteresting enough that JSHint authors liked JSCS so much that they prefered to contribute into it rather than develop\nstyle checkings in their tool. So they removed all the style enforcement rules out of JSHint and keep it now for\nmore complex things not about coding style but about programming patterns.\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>And with that, JSCS now has all the style enforcement rules that are\nbeing dropped in <a href=\"https://twitter.com/JSHint\">@JSHint</a> 3.0: <a\nhref=\"https://t.co/W98EMSiTN5\">https://t.co/W98EMSiTN5</a> cc <a\nhref=\"https://twitter.com/valueof\">@valueof</a></p>&mdash; Mike Sherov (@mikesherov) <a\nhref=\"https://twitter.com/mikesherov/status/419596672520318976\">4 Jan 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nThis means that there is no question if you choose JSLint, JSHint **or** JSCS. Currently you can choose between\nJSLint and JSHint + JSCS working together.\n\n```js\ngulp.task(\"jslint\", [\"jshint\", \"jscs\"]);\n```\n\nAssuming that JSCS is a new tool with not yet spoiled structure, I suppose that it would be a pleasure to contribute\ninto it. Also, the tool's youth promises that future possible bugs would be fixed soon as there is no legacy.\n\nMoreover, I personally find encouraging that JSCS has been already chosen by such respectable teams as jQuery, Bootsrap\nand AngularJS.\n\nLong story short, JSCS is an npm package. You can install it either globally or locally for a particular project:\n\n```\nnpm install jscs\n```\n\nBesides, you will need a configuration file `.jscsrc` and define what kind of JavaScript style you prefer for the\nproject. This file should be put into the root of your project.\n\nJSCS support tonns of rules. Nethertheless, your config file would not be too heavy thanks to presets. In most cases we\nchoose from popular JavaScript styles and so there is no need to define the rules over and over again. You only need to\nwrite who you prefer to look like:\n\n- airbnb\n- crockford\n- google\n- jquery\n- mdcs\n- wikimedia\n- yandex\n\nEven if you want to be special, you still can choose the most similar preset and redefine some of its rules below.\n\nImportant thing is that JSCS is already quite a mature thing, which means that you can easily find acompanying packages\nand needed plug-ins for editors.\n\n## The Success Story\n\nAssuming these facts, we decided to give JSCS a try. We started with defining a lovely configuration but excluded all\nthe files from the checking process yet. Our project already had modular structure, so this was easy.\n\n```\n{\n    ...\n\n    \"excludeFiles\": [\n      \"node_modules/**\",\n      \"src/modules/a/**\",\n      \"src/modules/b/**\",\n      \"src/*.js\n    ]\n}\n```\n\nThen, we agreed that if any of us starts coding or changing a module, he/she will fix the codestyle and swipe out the\nfixed module from the `excludeFiles` list. Following this, we got our files fixed quite fast and even avoid conflicts.\n\nKeeping the codestyle when maintaining these files lately turned out to be more challengeable. Automatic checkings are\nvery helpful here, but we needed to decide how strict we should be. The codestyle should not be our main goal instead of\ndevelopment.\n\nFinally we came up with \"separation of concerns\" model. Thus, for the upstream repository we have strict codestyle\npolicy, and for the forks it is more suggestive. We taught Travis to check codestyle in the pull requests we are\ngetting. If codestyle is broken, the Travis build fails. So, pull requests with wrong codestyle cannot be merged into\nthe upstream. This ensures us that we will never get bad code there. However for the forks it is not that strict. We\nturned down the idea of using pre-push hooks but recommend a developer to install a pre-commit hook in their repository\nclone as well as using JSCS IDE plugins in order to learn about wrong codestyle while developing and not when their pull\nrequest gets broken. These recommendations are described in our documentation for developers and all the team members\nfollow them.\n\nEveryone especially likes that JSCS can work with the code editors. The codestyle configuration is stored in the project\nrepository and so an editor reads on its own. The most wonderful thing is that when switching between the projects with\ndifferent codestyles, it does not require any change of settings.\n\n![](http://varya.me/jscs-talk/pictures/sublime.gif)\n\nAnd of course it is always possible to check the codestyle manually running a gulp task.\n\n![](http://varya.me/jscs-talk/pictures/travis.png)\n\n## Word of caution\n\nWe faced a couple of problems when applying the tool. I believe they are worth to be mentioned, especially as I can\nprovide the solutions.\n\nThe most painful was \"out of memory\" error when running a gulp task with JSCS checking. Turned out, that excluding files\nin the configuration is not enough. Gulp tries to process all the files that match the mask and is soon run out of\nmemory. We fixed this with using `gulp-ingnore` package:\n\n```\ngulp.task('jscs', function() {\n  return gulp.src([\n    '**/*.js'\n  ])\n  .pipe(gulpIgnore.exclude([\n    'node_modules/**',\n    'demo-output/**'\n  ]))\n  .pipe(jscs());\n})\n```\n\nThis is not the best solution because we need to list the excluded files in both `.jscs` configuration and the\n`gulpfile.js`. But there is nothing better yet.\n\nThe second trick is about checking the codestyle while watching the project files with Gulp. You would probably like to\nsee the errors reported in your terminal but still have the `watch` task running. This is possible with the help of\n`gulp-plumber`:\n\n```\ngulp.task('jscs', function() {\n  return gulp.src([\n    '**/*.js'\n  ])\n  ...\n  .pipe(plumber())\n  .pipe(jscs());\n});\n```\n\nThis is all, we did not face any other problem with the tool. It works just fine and has already saved thousands of\nman-hours.\n\n## Besides\n\nIf you are interested in the slides for this talk, here they are\n[http://varya.me/jscs-talk/](http://varya.me/jscs-talk/).\n","excerpt":"Once I joined SC5 Styleguide project, I discovered that it was not consistent enough from its codestyle perspective. It was not frightening by that time, but it was already clear that the project was going to grow fast and the sooner we start bothering about keeping the codestyle the better. I was already aware about JSCS and its features because had published a translation…","fields":{"slug":"en/posts/jscs-in-use/","readingTime":{"minutes":5.325}},"frontmatter":{"title":"JSCS in use","link":null,"date":"11 February 2015","cover":null}}},{"node":{"body":"\n<div data-excerpt>\n\nI use the same laptop for both work and personal needs. This is useful but makes me see to keeping my\nwork-life balance. I do this simply — turn off all the applications running when I finish my working day\nin the evening. The only issue is not to forget to open them again next day. But this process can be automatized. :-)\n\n</div>\n\nThe most important is to run the applications which are in use by the other team members. For example, I a Jabber app\nhas to be running since the workday has started. The same goes for any other messenger.\n\nWe here at AppGyver use [Flowdock](https://www.flowdock.com)\nfor team communication. So I needed to be sure that it is open every morning.\n\nIt turned out that this is doable on Mac with the native Calendar application. Let me show you how exactly.\n\n### Create a new event in the Calendar\n\nI named mine \"Run Flowdock\". Do not bother about the laptop being opened by the event time your are setting up. The\napplication can run in advance. My event has `9:35` time.\n\n### Make your event repeated\n\nThis event should be repeated every week at the workdays.\n\n### Run the application\n\nNow the most interesting thing. You can run any application using custom event alerts.\n\nChoose the last item in the `alert` select, which is `Custom`.\n\n<img\nclass=\"article__image\"\nsrc=\"http://img-fotki.yandex.ru/get/4802/14441195.32/0_88921_7d53950e_L.png\" width=\"300\" height=\"500\" border=\"0\"\ntitle=\"\" alt=\"\"/>\n\nOnce the next dialog is opened, choose `Open file`.\n\n<img\nclass=\"article__image\"\nsrc=\"http://img-fotki.yandex.ru/get/4813/14441195.32/0_88925_47986a79_M.png\" width=\"300\" height=\"167\" border=\"0\"\ntitle=\"\" alt=\"\"/>\n<img\nclass=\"article__image\"\nsrc=\"http://img-fotki.yandex.ru/get/5109/14441195.32/0_88924_ea39983e_M.png\" width=\"300\" height=\"162\" border=\"0\"\ntitle=\"\" alt=\"\"/>\n\nBy `file` they mean an applicaiton to be run. It is defined to be `Calendar` by default but you can\nchoose another one.\n\n<img\nclass=\"article__image\"\nsrc=\"http://img-fotki.yandex.ru/get/4810/14441195.32/0_88922_22d155c7_M.png\" width=\"300\" height=\"193\" border=\"0\"\ntitle=\"\" alt=\"\"/>\n\nThen, select the application needed in the Finder dialog. In my case it is Flowdock.\n\n<img\nclass=\"article__image\"\nsrc=\"http://img-fotki.yandex.ru/get/4809/14441195.32/0_88923_7597bf28_M.png\" width=\"300\" height=\"196\" border=\"0\"\ntitle=\"\" alt=\"\"/>\n\nThen, fix the time. 5 minutes before 9:35 is exactly half past nine. Let me remin you, this does not mean that\nyou need to be at work by this time and have your laptop opened. You can be riding a bus or even sleeping. The\napplication will run later, when you open your computer.\n\n### Drawback\n\nNot ideal, indeed. If your calendar is synchronized with iPhone, it peeps by this time. The phone cannot run the\napplication, so it reminds you about the event with sound. But as [one of my friends\nsuggests](http://varya.me/ru/posts/run-app-in-time-on-mac/#comment-1582219469) the workaround can be to create a\nseparate calendar for such event and not to synchronize it with other devices.\n","excerpt":"The most important is to run the applications which are in use by the other team members. For example, I a Jabber app has to be running since the workday has started. The same goes for any other messenger. We here at AppGyver use Flowdock for team communication. So I needed…","fields":{"slug":"en/posts/run-app-in-time-on-mac/","readingTime":{"minutes":2.155}},"frontmatter":{"title":"Run on time (about Mac applications)","link":null,"date":"12 September 2014","cover":null}}}]}},"pageContext":{"limit":6,"skip":30,"pageCount":9,"currentPage":6}},"staticQueryHashes":[],"slicesMap":{}}