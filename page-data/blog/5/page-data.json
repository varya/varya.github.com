{"componentChunkName":"component---src-templates-blog-index-js","path":"/blog/5/","result":{"data":{"posts":{"edges":[{"node":{"body":"\n<div data-excerpt>\n\nFirst thing first, I'm staring weekly posts about findings that are somehow related to work. This is a mature but not yet\nimplemented idea. Although, a friend of mine [Vladimir Starkov sometimes practises the same](https://iamstarkov.com/).\n\nIn this issue there are tips on organizing Google Calendar, nice project management addition for GitHub, Styleguide\nsolutions for React projects and a couple of good reads.\n\n</div>\n\n## Week numbers in Google calendar\n\nIn Finland, the week numbers are widely used. People easily make agreements on let's say \"the beginning on week 45\". For\nthis purpose and also for the actual weekly reports, I have subscribed for a special Google calendar\nwhich provides a small week number at the top right corner or every monday.\n\n![](./CalendarWeekNumbers3.png)\n\nHere are the instructions:\n[http://www.daimto.com/how-to-add-week-numbers-to-your-google-calendar/](http://www.daimto.com/how-to-add-week-numbers-to-your-google-calendar/).\n\n## ZenHub — a GitHub issue tracker\n\n[ZenHub](https://www.zenhub.com/) is an add-on, which makes different boards with columns on top of GitHub issues.\n\n![](./zenhub-task-board.jpg)\n\nIt looks like a competitor of embedded [GitHub\nProjects](https://github.com/blog/2256-a-whole-new-github-universe-announcing-new-tools-forums-and-features) but with\nmore features.\n\n## React Storybook and React Styleguidist\n\nIn the project I have started on Monday, we faced the need to document React components. There were two candidates\namong the tools to use — [React Storybook](https://getstorybook.io/) and [React\nStyleguidist](https://github.com/sapegin/react-styleguidist). Both with their pros and cons.\n\nBy now, we ended up with Styleguidist. Anyway, this is not a mature solution, and we can probably think back.\n\nThe Storybook was super easy to install. However, it requires more typing for every story and does not read the props out\nof the documenting comments.\n\nThe Styleguidist was a tricky thing to run. Everything goes smoothly at simple projects but this was not our case. There\nwere some difficulties with the pages wrapped into `react-hot-loader` container. I solved it by introducing proper file\nstructure. We should have it anyway. Now, there is a dedicated folder for the components and we taught the Styleguidist\nto work with it.\n\nAs a piece of advice to friends, I can give the following: try to reuse your normal webpack config and not to write another one\nin the `styleguide.config.js` file. It will save you some time when changing the building process. This is our version:\n\n```\nconst siteWebpack = require(\"./webpack.config.js\");\n\nmodule.exports = {\n  title: 'My Great Style Guide',\n  components: './src/components/**/*.jsx',\n  updateWebpackConfig(webpackConfig) {\n    siteWebpack.module.loaders.forEach(function(loader) {\n      webpackConfig.module.loaders.push(loader);\n    });\n    webpackConfig.postcss = siteWebpack.postcss;\n\n    return webpackConfig;\n  },\n};\n```\n\n## How to Write a Git Commit Message\n\nThe article [How to Write a Git Commit Message](http://chris.beams.io/posts/git-commit/) by Chris Beams has already\nturned 2 years but still actual. I have read it previously and try to follow. But I do not recollect me shring the link\nto it. So, here it is.\n\n## 4 different kinds of React component style\n\nSetting up a new project I have scanned a lot of recent articles about React. One of them is [4 different kinds of React\ncomponent style](https://www.peterbe.com/plog/4-different-kinds-of-react-component-styles). I had doubts if to put it in\nthis blog post or not because it did not tell me much new. On the other hand, it's not a long read and finely summarizes\ndifferent kinds of React components.\n","excerpt":"Week numbers in Google calendar In Finland, the week numbers are widely used. People easily make agreements on let's say \"the beginning on week 45\". For this purpose and also for the actual weekly reports, I have…","fields":{"slug":"en/posts/week-44-2016/","readingTime":{"minutes":2.565}},"frontmatter":{"title":"Week 44, 2016","link":null,"date":"08 November 2016","cover":null}}},{"node":{"body":"\n<div data-excerpt>\n\nWhen it comes to the large web applications, we often operate with complex components. Such components are not just CSS\nstyles for the pieces of an interface but also their JavaScript interactions and templates. As documentation, the style\nguide should reflect them all. In other words, the components on the style guide's pages should be the same living as in\nproduction.\n\n</div>\n\nAt my recent project, we have been using [SC5 Style Guide](http://styleguide.sc5.io/) in its simplest way - documenting\nthe view of the components. For that, we provided the needed HTML in the KSS code and so has received the rendered\ncomponent library.\n\nHowever, in the production code, these components appeared at the pages as a result of some templating transformations.\nAlso, the project is massive and fast-developed, and the changes to the templates happened all the time. As a result,\nthe style guide was always out of date.\n\nMoreover, much functionality could not be illustrated with plain HTML.\nTo be rendered correctly and interact with a user, it also needs its JavaScript code.\n\nAt this project, I have solved the problem using advanced configuration of SC5 Style Guide. Below you can find the\ntricks and explanation.\n\n## Living JavaScript components\n\nUsually, a piece of an interface (often called 'a component') is a combination of HTML, CSS, and JavaScript. With the\nbasic features if SC5 Style Guide you can easily document HTML and CSS. However, applying JavaScript to the components\nrequires an additional configuration.\n\nIn SC5 Styleguide, you can provide additional tags into the `<head>` section of the generated style guide's page. They\ncan be `<script>` tags linking the JavaScript you need.\n\nAssuming this, you can bundle the necessary JavaScript into one file, and link it to the style guide's pages, like this:\n\n```\ngulp.task(\"styleguide:generate\", function() {\n\n  return gulp.src([\"path/to/css/**/*.sass\"])\n    .pipe(styleguide.generate({\n      title: \"My Styleguide\",\n      ...\n      extraHead: [\n        '<script src=\"/js/all-components.js\"></script>',\n        ...\n      ]\n    ...\n```\n\nAnother option for you to use in the configuration is `disableEncapsulation: true`. By default, the tool wraps every\ncomponent into a Shadow DOM container. It makes the components encapsulated and protects from unwanted impact of global CSS.\nAlso, the Shadow DOM wrapper prevents global JavaScript to access the components. Disabling this function, you can give\nthe JavaScript all the access, the same way as it works on a usual page.\n\nIn most cases, JavaScript for the components requires initialization. On the style guide's pages a `styleguide:onRendered`\nevent emits when a component is rendered. You can listen for this event and initialize the components in the event's\nhandler function.\n\nFor example, if using jQuery:\n\n```\n$(window).on('styleguide:onRendered', function(e) {\n  // e.originalEvent.detail.elements[0] - component's container\n  initComponent(e.originalEvent.detail.elements[0])\n});\n```\n\n## Additional processors\n\nThe SC5 Style Guide parses the KSS documentation in your CSS (SASS, LESS) code, collects information about all the\ncomponents and produces a JSON file with it. The documentation pages you can see are the Angular pages built\non the information in this JSON.\n\nGenerating the style guide, you can inject additional processors into transforming data for this JSON file. The\ncustom processing functions can re-organize and modify this data. You can use this trick to provide a more clever\ngenerator, run templates and parametrized JavaScript components.\n\nExamine the generated `styleguide.json` file to see how the data is organized by default. You are going to find out that\nevery component is represented by an object similar to the following:\n\n```\n{\n  header: \"Sub navigation tabs\",\n  description: \"<p class=\"sg\">Navigation item</p> \",\n  modifiers: [ ],\n  deprecated: false,\n  experimental: false,\n  reference: \"4.15.1\",\n  markup: \"<ul class=\"sub-navigation-tabs\">...<ul>\",\n  css: \".sub-navigation-tabs { /* some css */ }\",\n  syntax: \"less\",\n  file: \"tabs.less\",\n  parentReference: \"4.15\",\n  wrapper: \"<sg-wrapper-content/>\",\n  renderMarkup: \"<ul class=\"sub-navigation-tabs\">...<ul>\",\n  variables: [\n    \"colorMain\",\n    \"bgColorSecond\",\n    \"textColor\",\n    \"textColorHover\"\n  ],\n  fileHash: \"d00311f793d66a9e9dee9939dedd9fd9\"\n}\n```\n\nTo modify this data, provide additional processing function as `styleguideProcessors` option. For example,\n\n```\ngulp.task(\"styleguide:generate\", function() {\n\n  return gulp.src([\"path/to/css/**/*.sass\"])\n    .pipe(styleguide.generate({\n      title: \"My Styleguide\",\n      ...\n      styleguideProcessors: {\n        30: processTemplates\n      }\n    ...\n```\n\nAs a value of this option, you can list the processing functions. The given indexes matter for the order in which these\nfunctions are applied to the data.\n\nCheck out [the documentation for options](https://github.com/SC5/sc5-styleguide#build-options).\n\nIn my projects, I used additional processors to operate custom KSS parameters and modify data.\n\n## Custom KSS data\n\nIn the section descriptions, you can provide additional KSS parameters with the names prefixed with `sg-`. For example,\nyou can provide a path to a template which produces the markup for the component:\n\n```\n// Button\n//\n// markup:\n// { title: \"Move on\", type=\"submit\" }\n//\n// sg-template:\n// src/components/button/button.ejs\n//\n// Styleguide 1.2.3\n```\n\nIn here the markup works as an input value for the given template. You can teach Style Guide to apply the template to\nthe declared object and put the result as a markup to render. To do it you need a custom processing function mentioned\nabove.\n\n```\nvar processTemplates = (styleguide) => {\n\n  styleguide.sections.forEach((section) => {\n\n    if (section['sg-template']) {\n      var templatePath = section['sg-template'].trim()\n      templatePath = path.join(process.cwd(), templatePath)\n\n      var templateStr = fs.readFileSync(templatePath, 'utf8')\n      var inputData = eval('(' + section.markup + ')')\n\n      section.renderMarkup = ejs.render(templateStr, insertData)\n    }\n\n  }\n\n}\n```\n\n## Templates on fly\n\nIn the single-page applications, templates work on the client side. In this case, it is better to process them\nin the style guide too. In other words, you should include the templates into the JavaScript bundle and initialize\nthe components on containers.\n\nCombining this approach to the custom processors, you can store the code example for every compoentn in the `markup`\nKSS field.\n\nFor example,\n\n```\n// Tabs\n//\n// markup:\n// var Tabs = require('src/components/tab.js')\n// Tabs.init($container, { items: [...] })\n//\n// sg-js-component:\n// <div class=\"sg-tabs-container\"></div>\n//\n// Styleguide 1.2.3\n```\n\nWith a custom processor, you can put the container's code as a markup to render:\n\n```\nvar processorForJsComponents = function(styleguide) {\n\n  styleguide.sections.forEach((section) => {\n    if (section['sg-js-component']) {\n      section.renderMarkup = section.wrapper.replace(\n        '<sg-wrapper-content/>', section['sg-js-component']\n      );\n    }\n  }\n\n}\n```\n\n## Adjustable initialization for JavaScript\n\nUsually, different components need to be initialized in differently. Also, they may require some fake data. You can\nrun various Javascript functions on separate component containers to get this result.\n\n```\nvar TabsInit = require('src/components/tabs/tabs.init.js')\n\nvar knownComponents = {\n  '.sg-tabs-container': TabsInit\n}\n\n$(window).on('styleguide:onRendered', function(e) {\n\n  knownComponents.forEach((componentInit, componentSelector) => {\n    var containingComponents = $(e.originalEvent.detail.elements[0]).find(componentSelector)\n    if (containingComponents.length > 0) {\n      componentInit(containingComponents)\n    }\n  })\n\n})\n```\n\nThis code runs a corresponding function for every selector in the `knownComponents` object. The matching DOM element(s)\npassed into the initializing function as a parameter.\n\n```\n// src/components/tabs/tabs.sg-init.js\n\nvar Tabs = require('./tabs.js')\n\nvar fakeData = [\n  { title: 'Tab1', url: '/index.html' },\n  { title: 'Tab2', url: '/contacts' }\n]\n\nmodule.exports = function($container) {\n  // Real calling for initing function depends on\n  // you component system interface\n  Tabs.init($container, { items: fakeData })\n}\n\n```\n\nIn this system, you can have several containers with the same CSS class but parametrized with any other information, e.g.\ndata attributes:\n\n```\n// Tabs, another version\n//\n// markup:\n// var Tabs = require('src/components/tab.js')\n// Tabs.init($container, { another: true, items: [...] })\n//\n// sg-js-component:\n// <div class=\"sg-tabs-container\" data-type=\"another\"></div>\n//\n// Styleguide 1.2.4\n```\n\n```\n...\nmodule.exports = function($container) {\n  var type = $container.data('type')\n\n  if (type == 'another') {\n    Tabs.init($container, { another: true,  items: fakeData })\n  } else {\n    Tabs.init($container, { items: fakeData })\n  }\n}\n```\n\n## File structure\n\nYou may have noticed that I suggest storing everything related to the component under the same folder. This is also\nrelevant to the style-guide-related files.\n\nFor a user, a component is a consistent entity. They get it as a whole thing, no matter how many technologies\nare behind. For a developer, it is not that straightforward. We use CSS for styling, JavaScript for interactions and HTML\nfor the view. The corresponding code is usually placed in a separate file for each technology. I find it quite\ndistracting.\n\nHowever, the 'component folder' approach smoothes this situation. Storing everything (including the documentation) in\nthe same place improves developer's experience very much.\n\n```\nsrc/\n  components/\n    login/\n      login.ejs\n      login.js\n      login.sg-init.js\n    tabs/\n      tabs.ejs\n      tabs.js\n      tabs.sass\n      tabs.sg-init.js\n```\n\n## Enjoy\n\nAfter ajusting the SC5 Style Guide, as shown above, you will get the double living documentation. Remember about the\nwatching mode to re-generate the style guide on the file changes. It works as a nice development playground.\n\nAlso, last but not least, I would like to thank the community which made these things possible. I used the SC5 Style Guide\nfeatures by other developers and so feel very grateful. You may see their names [at the releases'\npage](https://github.com/SC5/sc5-styleguide/releases). If you want yours to appear here, please\n[contribute](https://github.com/SC5/sc5-styleguide).\n","excerpt":"At my recent project, we have been using SC5 Style Guide in its simplest way - documenting the view of the components. For that, we provided the needed HTML in the KSS code and so has received the rendered component library. Ho…","fields":{"slug":"en/posts/sc5-style-guide-next-level/","readingTime":{"minutes":7.095}},"frontmatter":{"title":"Living SC5 Styleguide, the next level","link":null,"date":"23 May 2016","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/5677907f093a3a587d0c6a6fc18d6a91/b5380/thumb.png","srcSet":"/static/5677907f093a3a587d0c6a6fc18d6a91/b5380/thumb.png 1200w","sizes":"1200px"},"sources":[{"srcSet":"/static/5677907f093a3a587d0c6a6fc18d6a91/81547/thumb.webp 1200w","type":"image/webp","sizes":"1200px"}]},"width":1200,"height":630}}}}}},{"node":{"body":"\n<div data-excerpt>\n\nEarlier this year, I participated in a development of a single page application. With the team, we started this\nproject from scratch. This situation was the most suitable to practice the new technologies.\n\nThe stack I've tried was React + ES2015 + postcss + webpack. However, keeping in mind that most of the\nteam (who were supposed to maintain the project later) are mainly experienced in Angular, I was looking for some\nsort of combination of these frameworks.\n\n</div>\n\nFinally, I made a project with React used for the view and Angular governing the data layer. I\nbelieve that such project is ideal for the a bridge role. Often happens that the development team has a\nstrict deadline. There is no time to invent new rocket science approaches. However, we can introduce them gradually.\n\nFor that project, I decided that we can introduce React with ES2015. The project structure is easy to refactor\ninto a React-only project in the next iterations.\n\nI cannot share the exact code of the project, but I created a dummy repository with the same structure:\n[varya/angular-react-stub](https://github.com/varya/angular-react-stub).\n\nA new project may be forked/copied from it. After installation of the required npm packages, the development starts with\nrunning\n\n```\nnpm start\n```\n\nIt starts a local server that builds of html, js and css files related to the project. The magic\nhappens with `webpack`. Let me explain it below.\n\nFor now, let's concentrate on the file structure.\n\nA human produced code of the project is placed in the `src` folder.\n\n```\nsrc/\n\n  _helpers/\n\n  modules/\n    menu/\n      menu.component.js\n      menu.css\n\n  pages/\n    contact/\n      contact.ctrl.js\n      contact.html\n\n  index.html\n  index.js\n```\n\nThe [index.js](https://github.com/varya/angular-react-stub/blob/3870766a28adb61fc2f1fc86fbfbe538c00da1f9/src/index.js) file\nis 'entering point' of the building process. Here, the webpack finds out what the modules required for the\napp are.\n\nIn this file, I create an Angular application and define the rules for routing. Roughly, each routing path corresponds\nto its page. It takes a page template (an `html` file) and a page controller (a `js` module), and make them work\ntogether.\n\nTo keep everything neat, I made `pages` folder, where each page has a subfolder with a template\nand a controller.\n\nThe controller is normal Angular code. It manipulates the data for future usage in the view. Also, controller is\nresponsible for extraction the data fromthe server and any transformation of it.\n\nHowever, the given example contains no such\nheavy code. Anyway, you can see how the `$scope` is filled in\n[pages/components/components.ctrl.js](https://github.com/varya/angular-react-stub/blob/3870766a28adb61fc2f1fc86fbfbe538c00da1f9/src/pages/components/components.ctrl.js).\n\nThe data from `$scope` is accessible in the template. From [pages/components/components.html](https://github.com/varya/angular-react-stub/blob/3870766a28adb61fc2f1fc86fbfbe538c00da1f9/src/pages/components/components.html)\nyou can see how it is passed down to the only used Angular directive, `react-component`. This directive is a bridge\nbetween Angular-cooked data and React-operated view. In the directive you declare what React component to render and\npass the properties to it. After that, the React component operates independently from the Angular.\n\n## Modules\n\nThere is a special `modules` folder at the same level as `pages`. It contains all the React modules used in the\napplication. The modules can be complex and include other modules. However, the file structure is flat. Each component\nis represented by a folder with its JavaScript file and any other related content inside. Often, it is CSS, however\nthe pictures and other required stuff may be in the same folder.\n\nYou can check out a typical component code in the file\n[modules/menu/menu.component.js](https://github.com/varya/angular-react-stub/blob/3870766a28adb61fc2f1fc86fbfbe538c00da1f9/src/modules/menu/menu.component.js).\n\nNote that the required CSS is imported in the JavaScript as\n\n```\nimport styles from './menu.css';\n```\n\nThis is one of the webpack's features which makes developing with it so awesome. A component declares the CSS it uses.\nThen, the bundled CSS is built according to these declarations. In refactoring, the process will\nautomatically exclude out-of-date CSS if its module is no longer in use.\n\n[webpack.config.js](https://github.com/varya/angular-react-stub/blob/3870766a28adb61fc2f1fc86fbfbe538c00da1f9/webpack.config.js)\nstores the data what files to process and how to do it.\nIt gets the file types from their extensions. Thus, `*.js` and `*.jsx` files are ES2015 and transform\ninto plain JavaScript. `*.html` files are inserted as raw strings. This is why they can be used as Angular templates.\n`*.css` files are required as styles but first transform with Postcss. I also use `precss` as a plugin, which\nmakes possible to enjoy most of the usual pre-processing features.\n\nThis covers pretty much all about the basic structure. A real project can use external libraries and modules as\nwell as have more complex building process. But here is its starting point: [varya/angular-react-stub](https://github.com/varya/angular-react-stub/).\n","excerpt":"Finally, I made a project with React used for the view and Angular governing the data layer. I believe that such project is ideal for the a…","fields":{"slug":"en/posts/react-angular-project/","readingTime":{"minutes":3.65}},"frontmatter":{"title":"Simple React Angular project","link":null,"date":"19 May 2016","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#080808","images":{"fallback":{"src":"/static/22f280d115e6ca3eb25ba515f8d9130f/14d1d/thumb.png","srcSet":"/static/22f280d115e6ca3eb25ba515f8d9130f/14d1d/thumb.png 400w","sizes":"400px"},"sources":[{"srcSet":"/static/22f280d115e6ca3eb25ba515f8d9130f/4a8c8/thumb.webp 400w","type":"image/webp","sizes":"400px"}]},"width":400,"height":236}}}}}},{"node":{"body":"\n<div data-excerpt>\n\nBeing a frontend developer these days means to learn the new things every day. We read articles and blog posts,\nexamine the changelogs, follow the Twitter announcements and participate in the GitHub discussions.\nThis helps to keep up.\n\nHowever,\nwhen it comes to something bigger, like the exploring of a new framework or an ecosystem, it is not enough.\nThe perfect solution is to organize a whole day hackathon for the developers in your company.\nAt SC5 online, we took this advantage mastering the React development. Few ecosystem components such as\nwebpack and redux came along.\n\n</div>\n\nThe private companies have hard time to find an opportunity and organize such event.\nMoreover, the preparations for the hackathon consume a lot of resources. To ease the hardship, I've decided to share\nthe materials that I prepared for our event. The hackathon plan and the detailed description of slides are given below.\nhackathon. Below you can find the hackathon plan and the slides explained.\n\nIt is the presentation that I used for a pre-coding section:\n[varya.me/reactjs-hackathon](http://varya.me/reactjs-hackathon/).\n\nAt the moment, the slides were hosted online, and before starting I provided a short link to them.\nDuring the coding event, the developers need a bunch of online materials, including starting projects, documentation,\ntips and tricks. The links to these meterials were inserted in my presentation, and it was important to let the others\ncheck them out. Also, we had a special Slack channel where the links were shared one more time.\n\nThe next slide showed the plan of event to the participants:\n\n1. About the event\n1. Choosing the projects\n1. Introduction to React\n1. Stub projects\n1. Linking UI libraries\n1. React Native\n1. Relay&GraphQL\n1. Coding\n\nThe slides included everything listed besides the coding part, which was devoted directly to the development.\nAltogether, the presentation took about 50 minutes. This amount of time ensured that I made all the needed\nintroductions. Also, it was not too long to make people bored.\n\nOn the next stage, I offered the applications that we could write using React during the event.\n\nHere are the listed options:\n\n- Instagram-like\n- Twitter dashboard\n- Shopping list\n- [Bars on map](http://kipp.is/map)\n- [2048](https://claudiopro.github.io/2048-react/)\n- Tetris\n- [Snake game](https://reake-react-snake.firebaseapp.com/)\n- Your own idea\n\nI believe that the product goals should be defined at the start. It is especially important for the React hackathon.\nPeople start to think how they would code it in the way they are used to work. When it comes to React, they are\nimpressed by the elegance and easiness of the approach.\n\nAfter that, I provided the links to the official documentation and tutorials. It is evident that even whole day event\nis not sufficient to learn how to work with a new framework. However, it lets ignite an initial interest that can lead\nto the following independet research. A link to an interesting tutorial can be the first step.\n\nAt the time of hackathon, some developers had a React experience, some have read the articles, and some at least heard\nabout the approach. The hackathon is not a 'teach-you-how' workshop but a collaborative and even team-building event.\nThis why I wanted all the people to be involved.\n\nWhen giving\na presentation, you can make a contact with the audience by asking the questions. Moreover, you can add the given\nanswers into the presentation on-the-go. One of my slides had the same a title as the famous Reddit's question\n'[What is so great about React.js](https://www.reddit.com/r/javascript/comments/2uvz0x/whats_so_great_about_reactjs/)'.\nI wrote the answers from the audience into a big textarea in the slide. It visualised the contribution that everyone\nmade in the introduction.\n\nWhen it came to the React buzz words, we had not a solo talk but a proper discussion.\n\n- ES2015 (ES6)\n- React\n- webpack\n- Flux / Redux\n- Relay & GraphQL\n\nTo save the developers' time in the codung section, I gave the definitions and explanations in advance.\nAlso, the most of the applications usually start with cloning the starter project. In the hackathon, I aimed not to give\na fish but to teach how to fish. To do that, I provided the link to the starter kit search:\n[andrewhfarmer.com/starter-project](http://andrewhfarmer.com/starter-project/).\n\nHowever, we were limited in our time, so I explained some essentials and shortcuts for the efficient start.\n\nThe top priority of the hackathon was diving into React ecosystem. The ultimate goal was to write an application\nusing ES2015 (aka ES6), build it with webpack and use Readux. However, it might have been too complicated for the\nReact beginners, and I did not want to exclude them.\n\nTo ensure the inclusiveness, I recommended the simplest React starter kit. Many developers did not realise that they\ncan code React applications by linking two scripts hosted at CDN that is similar to write-on-jQuery approach.\n\n```js\n<script src=\"https://fb.me/react-0.14.7.js\"\n    integrity=\"sha384-xQae1pUPdAKUe0u0KUTNt09zzdwheX4VSUsV8vatqM+t6X7rta01qOzessL808ox\"\n    crossorigin=\"anonymous\"></script>\n<script src=\"https://fb.me/react-dom-0.14.7.js\"\n    integrity=\"sha384-A1t0GCrR06cTHvMjaxeSE8XOiz6j7NvWdmxhN/9z748wEvJTVk13Rr8gMzTUnd8G\"\n    crossorigin=\"anonymous\"></script>\n```\n\nWith these two scripts and a single one local JavaScript file, you can follow [the official documentation](https://facebook.github.io/react/downloads.html)\nand start your React application right away.\n\nThe other option is suited for those who are comfortable with builders and don't want to dedicate their time\nfor sort out ES2015 and prefer plain JavaScript. When I've started with React, I dived deeply into the new\nthings. However it took some time, which is not availabe during the one day event.\nSo, 'ES5 + builder' solution is reasonable for the developers who want get their hands on React quickly.\nTo provide the different options, I gave the links to the other starter kits:\n\n- [with webpack](https://github.com/petehunt/ReactHack)\n- [with gulp](https://github.com/artyomtrityak/react-hackathon)\n\nThe last stubs 'ES2015 + webpack' type. I've given two:\n\n- [Essential](https://github.com/pheuter/essential-react)\n- [varya/react-stub](https://github.com/varya/react-stub)\n  - ES2015, BEM, PostCSS, webpack\n\nDespite the existence of a good starter project Essential, I've created my own and recommended it.\nI keep it minimalistic, so there is no redux linking there. I believe that the first project is better without\nexessive complexity.\n\nOne more reason to create my starter kit was to demonstrate the different UI libraries linked and used\nwithin the React project. Honestly, I don't see any ideal solution for the React UI library yet.\nThe ecosystem misses a crucial part, but the existing libraries can help at the initial bootstrapping stage.\nMoreover, it provides a knowledge to use when it comes to building your own UI library for the React projects.\n\n- [React ToolBox](http://react-toolbox.com/#/) -\n  [react-stub@with-react-toolbox](https://github.com/varya/react-stub/tree/with-react-toolbox)\n- [Material UI](http://www.material-ui.com/#/) -\n  [react-stub@with-material-ui](https://github.com/varya/react-stub/tree/with-material-ui)\n- [Belle](http://nikgraf.github.io/belle/#/?_k=xvldj2) -\n  [react-stub@with-belle](https://github.com/varya/react-stub/tree/with-belle)\n\nTo demonstrate how React works with UI libraries, I prepared a branch for each option. These branches\nare in the public GitHub repository and available for using. Also, I was able to run the code on my computer\nand show how the application changes after I alter the code.\n\nLive coding section always makes a good impression. Moreover, it connects the theory with actual coding.\n\nBefore the development, I provided the dummy JSONs for the applications based on the\nthird-party services data (Instagram or Twitter). That helped the developers to be focused on React rather\nthan exploring APIs.\n\nDuring the hackathon, we had React Native and Relay & GraphQL sections for the advanced React users. These topics\nwere covered by my colleague [Anssi Herranen](https://fi.linkedin.com/in/anssiherranen) and our quest [Mikhail\nNovikov](https://fi.linkedin.com/in/freiksenet) from [Reindex](https://www.reindex.io/).\n\nAfter all the presentations, it was time to code. It is important that the hackathon organizers take care of the\ndevelopers' basic needs and let the people be focused on the programming. I'm thankful for our Head of Technology\n[Lauri Svan](https://fi.linkedin.com/in/laurisvan) for ordering pizza and drinks, and organizing the people.\nThe developers can stay active much longer if they are taken care.\n\nAs a result of our hackathon, some developers came up with the applications and demostrated them in the demo part.\nThe others got stable base to continues their studies later. And no doubt we all had huge fun.\n\nFeel free to take my presentation and materials for a hackathon in your company or at the community meeting. React\nrocks! :-)\n","excerpt":"The private companies…","fields":{"slug":"en/posts/react-hackathon-materials/","readingTime":{"minutes":6.605}},"frontmatter":{"title":"Materials for your React hackathon","link":null,"date":"16 April 2016","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/44157a8ee6ed1f55b18a51d30e9dd838/de50c/thumb.png","srcSet":"/static/44157a8ee6ed1f55b18a51d30e9dd838/de50c/thumb.png 400w","sizes":"400px"},"sources":[{"srcSet":"/static/44157a8ee6ed1f55b18a51d30e9dd838/413c5/thumb.webp 400w","type":"image/webp","sizes":"400px"}]},"width":400,"height":397}}}}}},{"node":{"body":"\n<div data-excerpt>\n\nMy first task for new projects is to create a git repository. Whether it is a new app, or conference slides, or even an\narticle, I prefer to keep everything in Git. It is an excellent tool, and, personally, I enjoy its command line\ninterface.\n\nHowever, there is always room for improvement. Recently I found an idea how to make my git visualize the changes that\nI've done to the images in a repository.\n\n</div>\n\n```sh\nVaryas-MBP £ ~/path/to/project ⤳ master*\n  › git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   desktop.blocks/social-ico/social-ico__rss.png\n    modified:   desktop.blocks/social-ico/social-ico__twitter.png\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nVaryas-MBP £ ~/path/to/project ⤳ master*\n```\n\nI can run `git diff` over each of the modified images to see the following:\n\n![](./diff1.png)\n\n![](./diff2.png)\n\nFor every picture displayed, I can see a previous version (on the left side), a current version (on the right side) and\nvisually represented difference (in between). This feature is useful for tracking exact changes in the image. Now, I can\neasily spot if some particular details were shifted, some colors were changed, or a picture was accidentally blended\nwith another one.\n\nYou can configure git to do the same. First, install ImageMagick to provide a visual comparison. Note that for the\nlatest versions of OS X you need to install a package with a support of X11. To install with `brew`, do the following:\n\n```\n  › brew install imagemagick --with-x11\n```\n\nThen, create a script to compare two given images. Run `cat ~/bin/git-imgdiff`, and paste inside:\n\n```\n#!/bin/sh\ncompare $2 $1 png:- | montage -geometry +4+4 $2 - $1 png:- | display -title \"$1\" -\n```\n\nNow, test the script. It should do the comparison of two processed images:\n\n```\n  › ~/bin/git-imgdiff img1.png img2.png\n```\n\nAt this step, you need to show git how to use compariing script. For that, define the image files their extensions\nin a special file. Run `cat ~/.gitattributes` and paste the following:\n\n```\n*.gif diff=image\n*.jpg diff=image\n*.png diff=image\n```\n\nProvide git with this configuration by:\n\n```\n  › git config --global core.attributesfile '~/.gitattributes'\n```\n\nThe last step is to instruct git to use your script when `diff` command is applied to the matching files:\n\n```\n  › git config --global diff.image.command '~/bin/git-imgdiff'\n```\n\nThat's it. Now, running a `git diff` over your images you will get a human-friendly output. Enjoy!\n\n### References\n\n- [1](http://www.akikoskinen.info/image-diffs-with-git/)\n- [2](http://paulmestemaker.com/imagemagick-display-mac-os-x/)\n","excerpt":"I can run  over each of the modified images to see the following: For every picture displayed, I can see a previous version (on the left side), a current version (on the right side) and visually…","fields":{"slug":"en/posts/image-diffs-with-git/","readingTime":{"minutes":2.125}},"frontmatter":{"title":"Visual diffs for the images in a git repo","link":null,"date":"18 March 2016","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/46040b6f4a288812c1abdb04c0faf888/679fd/thumb.png","srcSet":"/static/46040b6f4a288812c1abdb04c0faf888/679fd/thumb.png 432w","sizes":"432px"},"sources":[{"srcSet":"/static/46040b6f4a288812c1abdb04c0faf888/e62c2/thumb.webp 432w","type":"image/webp","sizes":"432px"}]},"width":432,"height":188}}}}}},{"node":{"body":"\n<div data-excerpt>\n\nMy recent huge project was developing a library of CSS and JavaScript components for sharing this code across a lot of\nweb services and mobile apps. In most cases such work brings up question about how to avoid blocking the processes.\n\nThe library has its own flow, and obviously the new things can only appear in new versions. Although I made my best to\nprovide fast releases, and so the library has them 2-3 times a week, it is still understandable that the library\ncustomers sometimes cannot wait even an hour.\n\nI belive that one of the must-haves of UI library is the freedom which it should give to its customers. You can easily\nprovide this if practice atomic approach everythere. For example, for the icon fonts.\n\n</div>\n\n### Solid piece\n\nSoon or not SVG will conquer the world. But now we still have icon fonts in some projects. The same story was with that\nlibrary.\n\nHowever the icon font perfectly suited for the displaying icons onto the web pages, it was integration and flow which\ncreated the problem. All the icons fit into one font file (well, in 4 different formats):\n\n```\nsrc/\n  fonts/\n    iconfont.eot\n    iconfont.svg\n    iconfont.ttf\n    iconfont.woff\n```\n\nAlso the library provided CSS to make the icon-symbol matching:\n\n```scss\n.icon {\n  font-family: $global-font-icon;\n  &:before {\n    /* Some common icon stuff */\n  }\n  &--support {\n    &:before {\n      content: \"a\";\n    }\n  }\n  &--chat {\n    &:before {\n      content: \"b\";\n    }\n  }\n  ...\n}\n```\n\nCustomers get the library as a bower or npm package. When they need a new icon to be in the set, they might request this\nand wait for the package to update. As usual, the fastest way to get something happened is to do this yourself. So, it\npossible to contribute and even release yourself. But still any further change would need you to go through the\ndevelopment process.\n\n### Atomic and buildable\n\nOften you need to divide into smaller pieces in order to make things more mantainable. The same goes with icons. In the\nlibrary we changed it so that the source is now a set of SVG files:\n\n```\nsrc/\n  icons/\n    1000-support.svg\n    1010-chat.svg\n    1020-users.svg\n```\n\nThe file names are important, these words are used to generate the CSS classes, which are the API for the customer.\nNumbers are for the right order. If building the icon system from very beginning, they are not needed. But in the\nlibrary case I wanted backward compatibility.\n\nThen, these icons are built into the same icon fonts with `gulp-iconfont` plugin:\n\n```js\nvar gulp = require(\"gulp\");\nvar iconfont = require(\"gulp-iconfont\");\nvar consolidate = require(\"gulp-consolidate\");\n\nvar sourcePath = \"src/\";\n\ngulp.task(\"build:icons\", function () {\n  return gulp\n    .src([sourcePath + \"/icons/*.svg\"])\n    .pipe(\n      iconfont({\n        fontName: \"myicons\",\n        formats: [\"ttf\", \"eot\", \"woff\", \"svg\"],\n        centerHorizontally: true,\n        fixedWidth: true,\n      })\n    )\n    .on(\"glyphs\", (glyphs) => {\n      glyphs.forEach((icon) => {\n        icon.name = icon.name.replace(/^\\d+\\-/g, \"\");\n      });\n\n      gulp\n        .src(sourcePath + \"/icons/util/*.scss\") // Template\n        .pipe(\n          consolidate(\"lodash\", {\n            glyphs: glyphs,\n            fontName: \"myiconfont\",\n            fontPath: \"../fonts/\",\n          })\n        )\n        .pipe(gulp.dest(sourcePath + \"/scss/\"));\n    })\n    .pipe(gulp.dest(sourcePath + \"/fonts/\"));\n});\n```\n\nBesides the icon files this task needs the templates to produce the CSS (or SCSS, as in this case) which makes the\nsymbol-class matching. I found it logical to store it together with the icon files:\n\n```\nsrc/\n  icons/\n    utils/\n      iconfont__icons.scss\n      iconfont__variables.scss\n```\n\nIt's possible to manage with one template only, but for even more flexibility I have two. The main one makes the\nclasses:\n\n```css\n@font-face {\n  font-family: $global-font-icon;\n  src:url(\"<%= fontPath %><%= fontName %>..eot\");\n  src:url(\"<%= fontPath %><%= fontName %>.?#iefix\") format(\"embedded-opentype\"),\n    url(\"<%= fontPath %><%= fontName %>.woff\") format(\"woff\"),\n    url(\"<%= fontPath %><%= fontName %>.ttf\") format(\"truetype\"),\n    url(\"<%= fontPath %><%= fontName %>.#<%= fontName %>\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal;\n}\n\n.icon {\n  font-family: $global-font-icon;\n\n  &:before {\n    /* Some common icon stuff */\n  }\n<% _.each(glyphs, function(glyph) { %>\n  &.--<%= glyph.name %> {\n    &:before {\n      content: $icon--<%= glyph.name %>;\n    }\n  }<% }); %>\n\n}\n```\n\nAnd another one makes the varibles:\n\n```css\n<% _.each(glyphs, function(glyph) { %>\n$icon-<%= glyph.name %>: \"\\<%= glyph.unicode[0].charCodeAt(0).toString(16).toUpperCase() %>\" !default;\n<% }); %>\n```\n\nRunning the task produces the fonts and 2 generic SCSS files:\n\n```\nsrc/\n  font/\n    iconfont.eot\n    iconfont.svg\n    iconfont.ttf\n    iconfont.woff\n  scss/\n    icons.scss // Not generic\n    iconfont__icons.scss\n    iconfont__variables.scss\n```\n\nIn the `icons.scss`, which is normal SCSS file, the result is requested:\n\n```css\n// Icons\n//\n// Lists all the icons that are used in the services.\n//\n// Styleguide 5\n\n@import \"iconfont__variables.scss\";\n@import \"iconfont__icons.scss\";\n```\n\n### Extend on fly\n\nThe variables may be redefined on the customer's side. This makes is a fast way to change the icon, if the replacement\nalready sit in the font bundle.\n\nIf not, it is almost zero amout of work to implement this build-from-atoms process on the customer side.\n\nThe customer has all the library code, let's say in `bower_components`, and can have its own folder of icons:\n\n```\nbower_components/\n  ui-library/\n    dist/\n      icons/\n      scss/\nsrc/\n  icons/\n    2000-rabbit.svg\n    2010-gift.svg\n```\n\nWhen building the font they need to use both their set of icons and the library icons:\n\n```js\nvar sourcePath = \"src/\";\n\ngulp.task(\"build:icons\", function () {\n  return gulp\n    .src([\n      sourcePath + \"/icons/*.svg\",\n      \"bower_components/ui-library/dist/icons/*.svg\",\n    ])\n    .pipe(\n      iconfont({\n        /* The same as above */\n      })\n    )\n    .on(\"glyphs\", (glyphs) => {\n      gulp\n        .src(\"bower_components/ui-library/dist/icons/util/*.scss\")\n        .pipe(\n          consolidate(\"lodash\", {\n            /* The same as above */\n          })\n        )\n        .pipe(gulp.dest(sourcePath + \"/scss/\"));\n    })\n    .pipe(gulp.dest(sourcePath + \"/fonts/\"));\n});\n```\n\nIt is not even needed to implement template for the output SCSS, it comes in the library dist.\n\nWith such a flow a UI library customer stays completely independent from the library release cycle and may bring a new\nicon into her product as soon as the atomic SVG file is copied into the needed folder. As a background process it is\nneeded to contribute the same icon into the library, but not necessarily the same moment. And even the contributing\nprocess is changed to be better because it came to adding an SVG file.\n\nAs other atomical things, such font flow makes git history more useful. Now it is easier to see\nif the provided change affected many or just one icon. Also, SVG images are rendered nicely in pull requests.\n\nEven simultaneous changes of the icons in both library and customer websites are possible and should not cause any\nconflict.\n\nAnd the last but not least nice thing: all the icons are now in the library as SVG files. Hopefully later we come up\nwith using next century technologies and not the icons fonts. When this sweet moment comes, half of the work will have\nbeen done :-)\n","excerpt":"","fields":{"slug":"en/posts/dealing-atomically-with-icon-fonts/","readingTime":{"minutes":5.385}},"frontmatter":{"title":"Dealing atomically with icon fonts","link":null,"date":"10 November 2015","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#585858","images":{"fallback":{"src":"/static/5ff1b90224ede4179ee3616d1d5da5ee/f0233/thumb.png","srcSet":"/static/5ff1b90224ede4179ee3616d1d5da5ee/f0233/thumb.png 600w","sizes":"600px"},"sources":[{"srcSet":"/static/5ff1b90224ede4179ee3616d1d5da5ee/b7dec/thumb.webp 600w","type":"image/webp","sizes":"600px"}]},"width":600,"height":350}}}}}}]}},"pageContext":{"limit":6,"skip":24,"pageCount":9,"currentPage":5}},"staticQueryHashes":[],"slicesMap":{}}