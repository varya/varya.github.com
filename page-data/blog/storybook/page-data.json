{"componentChunkName":"component---src-templates-tag-index-js","path":"/blog/storybook/","result":{"data":{"posts":{"edges":[{"node":{"body":"\n<div data-excerpt>\n\nMaking the components responsive is usually one of the key requirements for any design system or a pattern library.\nThis means that the documentation system has to follow and show how the components are rendered on small to large screens.\nIn this post, I show how I managed to do it with Storybook and get unique URLs for such responsive stories for later\nembedding them as examples into other (documentation) pages.\n\n</div>\n\nStorybook provides essential add-ons, and one of them is for working with different screen sizes. It gives\nyou a viewport toolbar where you can select how to render your stories.\n\nThe [documentation page](https://storybook.js.org/docs/react/essentials/viewport) explains how to get it working\nand how to configure for your specific case.\n\nYou may enjoy the default set up and manually change the viewport settings when developing or checking documentation\nof the components.\n\nHowever, sometimes there is a need to demonstrate how the same code is rendered on different screens. For example,\nif you are writing documentation for responsive components such as a grid system. In this situation, changing the default\nviewport and making generic stories can save a lot of your time.\n\nYou can write the stories once, but show them with different settings. This is how I demonstrate the grid system behavior on large and small screens:\n\n![](./stories-size-l.png)\n\n![](./stories-size-s.png)\n\nAs you can see in the sidebar, there is sub-navigation for the Grid stories. It shows the same three examples of different screen sizes. Someone who is checking the documentation on Storybook does not need to use the viewport toolbar because\neach of the subfolders already shows all its stories with the defined setting.\n\n## Set up thew viewports\n\nIf you want to do the same, first you should set up the viewports you are goint to use. This is a piece of code from\nmy `.storybook/preview.js` file:\n\n```js\nconst customViewports = {\n  xs: {\n    name: \"XS\",\n    styles: {\n      width: \"480px\",\n      height: \"600px\",\n    },\n  },\n  s: {\n    name: \"S\",\n    styles: {\n      width: \"640px\",\n      height: \"801px\",\n    },\n  },\n  m: {\n    name: \"M\",\n    styles: {\n      width: \"960px\",\n      height: \"700px\",\n    },\n  },\n  l: {\n    name: \"L\",\n    styles: {\n      width: \"1200px\",\n      height: \"800px\",\n    },\n  },\n  xl: {\n    name: \"XL\",\n    styles: {\n      width: \"1400px\",\n      height: \"900px\",\n    },\n  },\n};\n\naddParameters({\n  viewport: {\n    viewports: {\n      ...customViewports,\n    },\n  },\n});\n```\n\n## Write the stories\n\nThen, you will need a file with repetitive stories. It should be written similarly to a usual `.stories.js`. But you\ndo not need `export default` part because these stories should not be shown. We will use them for later re-exporting. This is my `components/Grid/Grid.generic.stories.js` (I changed the content to make it shorter).\n\n```\nimport React from 'react';\n\nexport const story1 = () => <Grid>Example 1</Grid>\n\nexport const story2 = () => <Grid>Example 2</Grid>\n\nexport const story3 = () => <Grid>Example 3</Grid>\n```\n\n## Re-export the stories\n\nThe generic stories can be re-used with different viewport settings. I have a separate `.stories.js` file for each of them:\n\n- `Grid.viewport-xs.stories.js`\n- `Grid.viewport-s.stories.js`\n- `Grid.viewport-m.stories.js`\n- `Grid.viewport-l.stories.js`\n- `Grid.viewport-xl.stories.js`\n\nThe content of these files is similar but the viewport settings are different:\n\n```\n\nimport React from 'react';\n\nexport default {\n  title: 'Components/Grid/XS',\n  decorators: [\n    storyFn => (\n      <div className=\"ds-storybook-grid\">\n        {storyFn()}\n      </div>\n    ),\n  ],\n  parameters: {\n    viewport: {\n      defaultViewport: 'xs'\n    },\n    loki: { skip: true },\n  },\n};\n\nexport * from './Grid.generic.stories'\n```\n\nNote the last line! `export * from './Grid.generic.stories'` re-exports all the stories. So, you need only support this\nvery file and you get the stories for all the viewports generated automatically.\n\n## Why?\n\nThere are not that many situations you would need this solution. But it provides each story with a unique URL and predefined viewport size (something that the toolbar is missing). Using this URL and having your storybook publically hosted, you can\nembed your stories and iframes into some other pages and be sure that they illustrate the behavior on the component\non a specific viewport.\n","excerpt":"Storybook provides essential add-ons, and one of them is for working with different screen sizes. It gives you a viewport toolbar where you can select how to render your stories. The documentation page explains how to get it working and how to configure for your specific case.\n\nYou may enjoy the default set up and manually change the viewport settings when developing or checkingâ€¦","fields":{"slug":"blog/stories-with-different-viewports/"},"frontmatter":{"title":"Generic Storybook stories with different viewports","date":"12 August 2020","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#080808","images":{"fallback":{"src":"/static/bfa1ee7c34adc725ed8f73b1e47338b0/6977c/thumb.png","srcSet":"/static/bfa1ee7c34adc725ed8f73b1e47338b0/6977c/thumb.png 1711w","sizes":"1711px"},"sources":[{"srcSet":"/static/bfa1ee7c34adc725ed8f73b1e47338b0/63bf0/thumb.webp 1711w","type":"image/webp","sizes":"1711px"}]},"width":1711,"height":1086}}}}}}]}},"pageContext":{"tag":"storybook","tagSlug":"storybook"}},"staticQueryHashes":[],"slicesMap":{}}