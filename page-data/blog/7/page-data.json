{"componentChunkName":"component---src-templates-blog-index-js","path":"/blog/7/","result":{"data":{"posts":{"edges":[{"node":{"body":"\n<div data-excerpt>\n\nI use the same laptop for both work and personal needs. This is useful but makes me see to keeping my\nwork-life balance. I do this simply — turn off all the applications running when I finish my working day\nin the evening. The only issue is not to forget to open them again next day. But this process can be automatized. :-)\n\n</div>\n\nThe most important is to run the applications which are in use by the other team members. For example, I a Jabber app\nhas to be running since the workday has started. The same goes for any other messenger.\n\nWe here at AppGyver use [Flowdock](https://www.flowdock.com)\nfor team communication. So I needed to be sure that it is open every morning.\n\nIt turned out that this is doable on Mac with the native Calendar application. Let me show you how exactly.\n\n### Create a new event in the Calendar\n\nI named mine \"Run Flowdock\". Do not bother about the laptop being opened by the event time your are setting up. The\napplication can run in advance. My event has `9:35` time.\n\n### Make your event repeated\n\nThis event should be repeated every week at the workdays.\n\n### Run the application\n\nNow the most interesting thing. You can run any application using custom event alerts.\n\nChoose the last item in the `alert` select, which is `Custom`.\n\n<img\nclass=\"article__image\"\nsrc=\"http://img-fotki.yandex.ru/get/4802/14441195.32/0_88921_7d53950e_L.png\" width=\"300\" height=\"500\" border=\"0\"\ntitle=\"\" alt=\"\"/>\n\nOnce the next dialog is opened, choose `Open file`.\n\n<img\nclass=\"article__image\"\nsrc=\"http://img-fotki.yandex.ru/get/4813/14441195.32/0_88925_47986a79_M.png\" width=\"300\" height=\"167\" border=\"0\"\ntitle=\"\" alt=\"\"/>\n<img\nclass=\"article__image\"\nsrc=\"http://img-fotki.yandex.ru/get/5109/14441195.32/0_88924_ea39983e_M.png\" width=\"300\" height=\"162\" border=\"0\"\ntitle=\"\" alt=\"\"/>\n\nBy `file` they mean an applicaiton to be run. It is defined to be `Calendar` by default but you can\nchoose another one.\n\n<img\nclass=\"article__image\"\nsrc=\"http://img-fotki.yandex.ru/get/4810/14441195.32/0_88922_22d155c7_M.png\" width=\"300\" height=\"193\" border=\"0\"\ntitle=\"\" alt=\"\"/>\n\nThen, select the application needed in the Finder dialog. In my case it is Flowdock.\n\n<img\nclass=\"article__image\"\nsrc=\"http://img-fotki.yandex.ru/get/4809/14441195.32/0_88923_7597bf28_M.png\" width=\"300\" height=\"196\" border=\"0\"\ntitle=\"\" alt=\"\"/>\n\nThen, fix the time. 5 minutes before 9:35 is exactly half past nine. Let me remin you, this does not mean that\nyou need to be at work by this time and have your laptop opened. You can be riding a bus or even sleeping. The\napplication will run later, when you open your computer.\n\n### Drawback\n\nNot ideal, indeed. If your calendar is synchronized with iPhone, it peeps by this time. The phone cannot run the\napplication, so it reminds you about the event with sound. But as [one of my friends\nsuggests](http://varya.me/ru/posts/run-app-in-time-on-mac/#comment-1582219469) the workaround can be to create a\nseparate calendar for such event and not to synchronize it with other devices.\n","excerpt":"The most important is to run the applications which are in use by the other team members. For example, I a Jabber app has to be running since the workday has started. The same goes for any other messenger. We here at AppGyver use Flowdock for team communication. So I needed…","fields":{"slug":"en/posts/run-app-in-time-on-mac/","readingTime":{"minutes":2.155}},"frontmatter":{"title":"Run on time (about Mac applications)","link":null,"date":"12 September 2014","cover":null}}},{"node":{"body":"\n<div data-excerpt>\n\nLong time ago I could read and learn about web development in Russian only. Later, having completed an English language course, I began to read articles and blogs in English more and more. The same went for conferences: I visited\nRussian-speaking conferences at first and later switched to English-speaking conferences in Europe. In both articles and conference talks, I noticed how the content was different depending on the language used. Sometime I even thought that the communities evolve in different ways and follow different directions.\n\n</div>\n\nMy Russian-speaking colleagues indeed know the \"[HTML/CSS markup with independent blocks](http://vitaly.harisov.name/article/independent-blocks.html)\"\narticle by Vitaly Harisov. He published\nthis in 2008 and outlined the main principles of HTML/CSS development which is known as BEM nowadays. We can say\nthat was the moment BEM started being used in Russia and neighbouring countries. As for English-speaking developers, they\nlearned about BEM only in 2012 from [my article in\nSmashingMagazine](http://www.smashingmagazine.com/2012/04/16/a-new-front-end-methodology-bem/). Then, as you might\nknow, [Harry Roberts](http://csswizardry.com/about/) caught sight\nof that and thanks to his publications BEM became known to the rest of the world.\n\nThus, 4 years passed since the technology was released until a typical English-speaking web developer got a chance to learn about it. This could have been enough time for a technology to mature and slowly die.\n\nNo doubt, a better option would be to make it available back in 2008. I suppose that modular trend on the web would have started earlier and we would have got the results faster. Today we\nwould use Web Components (they implement some component ideas of BEM) everywhere (and for a long time, already).\n\nWith all this in mind, I decided to dedicate some of my free time to publish translations on my blog.\nSo the translated articles on [Ymaps modules](/en/issues/ym-modular-system) and\n[BEML](/en/issues/beml-html-preprocessor) were published. I also had more articles in the queue for translation. Reading\na lot of developer blogs in Russian, I realized that a lot of interesting content is still being produced. \"Is this for Russia only?\" I asked myself.\n\nImagine all these new approaches, libraries, and frameworks that exist today all over the world!.. but you will never\nlearn them because their authors publish in Arabic, Spanish, Japanese or other languages you do not speak.\n\nNevertheless, we frontend developers have a wonderful community. Open source culture\nand technologies like GitHub enable us to help each other and get better results together. To contribute, one does not have to be an expert. For example, many products get their documentation improved just with the help of people who like the project.\n\nThis encouraged me to create a collaboration web site for translating frontend articles from local languages into English.\n\nThe project is called **Frontend Babel** and here is the URL: [http://frontendbabel.info](http://frontendbabel.info).\nTechnically, it is a statically generated blog (thanks to DocPad). Any person can take it and run a local copy, then add\na translated article and submit a pull request into the original source.\n\n- [About the project](http://frontendbabel.info/about/)\n- [Repository on GitHub](https://github.com/frontendbabel/frontendbabel.github.com)\n- [How to contribute](http://frontendbabel.info/how-to-contribute)\n\nThe first couple of articles were already translated by [Max Shirshin](https://www.google.com/+MaxShirshin). These are:\n\n- an interesting [post about web page rendering by Alexander\n  Skutin](http://frontendbabel.info/articles/webpage-rendering-101)\n- an awesome [article about graphical interface by Danil\n  Kovchy](http://frontendbabel.info/articles/graphical-interface)\n\nYou can already share these links with your English-speaking colleagues :-)\n\nMax and I have plans to translate more during the next weeks. I encourage all of you who knows Arabic, Japanese, Polish, French, Spanish (and any other language) to join the project and help us translate. English-speaking developers can do proofreading.\n\nTranslating into a foreign language is hard work indeed, but with the help of English-speaking people in our community, we will get the texts improved. So, if you were thinking about writing in English, this may be a good chance to start and learn.<br/>\n\nInteresting articles will attract visitors. With this, both an author and a translator get more attention on the web and establish new proffesional contacts throught their websites and social networks.\n\nAlways remember: a contribution to an open source project can be small, but it is always appreciated! Here are just\nsome ideas on what you can do:\n\n- [Add new source articles into our task\n  queue](https://github.com/frontendbabel/frontendbabel.github.com/issues/new)<br/>\n  If you know an interesting article worth to be published, create an issue about it. So another\n  contributer can grab this task and translate it.\n- [Push new translations](http://frontendbabel.info/how-to-contribute#push-new-translation)<br/>\n  Find a nice article in a language you know, translate it into English and publish on this website.\n- **Tell friends about the project**<br/>\n  Mentioning this project in social networks and your blog posts you can involve people from\n  all over the world!\n- Fix English in the texts<br/>\n  If you spot a grammatical error, you can edit an article (there is a link to an editor below) and submit\n  a pull request.\n- Propose site changes<br/>\n  Suggest what can be improved on this web site by adding your ideas to [the list of\n  issues](https://github.com/frontendbabel/frontendbabel.github.com/issues?labels=%40+Translation&state=open).\n- [Grab an issue to do](https://github.com/frontendbabel/frontendbabel.github.com/issues?labels=&page=1&state=open)<br/>\n\nYour contributions will help improve this project a lot!\n","excerpt":"My Russian-speaking colleagues indeed know the \"HTML/CSS…","fields":{"slug":"en/posts/frontend-babel-alpha/","readingTime":{"minutes":4.195}},"frontmatter":{"title":"The so different frontend community and how we deal with it","link":null,"date":"30 June 2014","cover":null}}},{"node":{"body":"\n<div data-excerpt>\n\nAs a mobile apps user you may be already familiar to drawers.\nThey are quite popular solution for a side menu. Using `Steroids`\nHTML5/JavaScript framework for hybrid mobile applications, you\ncan bring such an interface solution into your product very easy.\n\n</div>\n\nThe usage of drawers explained here is demonstrated in the [Steroids\nKitchensink](https://github.com/AppGyver/kitchensink) open source application.\nThis is now being developed set of most useful examples for Steroids.\nAs the application is constantly changing, I will freeze the code examples\nat [28 May 2014](https://github.com/AppGyver/kitchensink/tree/ceacb0ea80799b1d81454e2e966b553b807fbadc).\n\nTo explore the application in your mobile device or in a\nsimulator clone the repository and run the project. You may need some information\nabout how to start Steroids projects. That can be learned from tutorials:\n\n- [Installing\n  Steroids](https://academy.appgyver.com/categories/1-setup-and-getting-started/contents/1-installing-steroids)\n- [Hello World application](https://academy.appgyver.com/categories/1-setup-and-getting-started/contents/2-hello-world)\n\nOr from my recent article about [HTML5 mobile apps with native UI on\nSteroids](/en/posts/html5-mobile-app-width-native-ui/).\n\nOnce run the project you will see a page with a list of examples\nand a navigation bar.\n\n<img class=\"article__image\" src=\"http://img-fotki.yandex.ru/get/9652/14441195.32/0_8477d_3b6d66a5_L.png\" width=\"282\" height=\"500\" border=\"0\"/>\n\nThe button to teh left of a menu bar opens a side menu. But before we start to\nstudy side drawers let's look at how this button is shown.\n\nThe initial view is coded in [`app/views/example/index.html`](https://github.com/AppGyver/kitchensink/blob/ceacb0ea80799b1d81454e2e966b553b807fbadc/app/views/example/index.html).\nThis is an angular view with directives for the list and for the navigation bar.\n\n```html\n<div ng-controller=\"IndexCtrl\">\n  <navigation-bar title=\"Steroids Kitchensink\">\n    <left-button icon=\"/vendor/icons8/menu-32\" onTap=\"showMenu()\"></left-button>\n  </navigation-bar>\n  ...\n</div>\n```\n\nThe `navigation-bar` directive is custom and described in [`app/directives/navigationBar.coffee`](https://github.com/AppGyver/kitchensink/blob/ceacb0ea80799b1d81454e2e966b553b807fbadc/app/directives/navigationBar.coffee).\nUsing such a directive rather than `steroids.view.navigationBar` helpers at every page is\nmore useful for the applications with many views.\n\nIndeed inside the directive the same helpers are used. But declaring navigation bar\ntitle and buttons in the view makes our programmers lifes a little bit\neasier.\n\nHere the navigation bar titled \"Steroids Kitchensink\" contains a \"hamburger\"\nmenu button which responds to the tapping with calling `showMenu` methods of\nthe corresponding controller.\n\nThis controller is coded in [`app/controllers/example.coffee`](https://github.com/AppGyver/kitchensink/blob/ceacb0ea80799b1d81454e2e966b553b807fbadc/app/controllers/example.coffee).\nAs you can see, the `showMenu` method is pretty short.\n\n```coffee\n$scope.showMenu = ()->\n  steroids.drawers.show {\n    edge: steroids.screen.edges.LEFT\n  }\n```\n\nIt uses the drawers `show` method and slide the initial view to\nthe right which uncovers the menu view.\n\nOf course, the code needs to know what is the view we mean by 'left'.\nWe have to provide it with such a knowledge declaring the list of drawers\nin the [`config/application.coffee`](https://github.com/AppGyver/kitchensink/blob/ceacb0ea80799b1d81454e2e966b553b807fbadc/config/application.coffee#L39)\nconfiguration file.\n\n```coffee\nsteroids.config.drawers =\n  left:\n    id: \"sidemenu\"\n    location: \"http://localhost/views/sidemenu/index.html\"\n    showOnAppLoad: false\n    widthOfDrawerInPixels: 250\n  options:\n    centerViewInteractionMode: \"Full\"\n    closeGestures: [\"PanNavBar\", \"PanCenterView\", \"TapCenterView\"]\n    openGestures: [\"PanNavBar\", \"PanCenterView\"]\n    showShadow: true\n    stretchDrawer: true\n    widthOfLayerInPixels: 0\n```\n\nHere the menu view file and some parameters. You can learn about\nwhat they mean from a special tutorial about [configuring drawers](https://academy.appgyver.com/categories/3-user-interface-and-design/contents/98-configuring-drawers-on-app-load).\n\nThis will make the sidemenu shown.\n\n<img class=\"article__image\" src=\"http://img-fotki.yandex.ru/get/9766/14441195.32/0_8477e_dbe7889e_L.png\" width=\"282\" height=\"500\" border=\"0\"/>\n\nTo make it look like in the picture you need to provide a\ncorresponding view with the list of menu items. Here it is defined\nin [`app/views/sidemenu/index.html`](https://github.com/AppGyver/kitchensink/blob/ceacb0ea80799b1d81454e2e966b553b807fbadc/app/views/sidemenu/index.html).\nThis is pretty similar to the list of examples in the initial view. To make it function\nwe provide:\n\n- a list of items and the corresponding view in [`www/data/sidemenu.json`](https://github.com/AppGyver/kitchensink/blob/ceacb0ea80799b1d81454e2e966b553b807fbadc/www/data/sidemenu.json);\n- data model in [`app/models/sidemenu.js`](https://github.com/AppGyver/kitchensink/blob/ceacb0ea80799b1d81454e2e966b553b807fbadc/app/models/sidemenu.js);\n- controller in [`app/controllers/sidemenu.coffee`](https://github.com/AppGyver/kitchensink/blob/ceacb0ea80799b1d81454e2e966b553b807fbadc/app/controllers/sidemenu.coffee).\n\nFrom the drawers perspective the most important piece of code\nto study is the controller. It says to hide the opened drawer if you\ntap the currently active menu item. Opening other menu items goes\ndifferently; it replaces the current central view with some animation.\n\n```coffee\nif item.active\n  steroids.drawers.hide {}\nelse\n  webView = new steroids.views.WebView {\n    id: item.id,\n    location: item.url\n  }\n  steroids.drawers.hide {\n    center: webView\n  }\n```\n\nHiding the currently opened drawer with `steroids.drawers.hide` simply\ngets back the previously shown central view.\n\nIf you want to show a different page, you would also use `steroids.drawers.hide` but\nwith an additional `center` parameter to pass the needed view. This view has to be\ncreated in advance with `steroids.views.WebView`.\n\nBesides, such a view must be configured as preloaded in [`config/application.coffee`](https://github.com/AppGyver/kitchensink/blob/ceacb0ea80799b1d81454e2e966b553b807fbadc/config/application.coffee#L31).\n\n```coffee\nsteroids.config.preloads = [\n  {\n    id: \"settings\"\n    location: \"http://localhost/views/settings/index.html\"\n  }\n]\n```\n\nThus, with tapping on the _Settings_ menu item you will get the settings\npage shown.\n\n<img class=\"article__image\" src=\"http://img-fotki.yandex.ru/get/9667/14441195.32/0_8477f_2aafe347_L.png\" width=\"282\" height=\"500\" border=\"0\"/>\n\nThis page is empty yet. The upcoming posts will fill it in with something\ninteresting. Stay tuned :-)\n","excerpt":"The usage of drawers explained here is demonstrated in the Steroids Kitchensink open source application. This is now being developed set of most useful examples for Steroids. As the application is constantly changing, I will freeze the code examples at 28 May 2014. To explore the application in your mobile device or in a simulator clone the repository…","fields":{"slug":"en/posts/steroids-drawers/","readingTime":{"minutes":3.495}},"frontmatter":{"title":"Using side drawers in mobile apps on Steroids.js","link":null,"date":"09 June 2014","cover":null}}},{"node":{"body":"\n<div data-excerpt>\n\nLet me present a stub for **docpad-run** project with\n**bem-built** static assets. If you ever wanted to be\na generic blog holder equiped with nice and neat static\nfiles, here we go.\n\n</div>\n\n## How to start\n\nYou need install the docpad first. Follow their [Installation Guide](http://docpad.org/docs/install).\n\nThen, the installation of the blog is super short and easy. Clone, fork or\ncopy from the [docpad-bem-stub repository](https://github.com/varya/docpad-bem-stub).\nThen, go though the 3 installation steps:\n\n```bash\nnpm install\n./node_modules/bower-npm-install/bin/bower-npm-install\ndocpad run\n```\n\nWith these 3 steps you will get:\n\n- a local server with a generic docpad blog;\n- [bem-core](http://bem.info/libs/bem-core/2.2.0/) and [bem-components](http://bem.info/libs/bem-components/v2/)\n  libraries of reusable CSS/JavaScript/templates code;\n- fully tuned static-build instructions which run on changes\n  in your source code;\n- initial blog structure.\n\n## How to write\n\nIn the given structure you can write either pages or blog posts.\nThe posts are listed in the index page. Once you added a new\nitem, you can see it in this list and navigate to its page;\nthe docpad rebuilds from source automatically.\n\nPlace the pages as `*.html.md` files into `src/documents/pages`\ndirectory. The posts are kept into `src/documents/posts`.\n\n## How to develop statics\n\nThe statics is developed with [BEM](http://bem.info/).\nYou can get CSS and JavaScript files for your pages in\n`desktop.bundles` directory. The pages are built with blocks\nfrom `desktop.blocks` folder.\n\nThe rebuild process for statics runs under docpad server.\n\nSometimes you may prefer to develop static pages separately.\nFor this run\n\n```\n./node_modules/enb/bin/enb server\n```\n\nYou will get another server which rebuilds statics. It\nproduces static html files from `*.bemjson.js` files in\n`desktop.bundles`. You can develop the layout inserting\njson there and providing `BEMHTML` templates for the\ncorresponding block. Find the documentation about `BEMHTML`\nhere:\n\n- [BEMHTML quick start](http://bem.info/libs/bem-core/2.2.0/templating/intro/)\n\nFor the same blocks you can provide `*.css` and `*.js` files\nand get them built into pages.\n\n## How to publish\n\nThe blog is tuned to be deployed on GitHub. Thus, your\nrepository has to be named as `<username>.github.com`. You\ncan develop in its `source` branch. For deploying on\n`<username>.github.io` host run this command:\n\n```bash\ndocpad deploy-ghpages\n```\n\nThis will create `master` branch of the repository whose\nsource is linked to the host.\n\nYou can also attach your own domain to the blog like I did.\nAlso, it is possible to host your blog in differently named\nrepository. However this will make you to provide changes\non `docpad.coffee` configuration file.<br/>\nStudy [Github Pages](https://pages.github.com/) to learn more.\n\n## Why Docpad?\n\nThis blog had been running on Jekyll for a while. This was an\nacceptable soltuion for a quick start. However with the growth\nof the posts base I started to suffer from not very fast\nrebuilds. Also, sometimes providing changes into the blog\nlayout was hard, mostly due to the limitations of `liquid`\ntemplates.\n\nI've decided that [Docpad](http://docpad.org/) should be much\nbetter alternative. It is served as an npm package, possible to\nbe extended with plugins and has an active fast-growing\ndevelopers community.\n\nThe `docpad-bem-stub` gives you initial structure, from which\nyou already can write and publish. If you want to provide changes\ninto the build process, modify the templates or extend with\nplugins, [learn at Docpad website](http://docpad.org/).\n\nMoreover, [Stackoverflow](http://stackoverflow.com/) indeed already\nhas an answer to almost all the questions you have. If not, create a new\none.\n\n## Why BEM?\n\nBEM is a very flexible modular solution for frontend which\nenables to develop reusable CSS and JavaScript components. Plus, some code\ncan be taken from their open source libraries.\n\nYou can learn a lot about BEM from [my articles and talks](/en/content)\nor at the [official BEM site](http://bem.info/).\n\n## Inside about\n\nAbove I described all you need to know for using your blog. Below there\nare a little more technical details on what is behind.\n\n### ENB\n\nI use [enb](https://github.com/enb-make/enb) for building pages with block\ncomponents. This solution is preferable to bem-tools because of it is much\nfaster. When rebuilding pages on every change, this is sensetive.\n\n### i-bem.js and modules\n\nI personally love that this solution brings `i-bem.js` library to the\nproject. Hope to demonstrate its amazing capabilities here in near future.\nBut before I stuff my blog with complex JavaScript components, you\ncan see some examples and very detailed explanations in [Step-by-step tutorial on\ni-bem.js](http://bem.info/tutorials/bem-js-tutorial/).\n\nAnother JavaScript feature you can enjoy is [YM modular system](/en/issues/ym-modular-system).\nThese are JavaScript modules with asynchronious resolving.\n\n### BEMHTML\n\nAs mentioned above, `BEMHTML` is a templating solution. Being JavaScript-based,\nthese templates can be applied on both server and client side. There are\na couple of documents for a deeper dive into it here:\n\n- [BEMHTML templates description](http://bem.info/libs/bem-core/2.2.0/templating/rationale/)\n- [BEMHTML tutorial](http://bem.info/libs/bem-core/2.2.0/templating/reference/)\n\n### bem-core and bem-components\n\nBEM is also nice for a possibility to borrow the components from libraries.\n`docpad-bem-stub` uses 2 now available libraries:\n\n- [bem-core](http://bem.info/libs/bem-core/2.2.0/)\n- [bem-components](http://bem.info/libs/bem-components/v2/)\n\nI hope to see more in the future.\n\n## What next?\n\nIndeed everything can be improved. These are my thoughts on how\nto continue.\n\n- detect changes in static files<br/>\n  Docpad watches over the changes in `src` directory. This means that\n  when developing statics you will not get the rebuild. I am thinking\n  on running `enb server` under `docpad run` and proxy. This maybe\n  better than watch over a lot of files in `desktop.blocks`, `desktop.bundles`\n  and all the libraries.\n- css preprocessors<br/>\n  The blog styles are in pure CSS now. But with a little\n  change into enb configuration we can learn it to build with\n  preprocessors.\n- fresh design<br/>\n  Creating a simple layout is the most difficult design task. Don't you agree?\n- nice initial posts<br/>\n  This is even harder than the desing tasks but I think the users feel much\n  more comfortable when getting a blog with predefined texts.\n\nIf you feel your oats and want to do your bit, fork [the repository](https://github.com/varya/docpad-bem-stub)\nand start :-)\n","excerpt":"How to start You need install the docpad first. Follow their Installation Guide.\n\nThen, the installation of the blog is super short and easy. Clone, fork or copy from the docpad-bem-stub repository. Then, go though the 3 installation steps:\n\nWith these 3 steps you will get:\n\na local server with a generic docpad blog; bem-core and bem-components libraries of reusable CSS/JavaScript/templates code; fully tuned static-build…","fields":{"slug":"en/posts/docpad-with-bem-taste/","readingTime":{"minutes":4.795}},"frontmatter":{"title":"Docpad with the taste of BEM","link":null,"date":"04 June 2014","cover":null}}},{"node":{"body":"\n<div data-excerpt>\n\nRecently I attended [Front Trends 2014](http://2014.front-trends.com/) in Warsaw.\nThis is an awesome conference which you should (no, definitely have to!) attend\nin 2015. Besides incredible main programm Front Trends provides a set of Lighting Talks.\nThis year I was a part of it presenting [Steroids](http://www.appgyver.com/steroids),\na framework and a toolkit for developing HTML5 mobile apps. If you did not have\na chance to hear it, this offline text presentation is for you.\n\n</div>\n\n<div class=\"slide\">\n  <iframe class=\"slide__frame\" scrolling=\"no\"\n    src=\"http://varya.me/start-with-steroids/?full#Cover\">\n  </iframe>\n</div>\n\nBeing an absolute newbie in developing mobile apps I decided to showcase\nSteroids because it enables me to create pretty native-looking application\nand smoothly go through the developing and releasing flow in a few minutes.\n\n<div class=\"slide\">\n  <iframe class=\"slide__frame\" scrolling=\"no\"\n    src=\"http://varya.me/start-with-steroids/?full#summary\">\n  </iframe>\n</div>\n\nThe Steroids toolkit is a CLI; it brings Steroids JavaScript framewrok into\nyour project and takes care of building an app, developing flow, debugging\nand releasing. It is based on NodeJs, so you have to have it installed.\n\n<div class=\"slide\">\n  <iframe class=\"slide__frame\" scrolling=\"no\"\n    src=\"http://varya.me/start-with-steroids/?full#3\">\n  </iframe>\n</div>\n\nThe required version for now is `0.10.25`. Follow the [Installation and Setup\nGuide](http://academy.appgyver.com/categories/1/contents/1).\n\n<div class=\"slide\">\n  <iframe class=\"slide__frame\" scrolling=\"no\"\n    src=\"http://varya.me/start-with-steroids/?full#4\">\n  </iframe>\n</div>\n\nYour very first start would be creating a project using `steroids create`\ncommand. Then, typing `steroids connect --watch` in the gotten project\nfolder launches steroids process. The `--watch` flag as you can guess tells\nSteroids to watch over the file changes, rebuild the app and push the results\nto the connected devices.\n\nYou can connect a physical smartphone to the project. After running\n`steroids connect` you get a web page with a QR code opened in your browser.\nUse `AppGyver Scanner` to read this QR code, it will bring the application\ninto your phone and keep it connected.\n\n<div Style=\"text-align:center;\">\n<a href=\"https://itunes.apple.com/us/app/appgyver-scanner/id575076515?mt=8\"\ntarget=\"_blank\"><img alt=\"Appstore\" class=\"appstore_icon\"\nsrc=\"https://share.appgyver.com/assets/appstore-df950585b54bd081a7826913fc715cd4.png\"/></a>\n<a href=\"https://play.google.com/store/apps/details?id=com.appgyver.android&amp;feature=nav_result#?t=W251bGwsMSwxLDMsImNvbS5hcHBneXZlci5hbmRyb2lkIl0.\"\ntarget=\"_blank\"><img alt=\"Googleplay\" class=\"appstore_icon\"\nsrc=\"https://share.appgyver.com/assets/googleplay-2cef882d62e402fbdbfe8cdac5794069.png\"/></a>\n</div>\n\nAnother way to watch the app is to bring it into a desktop simulator.\nTo do this, type `simulator` in the terminal wich launched\n`steroids connect`.\n\nYou can change the application source files. E.g. edit a text\nin `www/index.html` and make sure that the app in the connected device\nor in the simulator has been changed.\n\nTo provide more powerful changes you can learn from the examples\nand tutorials. Run `steroids generate` command and get the relevant\ncode.\n\n<div class=\"slide\">\n  <iframe class=\"slide__frame\" scrolling=\"no\"\n    src=\"http://varya.me/start-with-steroids/?full#5\">\n  </iframe>\n</div>\n\nYou can learn from this code examples, from [tutorials](http://academy.appgyver.com/)\nand [API Docs](http://docs.appgyver.com/en/stable/index.html).\nBelow I demonstrated some of the features which enable\nto use _native UI_.\n\n<div class=\"slide\">\n  <iframe class=\"slide__frame\" scrolling=\"no\"\n    src=\"http://varya.me/start-with-steroids/?full#examples-list\">\n  </iframe>\n</div>\n\nLet us start with showing the native tabs.\n\n<div class=\"slide\">\n  <iframe class=\"slide__frame\" scrolling=\"no\"\n    src=\"http://varya.me/start-with-steroids/?full#7\">\n  </iframe>\n</div>\n\nIn the `config/application.coffee` file you can find a commented\nexample of defining a list of tabs with their icons and\nlocations (URLs) they lead to.\n\nIn my application I created 3 tabs. They are for\n\n- index.html\n- notificationExample.html\n- knowledge.html\n\n```coffee\nsteroids.config.tabBar.enabled = true\nsteroids.config.tabBar.tabs = [\n  {\n    title: \"Index\"\n    icon: \"icons/pill@2x.png\"\n    location: \"http://localhost/index.html\"\n  },\n  {\n    title: \"Notifications\"\n    icon: \"icons/bell.png\"\n    location: \"http://localhost/notificationExample.html\"\n  },\n  {\n    title: \"Knowledge base\"\n    icon: \"icons/coding.png\"\n    location: \"http://localhost/knowledge.html\"\n  }\n]\n```\n\nPlace the pages into `www` directory and keep them empty yet.\nDo not forget the icons. You can borrow the whole [icon\nfolder](https://github.com/varya/steroids-fronttrends2014/tree/master/www/icons).\n\nAfter making the change wait for rebuild and check.\n\n<div Style=\"text-align:center;\">\n<img src=\"http://img-fotki.yandex.ru/get/9088/14441195.32/0_84262_ae854cb8_orig.png\" width=\"340\" height=\"89\" border=\"0\" title=\"\" alt=\"\"/>\n</div>\n\nNext, we can play with notifications.\n\n<div class=\"slide\">\n  <iframe class=\"slide__frame\" scrolling=\"no\"\n    src=\"http://varya.me/start-with-steroids/?full#8\">\n  </iframe>\n</div>\n\nPlace these buttons inside the `<body>` container of the\n`www/notificationExample.html` file.\n\n```html\n<button class=\"button button-block\" ontouchend=\"showAlert()\">\n  Show alert dialogue\n</button>\n<button class=\"button button-block\" ontouchend=\"showConfirm()\">\n  Show confirm dialogue\n</button>\n<button class=\"button button-block\" ontouchend=\"showPrompt()\">\n  Show prompt dialogue\n</button>\n<button class=\"button button-block\" ontouchend=\"vibrate()\">\n  Vibrate the device\n</button>\n```\n\nAs you can see, they run different JavaScript functions on\ntouch. To finish the page you need to define these functions\nin the `<head>` or linked `*.js` file. Each function demonstrates\na kind of notification which are:\n\n- `navigator.notification.alert`\n- `navigator.notification.confirm`\n- `navigator.notification.prompt`\n- `navigator.notification.vibrate`\n\nBorrow the JavaScript code from [my repo](https://github.com/varya/steroids-fronttrends2014/blob/master/www/notificationExample.html#L15).\n\nNow you can navigate to this page using the tabs and try\neach type of notification with tapping.\n\nAnother native element could be a button in the application navigation\nbar.\n\n<div class=\"slide\">\n  <iframe class=\"slide__frame\" scrolling=\"no\"\n    src=\"http://varya.me/start-with-steroids/?full#9\">\n  </iframe>\n</div>\n\nThe navigation bar can be modified with JavaScript on Steroids.\nIf you want it to be the same across all the application pages,\nprovide this JavaScript in the `www/javascripts/application.js` file\nwhich is linked to all the `*.html` files.\n\n```js\nvar loginButton = new steroids.buttons.NavigationBarButton();\nloginButton.title = \"the Button\";\n\nloginButton.onTap = function () {\n  navigator.notification.alert(\n    \"You tapped the button!\",\n    function () {},\n    \"the Alert\",\n    \"I did!\"\n  );\n};\n\nsteroids.view.navigationBar.update({\n  buttons: {\n    right: [loginButton],\n  },\n});\n```\n\nThis will bring the button to the right side of the\nnavigation bar. Tapping on it you can see a notification; one\nof those you studied recently.\n\n<div Style=\"text-align:center;\">\n<img src=\"http://img-fotki.yandex.ru/get/9115/14441195.32/0_84264_7f27d435_L.png\" width=\"282\" height=\"500\" border=\"0\" title=\"\" alt=\"\"/>\n</div>\n\nThe last of native UI examples in this app is showing\nmodal views.\n\n<div class=\"slide\">\n  <iframe class=\"slide__frame\" scrolling=\"no\"\n    src=\"http://varya.me/start-with-steroids/?full#10\">\n  </iframe>\n</div>\n\nAdd this button into `www/index.html`:\n\n```html\n<a class=\"button button-block\" ontouchend=\"showModal()\">Open modal</a>\n```\n\nAnd code `showModal` method to open a view as a modal.\n\n```js\nfunction showModal() {\n  var webView = new steroids.views.WebView(\"/views/modalExample/show.html\");\n  steroids.modal.show(webView);\n}\n```\n\nThe related view is a piece of html, which you should place into\n`app/views/modalExample/show.html`. BTW, it has to have an interface\nelement closing the view. To make the process faster, pick up the\n[code from the application repo](https://github.com/varya/steroids-fronttrends2014/blob/master/app/views/modalExample/show.html).\n\nWith this and [other UI features](http://docs.appgyver.com/en/stable/steroids_Steroids%20Native%20UI_index.md.html#Steroids%C2%A0Native%C2%A0UI)\nyou can build a mobile interface which looks absolutely native for a\ndevice where you application runs.\n\nOnce finished coding (or even in process) you may need to show the\napplication to your friend, client or Mom.\n\n<div class=\"slide\">\n  <iframe class=\"slide__frame\" scrolling=\"no\"\n    src=\"http://varya.me/start-with-steroids/?full#sharing\">\n  </iframe>\n</div>\n\nYou can use the QR code from the beginning of our session which can\nbring your application to any any device directly from your computer.\nHowever this only will work if them both are connected to the same\nnetwork.\n\nIf you want to share with someone remotely, deploy your app into the cloud.\nThe `steroids deploy` command serves for it. As a result you get\na page (also with a QR code) which can be scanned with AppGyver Scaner on\na phone and thus your pal get the same app from the cloud.\n\nAll your applications in the cloud can be shared, tuned and built with\nweb interface at [cloud.appgyver.com](https://cloud.appgyver.com/applications).\n\nFrom there you also push the app into AppStore and GooglePlay.\n\n<div Style=\"text-align:center;\">\n<img src=\"http://img-fotki.yandex.ru/get/9062/14441195.32/0_84265_d03d686e_orig.png\" width=\"500\" height=\"327\" border=\"0\" title=\"\" alt=\"\"/>\n</div>\n\nThis is easy. As easy that a newbie can develop an app in a few minutes\nand show you the how-to.\n\n<div class=\"slide\">\n  <iframe class=\"slide__frame\" scrolling=\"no\"\n    src=\"http://varya.me/start-with-steroids/?full#links\">\n  </iframe>\n</div>\n\nYou can learn more about Steroids and Cordova (Steroids is based on PhoneGap)\nat the [AppGyver Academy](http://academy.appgyver.com/) where you find:\n\n- detailed tutorials,\n- documentation,\n- big community of devs.\n\nAnd, of course, you can read [this blog](/en/posts/). I promise to share my next findings\nregarding Steroids soon :-)\n","excerpt":"Being an absolute newbie in developing mobile apps I decided to showcase Steroids because it enables me to create pretty native-looking application and smoothly go through the developing…","fields":{"slug":"en/posts/html5-mobile-app-width-native-ui/","readingTime":{"minutes":5.865}},"frontmatter":{"title":"HTML5 mobile apps with native UI on Steroids","link":null,"date":"26 May 2014","cover":null}}},{"node":{"body":"\n<div data-excerpt>\n\nThe `bem-core` library goes futher and there already is `2.0.0` version\navailable. This blog was safely switched to the new major version with\n[some diff to the\ncode](https://github.com/varya/varya.github.com/commit/f21f810b7cb4e16206ef3d088a8b2c38b615f8f3).\nNow so can do you. Careful examination of the version changelog will help you\nwith it. Look how I did this.\n\n</div>\n\nWhen a new bem library version is released its changelog is published on the\nofficial BEM website. You can examine the [list of changes for bem-core\n2.0.0](http://bem.info/libs/bem-core/2.0.0/changelog/).\n\nThe changelog is divided into 3 parts: breaking, marjor and minor changes.\n\nBreaking changes takes most of your attention. As you can see, they declare\nremoving of some basic methods as well as hosting some code in different\nrepositories. Thus, if you used some of the listed methods, the switch pushes\nyou to refactor your code a little bit.\n\nThe major changes are less critical but might case some code changes as well. In\nthis version BEM team provided [new syntax for defining the blocks in\nJavaScript](https://github.com/bem/bem-core/issues/382). This change is not\nbreaking as the old syntax still works. However it is nice to go through a small\nrefactoring and switch to the new type of module declaration keeping your code\nneat for the future.\n\nThe same goes for the [change to DOM\nhelpers](https://github.com/bem/bem-core/issues/410). With getting the context\nas a result of using those helpers you can get rid of a couple of lines per\nblock.\n\nSumming it up, switcing to the new version should be your happiest time as you\nhave a ready-made excuse to dive into refactoring.\n","excerpt":"When a new bem library version is released its changelog is published on the official BEM website. You can examine the list of changes for bem-core 2.0.0. The changelog is divided into 3 parts: breaking, marjor and minor changes.\n\nBreaking changes takes most of your attention. As you can see, they declare removing of some basic methods as…","fields":{"slug":"en/posts/switching-to-bem-core-2/","readingTime":{"minutes":1.285}},"frontmatter":{"title":"Switching to bem-core#v2","link":null,"date":"16 April 2014","cover":null}}}]}},"pageContext":{"limit":6,"skip":36,"pageCount":10,"currentPage":7}},"staticQueryHashes":[],"slicesMap":{}}