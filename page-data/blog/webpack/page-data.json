{"componentChunkName":"component---src-templates-tag-index-js","path":"/blog/webpack/","result":{"data":{"posts":{"edges":[{"node":{"body":"\n<div data-excerpt>\n\nLinking web fonts in SASS when using Webpack might not work as expected. The most common problem is incorrect URL resolving if a font is linked with `url()`. This post covers this and the following traps on your way to nice fonts on your webpage.\n\n</div>\n\n<div class=\"small\" markdown=\"1\">\n\n<Image caption=\"Image source: https://processtypefoundry.com/blog/2011/02/five-new-webfonts/\">\n![](thumb.png)\n</Image>\n\n</div>\n\n## Load fonts\n\nInstruct your webpack how to load font with `file-loader`:\n\n```javascript\n{\n    test: /\\.(ttf|eot|woff|woff2|svg)$/,\n    use: {\n        loader: 'file-loader',\n        options: {\n            name: '[name].[ext]',\n            outputPath: 'fonts/'\n        },\n    },\n},\n```\n\nMore info about loading fonts options on [SurviveJs project](https://survivejs.com/webpack/loading/fonts/).\n\n## Resolve URLs\n\nIf you use SASS, you must face a problem of resolving URLs. Let's say your Webpack configuration for processing SASS files is like the following.\n\n```javascript\n{\n    test: /\\.scss$/,\n    loaders: [\n        'style-loader',\n        'css-loader',\n        'sass-loader',\n    ]\n},\n```\n\nEverything looks normal but you still get the following error for every single SASS file.\n\n```bash\nERROR in ./src/styles.scss (./node_modules/css-loader/dist/cjs.js??ref--5-1!./node_modules/resolve-url-loader!./node_modules/sass-loader/dist/cjs.js??ref--5-3!./src/styles.scss)\nModule not found: Error: Can't resolve './open-sans-v10-latin-regular.woff' in '/Users/varya/WebDev/my-pet-project'\n    @ ./src/styles.scss (./node_modules/css-loader/dist/cjs.js??ref--5-1!./node_modules/resolve-url-loader!./node_modules/sass-loader/dist/cjs.js??ref--5-3!./src/styles.scss) 19:42-87\n```\n\nIn this case, you need to add `resolve-url-loader` because SASS itself does not do url rewriting.\n\n```javascript\n{\n    test: /\\.scss$/,\n    loaders: [\n        'style-loader',\n        'css-loader',\n        'resolve-url-loader', // add this before sass-loader\n        'sass-loader',\n    ]\n},\n```\n\nFor more information, you can check [Problems with url(...)](https://webpack.js.org/loaders/sass-loader/#problems-with-url) in Webpack official documentation.\n\n## SVG, I caught you!\n\nNote that the above configuration also applies to SVG files. You may have other SVG files that you do not want to process as fonts. In this case, do not forget to use `include` and `exclude` options.\n\nFor the fonts, include only the files from a directory where you keep fonts:\n\n```javascript\n{\n    test: /\\.(ttf|eot|woff|woff2|svg)$/,\n    use: {\n        loader: 'file-loader',\n        include: path.resolve(__dirname, './src/webfonts'),\n        options: {\n            name: '[name].[ext]',\n            outputPath: 'fonts/'\n        },\n    },\n},\n```\n\nFor SVG illustrations, exclude the font folder:\n\n```javascript\n{\n    test: /\\.svg$/,\n    exclude: path.resolve(__dirname, './src/webfonts'),\n    use: ['@svgr/webpack'],\n},\n```\n\n## Production: resolve URLs\n\nNow everything works in the development environment, but with production webpack configuration you must get the familiar error for every single SASS file.\n\n```bash\nERROR in ./src/styles.scss (./node_modules/css-loader/dist/cjs.js??ref--5-1!./node_modules/resolve-url-loader!./node_modules/sass-loader/dist/cjs.js??ref--5-3!./src/styles.scss)\nModule not found: Error: Can't resolve './open-sans-v10-latin-regular.woff' in '/Users/varya/WebDev/my-pet-project'\n    @ ./src/styles.scss (./node_modules/css-loader/dist/cjs.js??ref--5-1!./node_modules/resolve-url-loader!./node_modules/sass-loader/dist/cjs.js??ref--5-3!./src/styles.scss) 19:42-87\n```\n\nFor production mode, you need to add `devtool: 'source-map'` to the root of your Webpack configuration. This is for the `resolve-url-loader` to work correctly also when building for production.\n\n## Turn off ES modules\n\nBy default, file-loader generates JS modules that use the ES modules syntax. But in the fonts case it would give you `src: url([object Module]);`. To avoid it, use `esModule: false,`\n\n```javascript\n{\n    test: /\\.(ttf|eot|woff|woff2|svg)$/,\n    use: {\n        loader: 'file-loader',\n        include: path.resolve(__dirname, './src/webfonts'),\n        options: {\n            name: '[name].[ext]',\n            outputPath: 'fonts/',\n            esModule: false,\n        },\n    },\n},\n```\n\n![](./enjoy.png)\n","excerpt":"Load fonts Instruct your webpack how to load font with :\n\nMore info about loading fonts options on SurviveJs project.\n\nResolve URLs\n\nIf you use SASS, you must face a problem of resolving URLs. Let's say your Webpack configuration for processing SASS files is like the following.\n\nEverything looks normal but you still get the following error for every single SASS file.\n\nIn this case, you need to add  because SASS itself does not do url rewriting.\n\nFor more information, you can check Problems with url(...) in Webpack official documentation.\n\nSVG, I caught youâ€¦","fields":{"slug":"blog/webfonts-with-sass-and-webpack/"},"frontmatter":{"title":"Using web fonts with SASS and Webpack","date":"12 May 2020","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/8b7fb31084ad1663709e418f8b101db6/756d4/thumb.png","srcSet":"/static/8b7fb31084ad1663709e418f8b101db6/756d4/thumb.png 585w","sizes":"585px"},"sources":[{"srcSet":"/static/8b7fb31084ad1663709e418f8b101db6/60e92/thumb.webp 585w","type":"image/webp","sizes":"585px"}]},"width":585,"height":217}}}}}}]}},"pageContext":{"tag":"webpack","tagSlug":"webpack"}},"staticQueryHashes":[],"slicesMap":{}}