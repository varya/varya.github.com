{"componentChunkName":"component---src-templates-post-js-content-file-path-home-runner-work-varya-github-com-varya-github-com-content-posts-testpost-index-md","path":"/blog/testpost/","result":{"data":{"mdx":{"id":"80fcafd9-81a2-5085-903b-e155cd3378ba","body":"\n<div data-excerpt>\nDesign systems standardise and simplify the process of interface design and development, they bring new\n    approaches and form their own ecosystem. However, there is no solid understanding of the concepts and terms forming\n    the design systems. To solve the term inconsistency and provide structured professional language, this article\n    focuses on the vocabulary used in the design systems domain by observing a range of materials on the topic, from\n    both academic and popular sources.\n        \n</div>\n\n## Introduction\n\n<a href=\"google.com\">Test external link</a>\n<a href=\"/\">Test internal link</a>\n\nIn general, _design systems_ is a systematic approach to creating and maintaining consistent user interfaces which\ncoherently communicate the brand values and empower user experience.\n\nSimilarly to physical things, such as sewing a dress, a web application can be created not in a factory but by an\namateur. To do this, a person certainly needs some skills but a systematic approach can be out of use. The situation\nchanges if the volume of the subject increases up to the industrial level. In the same manner, when developing and\nmaintaining larger websites, in the long run, there is a need of methods and tooling which ensure the quality of the\noutput and consistency of elements across different items, decrease the costs of the production and empower in-team and\ncross-teams collaboration. In programming and management, such systematic approaches are actively produced and adopted\nby the web community. Currently, similar methodologies are being created for the design part.\n\n![](./thumb.jpg)\n\nDesign systems are meant to standardise and simplify the process of interface design and development, they bring new\napproaches and form their own ecosystem. Currently, design systems are a separate domain in the area of making web and\nmobile applications, they are interesting to apply in practice and study from a scientific perspective. However, there\nis no solid understanding of the concepts and terms forming the design systems. This issue has already been addressed in\nthe professional literature. For example, Alla Kholmatova outlines that “there isn’t a standard definition of “design\nsystem” within the web community, and people use the term in different ways” (Kholmatova, 2017). Moreover, the specific\nentities, which form the design system concept, are often understood in different ways. Sometimes, authors even use the\nsame term to address different subclasses. Such inconsistency in terms makes “hard for newcomers and experts alike to\nget the crux of the problems we are solving” (Federman, 2017).\n\nTo solve the term inconsistency and provide structured professional language, this article focuses on the vocabulary\nused in the design systems domain by observing a range of materials on the topic, from both academic and popular\nsources. By categorizing and summarizing information in the selected materials, the article outlines the key concept of\ndesign systems in the context of user interface development, introduces the main entities and observes their different\ninterpretations in the literature. Based on the summary of these interpretations, the design system sub-concepts are\norganized into a hierarchical schema and are given most suitable names.\n\n## Material selection and methods\n\nThis review article observes both popular and academic sources related to the topic. Academic sources were selected by\ntheir relevance to User Interface Design domain and by presence of keywords “pattern”, “style guide” and overall\napplicability. Popular sources were selected from highly cited public articles and blog posts by authors who often speak\non the topic at professional conferences or frequently publish materials related to the topic. These popular sources\nalso include articles and blog posts which try to provide their own categorisation and outline the building blocks of\nthe concept.\n\nThe gathered materials were examined on the presence and description of concepts and sub-concepts related to the design\nsystems. Their representation is categorised and summarised below.\n\n## Problems to solve\n\nIn the design for the web, the following problems occur most frequently:\n\n1. Inconsistent user interfaces\n1. Large costs of design\n1. Low-level multidisciplinary collaboration\n1. Non-efficient design-team work\n\n### 1. Inconsistent user interfaces\n\nIt still often happens that user interface (UI) elements are not consistent across some websites or applications. There\nare multiple reasons behind that, such as 1) similar elements being created by different designers and developers\nexperiencing lack of in-team communication, or 2) the same elements being implemented more than one time, sometimes even\nby the same person, because of lack of documentation for existing solutions, or 3) new design solutions being made\nwithout aligning with existing ones, and many other reasons. All of those lead to badly done websites and applications\nwhich fail to communicate the brand and provide a good user experience.\n\n### 2. Large costs of design\n\nMostly, the reason for user interface inconsistency mentioned above is creating same or\nsimilar things again and again without references to the work already done. Besides bad results, it also costs a lot.\n\n### 3. Low-level multidisciplinary collaboration\n\nWeb products are created by multidisciplinary teams which include\ndesigners, developers, copywriters, managers, etc. On one hand, they all are working on the same product. On the other\nhand, each of these disciplines has its own fashion barely interconnected with the others. To achieve a good level of\ncollaboration, such team needs to follow special working approaches and use appropriate and efficient tooling.\n\n### 4. Non-efficient design-team work\n\nIn larger products, many designers work on the same product. This case brings the\ncollaboration problem even down to a single-disciplinary team. This becomes especially visible on the scale. Rapidly\ngrowing companies need to scale their design teams fastly and even place them in multiple locations. Ensuring the design\nconsistency and quality when experiencing such growth is a great challenge. At the same time, the products themselves\nhave to be created “in a scalable and repeatable way” (Saarinen, 2016).\n\n## 1. The concept of design systems\n\nDesign systems is a systematic approach that offers solutions to the problems presented above.\n\nSince design systems are a yet evolving concept, the sources use different terms when addressing them. Some authors tend\nto observe design systems from a perspective of a technical solution and interpret them as collections of reusable UI\ncomponents:\n\n“A design system is a collection of reusable components, guided by clear standards, that can be assembled together to\nbuild any number of applications.” (Fanguy, 2017) “A design system is a collection of reusable components to tie whole\nproducts together” (Baskanderi, 2018)\n\nAt the same time, other authors call such collections “component\nlibraries” or “pattern libraries” and describe them only as a part of a design\nsystem. They interpret the design systems concept as more complex but have\ndifficulties to give a straightforward definition for them. Saarinen (2016)\nfocuses on the processes formed by design systems: “design systems are more\nsystematic ways to guide and leverage our collective efforts” (Saarinen, 2016). Braga partly supports this interpretation but also makes it wider by\nincluding the tools: “Design systems are basically a combination of tools and\nprocesses that will help our teams working better together” (Braga, 2017).\nAuthors of the iconic “Design Systems Handbook” introduce a design system\nthrough its function saying that it “unites product teams around a common\nvisual language” (Suarez, Anne, Sylor-Miller, Mounter, and Stanfield, 2017).\nThus, they see design systems as a set of approaches for collaborative work,\ndesign tools for providing user-friendly and brand-supportive interfaces, sets\nof methods and frameworks to bridge the gap between design and development and\npractical solutions for saving the costs.\n\nThe wide interpretation of design systems includes some sub concepts; together\nthey build a whole ecosystem. There have already been attempts to outline the\necosystem as a schema but due to lack of consistency in terms, the schemas by\ndifferent authors vary.\n\nZack Rutherford (2017) proposes a well-structured scheme (Figure 1) with a\nclear hierarchy and no interconnections. The scheme defines such subclasses as\n“building blocks”, “pattern library”, “rules” and “style guide”. Each of these\nsubclasses contains a set of terms.\n\n<Image caption=\"Figure 1. Rutherford (2017) “The structure of a Design System”\" copyright={{text: \"Source\", link: \"https://www.uxpin.com/studio/blog/design-systems-vs-pattern-libraries-vs-style-guides-whats-difference/\"}}>\n\n![Figure 1. Rutherford (2017) “The structure of a Design System”](./figure1.png)\n\n</Image>\n\nJan Toman (2017) draws a different scheme (Figure 2). Besides altered\nstructure, this scheme also uses the different words to name its components. In\nhere, the word “block” is used as a synonym for “UI component”, the library of\nthem is called “component library” (not “pattern library” as Rutherford (2017)\nproposes), and “styleguide” does not include the library but is connected to\nit.\n\n<Image caption=\"Figure 2. Jan Toman (2017) The Design System Schema”\" copyright={{text: \"Source\", link: \"https://product-unicorn.com/design-systems-style-guides-all-those-libraries-what-the-hell-is-the-difference-4c2741193fdc\"}}>\n\n![Figure 2. Jan Toman (2017) The Design System Schema](./figure2.png)<br/>\n\n</Image>\n\nNate Baldwin (2016) provides the schema (Figure 3) with many intersections and includes additional components such as\n“development standards” and “processes”.\n\n<Image caption=\"Figure 3. Nate Baldwin (2016) Design System Schema”\" copyright={{text: \"Source\", link: \"https://blog.producthive.org/anatomy-of-a-design-system-7a6b0677bf5\"}}>\n\n![Figure 3. Nate Baldwin (2016) Design System Schema](./figure3.jpeg)<br/>\n\n</Image>\n\nIn many other sources, authors do not provide schemas but operate the terms.\nThis article introduces these sub-concepts and their naming, summarize them to\nrepresent as building blocks of one bigger system and explain their\ncontribution into the UI developing current problems.\n\n## 2. Blocks of a design system\n\n### 2.1 Component\n\nThe _component_ is the most solid term of the design systems concept. It\noriginates from the development field and has the most univocal meaning.\nMultiple authors define a component from the implementation perspective, as\n“portion of reusable code, serving as building blocks for the application\ninterface” (Suarez, Anne, Sylor-Miller, Mounter, and Stanfield, 2017).\nImportant to note that represented as pieces of code, components encapsulate a\nstandalone entity that is meaningful on its own. They can be nested and\ninteract with each other, but semantically they remain equal.\n\nFrom a user perspective, components are meaningful elements of a web\napplication, for example, buttons, form inputs, dropdowns. Figure 4\ndemonstrates a dropdown as an example.\n\n<Image caption=\"Figure 4. Example of a component — dropdown UI element. Carbon Design System for IBM Cloud products”\" copyright={{text: \"Source\", link: \"http://carbondesignsystem.com/components/dropdown/code\"}}>\n\n![Figure 4. Example of a component — dropdown UI element](./figure4.png)<br/>\n\n</Image>\n<Image caption=\"Figure 5. Components\" copyright={{text: \"Source\", link: \"http://carbondesignsystem.com/components/dropdown/code\"}}>\n\n![Figure 5. Components.](./figure5.png)<br/>\n\n</Image>\n\n### 2.2 Pattern\n\nNot all the design solutions can be technically implemented as components. Some\nof them play as properties of many components, for example, paddings, colors,\ntypography, and motions.\n\nAcademic literature uses the term pattern to address these standalone design\nsolutions. This way, Granlund, Lafrenière, and Carr (2001) write that patterns\n“describe generic solutions to common problems in context” (Granlund,\nLafrenière and Carr, 2001). However, they later limit this wide definition\nsaying that a pattern should be a “formalized description of a proven concept\nthat expresses non-trivial solutions to a UI design problem” (Granlund,\nLafrenière and Carr, 2001). This defines a pattern wider than a component but\nkeeps it as something specific and objective. This view is supported in popular\nliterature by Lopes (2017), who says that “foundational elements like defined\ntext styles for headers and content, a colour palette, inputs, forms, what we\ncall patterns and components” (Lopes, 2017).\n\nFigures 6 and 7 demonstrate how a pattern can look for a designer. The exact\nrepresentation may vary depending on the design system technical\nimplementation.\n\n<Image caption=\"Figure 6. Example of a color pattern. Carbon Design System for IBM Cloud products.\" copyright={{text: \"Carbon Design System\", link: \"http://carbondesignsystem.com/style/color/swatches\"}}>\n\n![Figure 6. Example of a color pattern](./figure6.png)\n\n</Image>\n\n<Image caption=\"Figure 7. Example of a Spacing pattern. Carbon Design System for IBM Cloud products\" copyright={{text: \"Carbon Design System\", link: \"http://carbondesignsystem.com/style/spacing\"}}>\n\n![Figure 7. Example of a Spacing pattern](./figure7.png)\n\n</Image>\n\nSome authors use the term “pattern” when speaking about components. However,\nthey still face the need to distinguish solutions for repeatable UI elements\nand more general ones. One of such authors, Alla Kholmatova (2017) introduces\n_functional patterns_ as “tangible building blocks of the interface” (Kholmatova, 2017) and\n_perceptual patterns_, which she does not define but provides examples\nsuch as “tone of voice, typography, color palette, layouts, illustrations and\niconography styles, shapes and textures, spacing, imagery, interactions or\nanimations, and all the specific ways in which those elements are combined and\nused in an interface” (Kholmatova, 2017).\n\nAssuming the frequency of using the term “pattern” as a wide definition for a\nspecific user interface solution and the term “component” as code\nrepresentation of such pattern, this naming seems to be the most suitable to\nkeep further.\n\n<Image caption=\"Figure 8. Patterns\">\n\n![Figure 8. Patterns](./figure8.png)\n\n</Image>\n\n### 2.3 Component library\n\nAs described above, a component solves a specific design problem by providing a\npiece of code for rendering a specific functioning UI element, or a set of\nrelated elements. In a regular website, there are multiple components in use.\nEven a simple page with a plain form would contain different types of input\nelements, a submit button and supportive texts. Each of those entities is a\nseparate component.\n\nTo ensure the reuse of components, they should be represented as a set. Such\nset is usually called “component library” and is meant to provide\nimplementations for design solutions of the same system.\n\nIn the literature, such sets of components are sometimes also called “pattern\nlibraries” and even “design systems”. For example, Fanguy (2017) writes that “a\ndesign system is a collection of reusable components, guided by clear\nstandards, that can be assembled together to build any number of applications”\n(Fanguy, 2017).\n\n### 2.4 Pattern library\n\nHowever, many authors define pattern libraries otherwise than component\nlibraries, based on the difference between component and pattern explained\nabove. This way, a pattern library is “a subclass in the design system, this is\nthe set of design patterns for use across a company” (Rutherford, 2017).\n\nSimilarly to component libraries being collections of components, pattern\nlibraries are collections of patterns. However, due to more abstract nature of\npatterns, it is harder to visualize such collections.\n\nSte Grainer (2017) gives a comprehensive explanation of pattern libraries\nthrough their attributes. According to him, pattern libraries contain UI\ncomponents as representations of some patterns and also define use cases and\nprovide relations between the patterns (Grainer, 2017). This way, the\nperceptual patterns can be represented by their description, examples of usage\nand their connections to the other patterns.\n\nAssuming the nature of perceptual patterns the difference between a component\nlibrary and a pattern library can be identified by the presence of their\ninterconnections and rules of usage. Marco Lopes supports this point of view\nwhen describing the process of creating the pattern library: “break down an\ninterface into reusable building blocks, arrange and group them, name them,\nestablish rules between them, generate an overview of all components, and make\nthem available for the entire team to build and design with” (Lopes, 2017).\n\n<Image caption=\"Figure 9. Pattern library\">\n\n![Figure 9. Pattern library](./figure9.png)\n\n</Image>\n\n### 2.5 Visual language\n\nBoth pattern libraries and component libraries ensure the reuse of the design\nsolutions and this way increase consistency across the product. However, on the\nweb, the products are constantly being developed and through time they need new\ndesigns. Similarly to how existing design solutions ideally form a solid\nsystem, new designs should fit into this system and extend but not break its\nconsistency. To achieve that, designers have to align their new designs with\nthe existing ones.\n\nThe designers can provide new solutions, consistent to the others, in the\namateur fashion making them by analogy with the old ones. However, on the\nindustry level, producing adequate design solutions requires special methods\nand tooling. In the design systems concept, the is a subclass serving for this\npurposes. It is called a _visual language_.\n\nThe following content forms visual language:\n\n- Design principles.<br/>\n  They define the core value of the product and team.\n- Best practices.<br/>\n  Outline the best methods to be used for achieving the team goals.\n- Specifications.\n\nUnlike the pattern libraries which instruct what are the patterns to form a\ngood product, visual language also articulates why these patterns should be\nused (Robson, 2016). The Design Systems Handbook names visual language “a core\npart of [...](.zero)\ndesign standards” (Suarez, Anne, Sylor-Miller, Mounter, and\nStanfield, 2017) which ensures user experience and empowers the components not\nonly provide specific designs but also “play an integral role in expressing the\npersonality of your brand” (Suarez, Anne, Sylor-Miller, Mounter, and Stanfield, 2017). Visual language helps to make a step from static rules and individual\nsolutions towards evolving ecosystem (Saarinen, 2016).\n\n### 2.6 Style guide\n\nWell documented pattern library and visual language, accompanied by additional\nattributes such as editorial instructions, form a _style guide_. A style guide is\nan internal company website which “represents the styles, patterns, practices,\nand principles of a design system and teaches how to use it” (Grainer, 2017).\nSuch a website contains “static documentation which describes the design system\nitself: how products should look and feel, use cases for UI patterns, correct\ntypographic scales, etc” (Rutherford, 2017). In other words, the presence of\nvisual language description makes the style guide different from a plain\npattern library documentation.\n\nThe shared characteristic of the style guide elements is that they all guide\ntowards a great product. This view is supported by academic sources that define\nstyle guides as “a form of standard that assists in managing the development\nprocess, including addressing inconsistency” (Simpson, 1999). Thus, the style\nguide elements work each on its level: pattern library provides ready-made\ndesign solutions (components and perceptual patterns) for reuse, visual\nlanguage ensures consistency of upcoming solutions, writing guidelines help to\ncompose texts for the product, technical code style ensures the quality of the\ncode forming the product. Besides listed elements, a style guide may (or may\nnot) include others in accord with the needs of the product.\n\n<Image caption=\"Figure 10. Style guide\">\n\n![Figure 10. Style guide](./figure10.png)\n\n</Image>\n\n### 2.7 Design system\n\nDesign systems defined as “a combination of tools and processes” (Braga, 2017)\ncontain style guides and their inner elements. Besides, they outline the\nprocesses of using these tools to achieve the final goals. This view introduces\ndesign systems as a methodology which transforms the design process similar to\nhow agile approach transformed the development process (Federman, 2017).\n\nTo conclude, design systems are “the methods by which you design products”\n(Federman, 2017). This includes “objective aspects” such as specific design\nsolutions implemented as components and documented patterns which communicate\ndecisions and reasoning behind the solutions via a style guide. Other,\n“abstract aspects” contain strategies for effective collaboration in\nmultidisciplinary teams and processes established for the team activities.\n\n<Image caption=\"Figure 11. Design systems\">\n\n![Figure 11. Design systems](./figure11.png)\n\n</Image>\n\n## 3. Value of design systems\n\nDesign systems and their active usage in the design and development process\nbring value to several different levels.\n\nSince design systems ensure consistency of interfaces and coherency of design\nacross a whole application or a range of one-brand products, they bring value\nto a user by increasing their productivity and effectiveness when working with\na web application (Simpson, 1999 & Saarinen, 2016).\n\nFrom the management perspective, design systems provide “lingua franca” — a\nshared language to be used and help with in-team and cross-teams collaboration.\nIn the teams that adopt design systems, meetings tend to be shorter and more\nproductive (Grundhoefer, 2016). Usage of design systems also makes “work\nsmarter not harder” (Grundhoefer, 2016) so that suitable design can be provided\nand implemented the first time and not through many iterations.\n\nFor the developers, component libraries as elements of design systems ensure\ncode reuse and thus increase the overall quality of the product. They also\nreduce the time needed for implementing new designs.\n\nFor the designers, design systems define the skeleton of the work on both\nabstract and practical levels. They give tools and processes for systematic\ndesign, ensure design coherency, serve for documenting design solutions,\nguarantee end quality of design implementation and make possible to focus on\n_solving business problems_.\n\n## Conclusion\n\nThis article observed the representation of the concept of design systems in\nacademic and popular sources. It demonstrated the large inconsistency of the\nterms used in the domain, summarized and explained the subconcepts introduced\nby different authors. According to this summary, design systems are a\nmethodological concept which includes effective teams processes and tooling.\nThey contain visual language, documentation, patterns, and components in their\nlibraries and a major of guidelines.\n\nThe value of design systems, proven and outlined by many authors, was\nrepresented from different perspectives: of a user, of a manager, of a\ndeveloper and of a designer.\n\nAs a yet evolving concept, design systems can change their shape in near\nfuture. In this regard, the provided summary is not final and requires\nre-visiting if new interpretations appear. However, at the moment, it seems\nmore interesting to elaborate on the nature of design systems building blocks\nand study their practical application by different teams working on different\nproducts.\n\n## References\n\nBaldwin, N. (2016). Anatomy of a Design System. Product Hive online blog. [online](.zero)\nAvailable at: https://blog.producthive.org/anatomy-of-a-design-system-7a6b0677bf5 [Accessed 27 March 2018](.zero)\n.\n\nBaskanderi, N. (2018). How to Build a Design System with a Small Team. freeCodeCamp, online community. [online](.zero)\nAvailable at: https://medium.freecodecamp.org/how-to-build-a-design-system-with-a-small-team-53a3276d44ac [Accessed 27 March 2018](.zero)\n.\n\nBraga, G. (2017). Pattern library, Style guides, Design Systems. Do you need one? Prototypr online blog. [online](.zero)\nAvailable at: https://blog.prototypr.io/pattern-library-style-guides-design-systems-do-you-need-one-b7857af0f255 [Accessed 27 March 2018](.zero)\n.\n\nCarbon Design System for IBM Cloud products (2018). [online](.zero)\nAvailable at: http://carbondesignsystem.com/ [Accessed 27 March 2018](.zero)\n.\n\nFanguy, W. (2017). A comprehensive guide to design systems. InVision design blog. [online](.zero)\nAvailable at: https://www.invisionapp.com/blog/guide-to-design-systems/ [Accessed 27 March 2018](.zero)\n.\n\nFederman, S. (2017). Distilling How We Think About Design Systems. Design Systems Publications. [online](.zero)\nAvailable at: https://publication.design.systems/distilling-how-we-think-about-design-systems-b26432eefef9 [Accessed 27 March 2018](.zero)\n.\n\nGrainer, S. (2017). Design Systems, Style Guides, and Pattern Libraries: Oh My! UXcellence journal. [online](.zero)\nAvailable at: https://uxcellence.com/2017/design-systems-style-guides-pattern-libraries [Accessed 27 March 2018](.zero)\n.\n\nGranlund., Å, Lafrenière D. and Carr, D. (2001). A Pattern-Supported Approach to the User Interface Design Process. Proceedings of HCI International 2001 9th International Conference on Human-Computer Interaction, August 5-10, 2001, New Orleans, USA.\n\nGrundhoefer, A. (2016). Design Systems: Enterprise UX Evolution. [online](.zero)\nAvailable at: https://speakerdeck.com/annegrundhoefer/design-systems-enterprise-ux-evolution [Accessed 27 March 2018](.zero)\n.\n\nKholmatova, A. (2017). Design Systems. A practical guide to creating design languages for digital products. Freiburg, Germany: Smashing Media AG.\n\nLopes, M. (2017). Setup a design system. Prototypr online blog. [online](.zero)\nAvailable at: https://blog.prototypr.io/design-system-ac88c6740f53 [Accessed 27 March 2018](.zero)\n.\n\nRobson, S. (2016). Styleguides, Pattern Libraries and Design Languages. Medium blog. [online](.zero)\nAvailable at: https://medium.com/@sturobson/styleguides-pattern-libraries-and-design-languages-84746902c51c [Accessed 27 March 2018](.zero)\n.\n\nRutherford, Z. (2017). Design Systems vs. Pattern Libraries vs. Style Guides – What’s the Difference? Studio by UxPin design blog. [online](.zero)\nAvailable at: https://www.uxpin.com/studio/blog/design-systems-vs-pattern-libraries-vs-style-guides-whats-difference/ [Accessed 27 March 2018](.zero)\n.\n\nSaarinen, K. (2016). Building a Visual Language. AirBNB Design, online portal.[online](.zero)\nAvailable at: https://airbnb.design/building-a-visual-language/ [Accessed 27 March 2018](.zero)\n.\n\nSimpson, N. (1999). Managing the use of style guides in an organisational setting: practical lessons in ensuring UI consistency. Interacting with Computers 11 (1999) 323–351.\n\nSuarez, M., Anne, J., Sylor-Miller, K., Mounter, D., and Stanfield, R. (2017). Design Systems Handbook. DesignBetter.Co, online journal. [online](.zero)\nAvailable at: https://www.designbetter.co/design-systems-handbook [Accessed 27 March 2018](.zero)\n.\n","fields":{"slug":"blog/testpost/","disqusIdentifier":"blog-testpost","readingTime":{"minutes":19.04}},"frontmatter":{"title":"Design Systems — review of vocabulary and terms","subTitle":"And why it is more than just a library or a style guide","date":"19 July 2018","v2":null,"old":null,"tumblr":null,"tags":"design systems, 123, undef, 0, hello","meta":{"desc":"Design systems standardise and simplify the process of interface design and development, they bring new approaches and form their own ecosystem. However, there is no solid understanding of the concepts and terms forming the design systems. To solve the term inconsistency and provide structured professional language, this article focuses on the vocabulary used in the design systems domain by observing a range of materials on the topic, from both academic and popular sources.\n"},"canonical":null,"cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#88c8c8","images":{"fallback":{"src":"/static/162360faaf39c147c21ec0a45536d0f4/06d81/thumb.jpg","srcSet":"/static/162360faaf39c147c21ec0a45536d0f4/06d81/thumb.jpg 1024w","sizes":"1024px"},"sources":[{"srcSet":"/static/162360faaf39c147c21ec0a45536d0f4/461dc/thumb.webp 1024w","type":"image/webp","sizes":"1024px"}]},"width":1024,"height":707}}}}},"site":{"siteMetadata":{"siteUrl":"https://varya.me"}}},"pageContext":{"slug":"blog/testpost/","prev":{"id":"da3ebb58-cd55-5020-b462-229198bb7cb8","fields":{"slug":"en/posts/communication-culture/","disqusIdentifier":"posts-communication-culture-index-en","level":1,"fileRelativePath":"communication-culture/index_en.md","lang":"en","readingTime":{"minutes":3.63}},"frontmatter":{"title":"Aspect of in-company communication for innovation","subTitle":null,"link":null,"v2":true,"old":null,"date":"2018-01-11T00:00:00.000Z","layout":"post","tags":null},"internal":{"contentFilePath":"/home/runner/work/varya.github.com/varya.github.com/content/posts/communication-culture/index_en.md"}},"next":{"id":"8ac7bec1-b9c4-5db6-bcf7-7c68763c22ca","fields":{"slug":"blog/design-systems-review/","disqusIdentifier":"blog-design-systems-review","level":1,"fileRelativePath":"design-systems-review/index.md","lang":"en","readingTime":{"minutes":18.67}},"frontmatter":{"title":"Design Systems Vocabulary — A Review of Key Terms and Concepts","subTitle":null,"link":null,"v2":null,"old":null,"date":"2018-07-19T00:00:00.000Z","layout":"post","tags":"design systems, patterns, components"},"internal":{"contentFilePath":"/home/runner/work/varya.github.com/varya.github.com/content/posts/design-systems-review/index.md"}},"fileSourceUrl":"https://github.com/varya/varya.github.com/edit/develop/content/posts/testpost/index.md","frontmatter":{"title":"Design Systems — review of vocabulary and terms","subTitle":"And why it is more than just a library or a style guide","date":"2018-07-19T00:00:00.000Z","cover":"thumb.jpg","tags":"design systems, 123, undef, 0, hello","layout":"post","meta":{"desc":"Design systems standardise and simplify the process of interface design and development, they bring new approaches and form their own ecosystem. However, there is no solid understanding of the concepts and terms forming the design systems. To solve the term inconsistency and provide structured professional language, this article focuses on the vocabulary used in the design systems domain by observing a range of materials on the topic, from both academic and popular sources.\n"}}}},"staticQueryHashes":[],"slicesMap":{}}