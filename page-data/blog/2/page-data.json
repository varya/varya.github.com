{"componentChunkName":"component---src-templates-blog-index-js","path":"/blog/2/","result":{"data":{"posts":{"edges":[{"node":{"body":"\n<div data-excerpt>\n\nBoth User Centered Design (UCD) and Agile Software Development (ASD) are widely used methods in the production of user interfaces (UI). However, they “frequently putting contradictory demands on people working with the respective processes” (Jones, 2019). Trying to match different disciplines, the designers and developers are supposed to conduct alignment work which brings them to mutual understanding in the context of their work, revealing “design breakdowns” (Maudet, Leiva, Beaudouin-Lafon & Mackay 2017) early enough.<br/>\nThis research aims to find what designers and developers who consider their collaboration process as successful value in each other.\n\n</div>\n\n## Research design\n\nTo obtain data of what is designers’ and developers’ perceptions of working with each other, the researcher collected recommendations from LinkedIn profiles. For the final data analysis, there were selected profiles of _7 designers_ and _9 developers_. The recommendations were filtered so that for developers it was only recommendations from designers (and not from people with other roles), and for designers it was only recommendations from developers. The roles of the people were taken as they identify themselves in their LinkedIn Profiles.\n\n<Image caption=\"Figure 1\">\n\n![](./recommendation-example.png)\n\n</Image>\n\n## Codifying\n\nFor the codifying, the data was collected into one document, anonymised and processed with the help of ATLAS.ti. Full text can be found in Appendix 1.\n\nIn the text of recommendations, the researcher outlined _1st level concepts_ — the attributes that colleagues highlighted as valuable. The concepts were unified into _themes_ following the area which they belong to. The list of concepts by themes can be found in Appendix 2.\n\nThe themes were aggregated into _dimensions_ forming the following scheme.\n\n<Image caption=\"Figure 2\">\n\n![](./codifying.png)\n\n</Image>\n\nThe dimentions are 1) Wideness of expertise, 2) Hard skills, 3) Professional attributes, 4) Soft skills, and 5) Personal attributes.\n\nWideness of expertise includes knowledge of the technical aspects for designers, understanding of design (particularly, UX) value for developers and knowledge in the business domain for both roles. Hard skills assume direct role-related knowledge and being good at collaboration. Professional attributes list the properties which contribute into both hard and soft skills. Soft skills are the factors positively affecting communication. Finally, personal attributes ease communication and break the barriers.\n\n## Discussion\n\nThe “wideness of expertise” dimension attracts the most. It is noticeable that designers and developers very much value if their colleagues have some knowledge in their area of expertise. These facts resonate with the findings of factors of successful collaboration between UX designers and UI developers. There, the developers complained about “designers do not know enough about the technical limitations when designing solutions” (Jones, 2019). In particular, the developers mentioned that static designs tend “to lack necessary details about the interaction layer in-browser” (Jones, 2019). Similarly, another research mentions the developers’ complaint regarding collaboration with designers as “designers usually don’t take into account the dynamic nature of the data” (Jones, Volker & Gemma, 2016) Generally, the sharing discipline specific knowledge “allows for in-depth discussions about the technical opportunities and constraints of different ideas” (Jones, 2019) and “collaboration is usually smoother when the designer is aware of the developer’s constraints and possibilities” (Maudet et al. 2017) .Correspondingly, the recommendations’ analysis shows that developers value “prototyping” skills of designers which would bring them dynamic designs including the interaction details.\n\nIn addition, both designers and developers highlighted business and product knowledge as positive.\nThis is probably because both designers and developers would like to make mutual decisions regarding the creating product and seeking the missing expertise in their closest colleagues. The value of same-domain expertise can be explained as first the professionals would like to be sure that they can rely on their colleagues' decisions, and for that they validate the colleagues’ knowledge in the area where they themselves are professionals.\n\nOverall research findings complement the studies which outline that “successful collaboration between designers and developers can be found through the following six factors: 1) Close proximity, 2) Early and frequent communication, 3) Shared ideation and problem solving, 4) Crossing over of knowledge and skills, 5) Co-creation and prototyping and 6) Making joint decisions” (Jones & Thoma, 2019).\n\n## Conclusion\n\nThe conducted analysis demonstrated correlation with the existing studies. Even though the obtained data was selected randomly and was less than 20 short recommendation texts in total, it allowed to categorize the valuable attributes of designers and developers and showed the match in valuing cross-disciplinary knowledge. The research approach and the method of obtaining data look as a promising contribution into the following study of positive factors for designers’ and developers’ alignment work.\n\n- [Appendix 1. Raw data](./Varya-Stepanova__What-UX-designers-and-UI-developers-value-in-each-other__LinkedIn-study__appendix-1.pdf)\n- [Appendix 2. 1st-level concepts and themes](./Varya-Stepanova__What-UX-designers-and-UI-developers-value-in-each-other__LinkedIn-study__appendix-2.pdf)\n\n## References\n\nJones, Alexander J. 2019. “Factors for Successful Agile Collaboration between UX Designers and Software Developers in a Complex Organisation Item.” Doctoral dissertation, United Kingdom: University of Chester.\n\nJones, A., & Thoma, V. (2019). Determinants for Successful Agile Collaboration between UX Designers and Software Developers in a Complex Organisation. International Journal of Human-Computer Interaction. https://doi.org/10.1080/10447318.2019.1587856\n\nJones, A., Thoma, V., & Newell, G. (2016). Collaboration constraints for designers and developers in an agile environment. Proceedings of the 30th International BCS Human Computer Interaction Conference, HCI 2016.\n\nMaudet, Nolwenn, Germán Leiva, Michel Beaudouin-Lafon, and Wendy Mackay. 2017. “Design Breakdowns: Designer-Developer Gaps in Representing and Interpreting Interactive Systems.” In Proceedings of the 2017 ACM Conference on Computer Supported Cooperative Work and Social Computing, 630–41. Portland Oregon USA: ACM. https://doi.org/10.1145/2998181.2998190.\n","excerpt":"","fields":{"slug":"blog/designers-developers-linkedin-study/","readingTime":{"minutes":4.47}},"frontmatter":{"title":"What UX designers and UI developers value in each other. LinkedIn research study","link":null,"date":"26 January 2021","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#583828","images":{"fallback":{"src":"/static/1ad98ab1c4e226b70ce43d30a8e56125/f06a5/thumb.jpg","srcSet":"/static/1ad98ab1c4e226b70ce43d30a8e56125/f06a5/thumb.jpg 3072w","sizes":"3072px"},"sources":[{"srcSet":"/static/1ad98ab1c4e226b70ce43d30a8e56125/2cb63/thumb.webp 3072w","type":"image/webp","sizes":"3072px"}]},"width":3072,"height":2048}}}}}},{"node":{"body":"\n<div data-excerpt>\n\nArticle at Frontside blog: Design tokens are used to keep a consistent look across an entire system. How do you name them semantically if they have to make sense everywhere but also respond to the inner logic of individual components which are independently developed?\n\n</div>\n\n<Text size=\"large\" margin={{vertical: \"medium\"}}>\nRead at <Link to=\"https://frontside.com/blog/2021-01-15-design-tokens-and-components/\">Frontside blog </Link>\n</Text>\n","excerpt":"","fields":{"slug":"blog/design-tokens-and-components/","readingTime":{"minutes":0.29}},"frontmatter":{"title":"The context dilemma: design tokens and components\n","link":null,"date":"15 January 2021","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/1b44f543fe71e93e37c13e9210ce7c81/1bab9/cover.png","srcSet":"/static/1b44f543fe71e93e37c13e9210ce7c81/1bab9/cover.png 2560w","sizes":"2560px"},"sources":[{"srcSet":"/static/1b44f543fe71e93e37c13e9210ce7c81/5a7e7/cover.webp 2560w","type":"image/webp","sizes":"2560px"}]},"width":2560,"height":1045}}}}}},{"node":{"body":"\n<div data-excerpt>\n\nRecently I implemented a new cool feature to one of the npm packages I develop. Later this day, I was\nshowing it to a friend, and ... nothing worked. What a shame, I forgot to publish the package. The\nfeature successfully passed the tests, and was pushed to the package GitHub repository but no one could not\nenjoy it anyway. Is there anything to help to avoid such situations? Yes, it is [GitHub Actions](https://github.com/features/actions) — automated workflows that can run different jobs, including publishing packages to npm.\n\n</div>\n\nSetting up a workflow is surprisingly simple: you only need to create a `.yml` file in `.github/workflows` folder. A file could\nhave any name as there can be more than one workflow.\n\nHere is the content of my `.github/workflow/gatsby-theme-npm-publish.yml`\n\n```yml\nname: Gatsby theme npm package\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  publish-npm:\n    runs-on: ubuntu-latest\n    env:\n      working-directory: ./gatsby-theme\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v1\n        with:\n          node-version: 12\n          registry-url: https://registry.npmjs.org/\n      - run: npm install -g yarn\n      - name: install packages\n        run: yarn\n        working-directory: ${{env.working-directory}}\n      - name: publish\n        run: npm publish\n        working-directory: ${{env.working-directory}}\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.npm_token}}\n```\n\nAs you can see, the jobs run on every push to the `master` branch. There are a couple of special details in this workflow.\n\nNote that the package build is made not in the root directory but in the `gatsby-theme` directory. This repository hosts several packages, this is why. To run the commands in the correct context, I had to specify the directory. For that, I first define the `working-directory` variable in the `env` section of the job and later use it az `${{env.working-directory}}`.\n\nAnother detail is providing an authorization token for npm. Such tokens are to generate on the [https://www.npmjs.com/](https://www.npmjs.com/) website:\n\n![](./npm-token1.png)\n\nClick on the **Create new token** button.\n\n![](./npm-token2.png)\n\nAnd choose to create a token with the right to publish.\n\n![](./npm-token3.png)\n\nCopy the token you got into the clipboard.\n\nAfter that, you need to add this token to the secrets of your repository. Go to the **Settings** tab of the repository:\n\n![](./github-token1.png)\n\nFind the **Secrets** page in the sidebar.\n\n![](./github-token2.png)\n\nCreate a new secret.\n\n![](github-token3.png)\n\nPut the npm token which you have in the clipboard to the texarea and give it a name, say `npm_token`.\n\n![](./github-token4.png)\n\nThis name is what has to be provided as a value of `NODE_AUTH_TOKEN` variable in the `env` section of\nthe `npm publish` command.\n\n```\nNODE_AUTH_TOKEN: ${{secrets.npm_token}}\n```\n\nVoilà! Now I have the npm package automatically published every time the `master` branch is updated.\n\n![](./github-workflow.png)\n","excerpt":"Setting up a workflow is surprisingly simple: you only need to create a  file in  folder. A file could have…","fields":{"slug":"blog/release-to-npm-with-github-actions/","readingTime":{"minutes":2.085}},"frontmatter":{"title":"Automatic releases of npm packages with GitHub actions","link":null,"date":"17 August 2020","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#c82828","images":{"fallback":{"src":"/static/83dfc8224dc5a9215da6264dd62ac021/6b063/thumb.png","srcSet":"/static/83dfc8224dc5a9215da6264dd62ac021/6b063/thumb.png 2400w","sizes":"2400px"},"sources":[{"srcSet":"/static/83dfc8224dc5a9215da6264dd62ac021/19ade/thumb.webp 2400w","type":"image/webp","sizes":"2400px"}]},"width":2400,"height":1260}}}}}},{"node":{"body":"\n<div data-excerpt>\n\nMaking the components responsive is usually one of the key requirements for any design system or a pattern library.\nThis means that the documentation system has to follow and show how the components are rendered on small to large screens.\nIn this post, I show how I managed to do it with Storybook and get unique URLs for such responsive stories for later\nembedding them as examples into other (documentation) pages.\n\n</div>\n\nStorybook provides essential add-ons, and one of them is for working with different screen sizes. It gives\nyou a viewport toolbar where you can select how to render your stories.\n\nThe [documentation page](https://storybook.js.org/docs/react/essentials/viewport) explains how to get it working\nand how to configure for your specific case.\n\nYou may enjoy the default set up and manually change the viewport settings when developing or checking documentation\nof the components.\n\nHowever, sometimes there is a need to demonstrate how the same code is rendered on different screens. For example,\nif you are writing documentation for responsive components such as a grid system. In this situation, changing the default\nviewport and making generic stories can save a lot of your time.\n\nYou can write the stories once, but show them with different settings. This is how I demonstrate the grid system behavior on large and small screens:\n\n![](./stories-size-l.png)\n\n![](./stories-size-s.png)\n\nAs you can see in the sidebar, there is sub-navigation for the Grid stories. It shows the same three examples of different screen sizes. Someone who is checking the documentation on Storybook does not need to use the viewport toolbar because\neach of the subfolders already shows all its stories with the defined setting.\n\n## Set up thew viewports\n\nIf you want to do the same, first you should set up the viewports you are goint to use. This is a piece of code from\nmy `.storybook/preview.js` file:\n\n```js\nconst customViewports = {\n  xs: {\n    name: \"XS\",\n    styles: {\n      width: \"480px\",\n      height: \"600px\",\n    },\n  },\n  s: {\n    name: \"S\",\n    styles: {\n      width: \"640px\",\n      height: \"801px\",\n    },\n  },\n  m: {\n    name: \"M\",\n    styles: {\n      width: \"960px\",\n      height: \"700px\",\n    },\n  },\n  l: {\n    name: \"L\",\n    styles: {\n      width: \"1200px\",\n      height: \"800px\",\n    },\n  },\n  xl: {\n    name: \"XL\",\n    styles: {\n      width: \"1400px\",\n      height: \"900px\",\n    },\n  },\n};\n\naddParameters({\n  viewport: {\n    viewports: {\n      ...customViewports,\n    },\n  },\n});\n```\n\n## Write the stories\n\nThen, you will need a file with repetitive stories. It should be written similarly to a usual `.stories.js`. But you\ndo not need `export default` part because these stories should not be shown. We will use them for later re-exporting. This is my `components/Grid/Grid.generic.stories.js` (I changed the content to make it shorter).\n\n```\nimport React from 'react';\n\nexport const story1 = () => <Grid>Example 1</Grid>\n\nexport const story2 = () => <Grid>Example 2</Grid>\n\nexport const story3 = () => <Grid>Example 3</Grid>\n```\n\n## Re-export the stories\n\nThe generic stories can be re-used with different viewport settings. I have a separate `.stories.js` file for each of them:\n\n- `Grid.viewport-xs.stories.js`\n- `Grid.viewport-s.stories.js`\n- `Grid.viewport-m.stories.js`\n- `Grid.viewport-l.stories.js`\n- `Grid.viewport-xl.stories.js`\n\nThe content of these files is similar but the viewport settings are different:\n\n```\n\nimport React from 'react';\n\nexport default {\n  title: 'Components/Grid/XS',\n  decorators: [\n    storyFn => (\n      <div className=\"ds-storybook-grid\">\n        {storyFn()}\n      </div>\n    ),\n  ],\n  parameters: {\n    viewport: {\n      defaultViewport: 'xs'\n    },\n    loki: { skip: true },\n  },\n};\n\nexport * from './Grid.generic.stories'\n```\n\nNote the last line! `export * from './Grid.generic.stories'` re-exports all the stories. So, you need only support this\nvery file and you get the stories for all the viewports generated automatically.\n\n## Why?\n\nThere are not that many situations you would need this solution. But it provides each story with a unique URL and predefined viewport size (something that the toolbar is missing). Using this URL and having your storybook publically hosted, you can\nembed your stories and iframes into some other pages and be sure that they illustrate the behavior on the component\non a specific viewport.\n","excerpt":"Storybook provides essential add-ons, and one of them is for working with different screen sizes. It gives you a viewport toolbar where you can select how to render your stories. The…","fields":{"slug":"blog/stories-with-different-viewports/","readingTime":{"minutes":3.275}},"frontmatter":{"title":"Generic Storybook stories with different viewports","link":null,"date":"12 August 2020","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#080808","images":{"fallback":{"src":"/static/bfa1ee7c34adc725ed8f73b1e47338b0/6977c/thumb.png","srcSet":"/static/bfa1ee7c34adc725ed8f73b1e47338b0/6977c/thumb.png 1711w","sizes":"1711px"},"sources":[{"srcSet":"/static/bfa1ee7c34adc725ed8f73b1e47338b0/63bf0/thumb.webp 1711w","type":"image/webp","sizes":"1711px"}]},"width":1711,"height":1086}}}}}},{"node":{"body":"\n<div data-excerpt>\n\nOne of the main focuses in my recent work is to keep documentation for designers and developers\nin the same place. How exactly to achieve this, depends on what are the chosen documenting tools.\nAt the moment, our team is trying ZeroHeight which is very much appreciated by the designers. However,\nbrining there technical documentation like a PropTypes table for the components, I faced some obstacles.\nAnyways, there is a solution.\n\n</div>\n\n### Create a Storybook page with PropTypes table\n\nFor every component, create a separate page in Storybook where you output only the component properties. You can use `MDX` syntax for stories. So, `Components.stories.mdx` (or another name, depending on your Storybook configuration) should contain the following code.\n\n```javascript\nimport { Meta, Props } from \"@storybook/addon-docs/blocks\";\nimport Badge from \"./Badge.js\";\n\n<Meta title=\"Components/Badge/JsDocs\" component={Badge} />\n\n<Props of={Badge} />\n```\n\nThis renders you the page like in the screenshot below.\n\n<div class=\"small\" markdown=\"1\">\n\n![](./storybook.png)<br/>\nSource:\n[Elisa Design System. Badge component](https://component-library-storybook.dc2-dev.elisa.fi/?path=/docs/components-badge-jsdocs--page)\n\n</div>\n\n### Embed the PropTypes page into ZeroHeight\n\n1. On the component page in ZeroHeight, insert a new block of code.\n   ![](./zeroheight1.png)\n1. Select the \"Storybook\" option.\n   ![](./zeroheight2.png)\n1. Turn on \"Show add-ons\" and insert the URL of the PropTypes page from your Storybook.\n   ![](./zeroheight3.png)\n\nOnce the page is loaded, you get a result similar to this:\n\n![](./zeroheight4.png)\n\n## Result\n\nIn the view mode, you can see cleaner output without the URL of the page.\n\n![](./zeroheight-result.png)\n\nUnfortunately, there is no way to make PropTypes shown automatically for all the documented components. Even though,\nyou can automate creating separate PropTypes pages in your Storybook, brining the resultant URLs into ZeroHeight still\nwill be manual work. Also, the page is rendered in an iframe that does not detect the height of the content. Mostly,\nwhile JsDoc updates and the amount of properties changes, you will have an either too long iframe with an extra space or\ntoo short iframe with a scroll.\n\nNevertheless, the need to keep documentation for designers and developers in the same place, makes me put up with these\nobstacles and inaccuracies. In my current project, I will continue using this solution until and if better integration options\nappear.\n","excerpt":"Create a Storybook page with PropTypes table For every component, create a separate page in Storybook where you output only the component properties. You can use  synta…","fields":{"slug":"blog/proptypes-in-zeroheight/","readingTime":{"minutes":1.8}},"frontmatter":{"title":"PropTypes documentation in ZeroHeight","link":null,"date":"16 June 2020","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#a89888","images":{"fallback":{"src":"/static/6bfd9e8587f777f115d8da7d0549e6f3/1fe34/thumb.jpg","srcSet":"/static/6bfd9e8587f777f115d8da7d0549e6f3/1fe34/thumb.jpg 1999w","sizes":"1999px"},"sources":[{"srcSet":"/static/6bfd9e8587f777f115d8da7d0549e6f3/0e491/thumb.webp 1999w","type":"image/webp","sizes":"1999px"}]},"width":1999,"height":1334}}}}}},{"node":{"body":"\n<div data-excerpt>\n\nNested structures are useful for managing and editing. But when it comes to representation in UI, it might\nnot be trivial to iterate through all the deep levels. Often happens, that it is more useful to have\na flat structure which probably preserves the depth of the items. In JavaScript, easiest way to transform such structure is\n`reduce` method.\n\n</div>\n\n<div class=\"small\" markdown=\"1\">\n\n![](thumb.jpg)<br/>\nImage source:\n[https://macwright.org/2015/01/03/reduce-juice.html](https://macwright.org/2015/01/03/reduce-juice.html)\n\n</div>\n\nSay, we have a nested structure representing the parts of a design system. This is a list of categories\nwith underlying item which, in turn, may have subitems.\n\n```javascript\nexport const parts = [\n  {\n    title: \"Visual language\",\n    parts: [\n      {\n        title: \"Color\",\n        parts: [\"Palettes\", \"Contrast\", \"Meaning\", \"Swatches\"],\n      },\n      {\n        title: \"Typography\",\n        parts: [\"Hierarchy\", \"Weights / types\", \"Web fonts\", \"Baseline grid\"],\n      },\n      \"Photography\",\n    ],\n  },\n  {\n    title: \"UI elements\",\n    category: true,\n    parts: [\n      \"Paragraph\",\n      \"Block quote\",\n      \"Headers (H1 - H6)\",\n      \"Lists\",\n      \"Links\",\n      {\n        title: \"Buttons\",\n        parts: [\"Primary\", \"Secondary\", \"Button groups\", \"Menu buttons\"],\n      },\n      \"Slider\",\n    ],\n  },\n];\n```\n\nInstead of going deeper and deeper, it's worth to flatten the structure with the help of `reduce` function, and then\niterate through the new structure.\n\n```javascript\nconst flatten = (obj, depth, currentDepth = 0) => {\n  const array = Array.isArray(obj) ? obj : [obj];\n  return array.reduce((acc, value) => {\n    acc.push({\n      title: value.title || value,\n      depth: currentDepth,\n    });\n    if (value.parts) {\n      acc = acc.concat(flatten(value.parts, depth, currentDepth + 1));\n    }\n    return acc;\n  }, []);\n};\n\nconst partsFlattened = parts.map((category) => {\n  const categoryFlattened = {\n    parts: flatten(category.parts),\n    title: category.title,\n    category: category.category,\n  };\n  return categoryFlattened;\n});\n```\n\nThis code fallens the given structure as the following.\n\n```javascript\n[\n  {\n    category: \"undefined\",\n    parts: [\n      {\n        depth: 0,\n        title: \"Color\",\n      },\n      {\n        depth: 1,\n        title: \"Palettes\",\n      },\n      {\n        depth: 1,\n        title: \"Contrast\",\n      },\n      {\n        depth: 1,\n        title: \"Meaning\",\n      },\n      {\n        depth: 1,\n        title: \"Swatches\",\n      },\n      {\n        depth: 0,\n        title: \"Typography\",\n      },\n      {\n        depth: 1,\n        title: \"Hierarchy\",\n      },\n      {\n        depth: 1,\n        title: \"Weights / types\",\n      },\n      {\n        depth: 1,\n        title: \"Web fonts\",\n      },\n      {\n        depth: 1,\n        title: \"Baseline grid\",\n      },\n      {\n        depth: 0,\n        title: \"Photography\",\n      },\n    ],\n    title: \"Visual language\",\n  },\n  {\n    category: true,\n    parts: [\n      {\n        depth: 0,\n        title: \"Paragraph\",\n      },\n      {\n        depth: 0,\n        title: \"Block quote\",\n      },\n      {\n        depth: 0,\n        title: \"Headers (H1 - H6)\",\n      },\n      {\n        depth: 0,\n        title: \"Lists\",\n      },\n      {\n        depth: 0,\n        title: \"Links\",\n      },\n      {\n        depth: 0,\n        title: \"Buttons\",\n      },\n      {\n        depth: 1,\n        title: \"Primary\",\n      },\n      {\n        depth: 1,\n        title: \"Secondary\",\n      },\n      {\n        depth: 1,\n        title: \"Button groups\",\n      },\n      {\n        depth: 1,\n        title: \"Menu buttons\",\n      },\n      {\n        depth: 0,\n        title: \"Slider\",\n      },\n    ],\n    title: \"UI elements\",\n  },\n];\n```\n\nLately, the flat structure can be used if, for instance, you need to output the items similarly but\nprovide additional CSS classes depending on the depth of the items. [Run the demo](https://jsfiddle.net/1ew8gn63/15/)\nto see how it can work.\n","excerpt":"Say, we have a nested structure representing the parts of a design system. This is a list of categories with underlying item which, in turn, may have subitems. Instead of going deeper and…","fields":{"slug":"blog/flatten-array-with-reduce/","readingTime":{"minutes":2.375}},"frontmatter":{"title":"Flatten array with JavaScript reduce function","link":null,"date":"01 June 2020","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/d74aa486feb57818f4c5271cffcda76e/a4f83/thumb.jpg","srcSet":"/static/d74aa486feb57818f4c5271cffcda76e/a4f83/thumb.jpg 1280w","sizes":"1280px"},"sources":[{"srcSet":"/static/d74aa486feb57818f4c5271cffcda76e/f5b15/thumb.webp 1280w","type":"image/webp","sizes":"1280px"}]},"width":1280,"height":1505}}}}}}]}},"pageContext":{"limit":6,"skip":6,"pageCount":9,"currentPage":2}},"staticQueryHashes":[],"slicesMap":{}}