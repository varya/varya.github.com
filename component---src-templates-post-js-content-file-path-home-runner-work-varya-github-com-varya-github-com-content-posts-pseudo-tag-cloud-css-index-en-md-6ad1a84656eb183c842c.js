"use strict";(self.webpackChunkvarya_me=self.webpackChunkvarya_me||[]).push([[3936],{8706:function(n,t,e){e.r(t),e.d(t,{default:function(){return E}});var a=e(4552),s=e(1504),l=e(9824);function o(n){const t=Object.assign({p:"p",span:"span"},(0,a.MN)(),n.components);return s.createElement(s.Fragment,null,s.createElement("div",{"data-excerpt":!0},s.createElement(t.p,null,"Last week I faced a need to make a fake tag cloud, where the words need to be of different size. This was needed for\na presentation slide, and as my slides are always in HTML/CSS, must be implemented with these technologies. It is always\npossible to inject some JavaScript and code anything. But what about pure CSS, do we get random sizes there?")),"\n",s.createElement("div",{class:"testings",markdown:"1"},s.createElement("ul",{class:"cloud"},s.createElement("li",null,"performance testing"),s.createElement("li",null,"stress testing"),s.createElement("li",null,"conformance testing"),s.createElement("li",null,"acceptane testing"),s.createElement("li",null,"smoke testing"),s.createElement("li",null,"regression testing"),s.createElement("li",null,"white box testing"),s.createElement("li",null,"functional testing"),s.createElement("li",null,"system testing"),s.createElement("li",null,"black box testing"),s.createElement("li",null,"load testing"),s.createElement("li",null,"compatibility testing"),s.createElement("li",null,"unit testing"))),"\n",s.createElement(l.c,{html:"<style> .testings { text-align: center; width: 400px; } .testings .cloud { display: inline; list-style-type: none; width: 400px; } .testings .cloud li { list-style: none; display: inline; } .testings .cloud li:nth-of-type(3n + 1) { font-size: 1.25em; } .testings .cloud li:nth-of-type(4n+3) { font-size: 1.5em; } .testings .cloud li:nth-of-type(5n - 3) { font-size: 1em; } </style>"}),"\n",s.createElement(t.p,null,"The tag cloud you see above is what I get. You may notice it's not real random; after refreshing you will always get the\nsame result. But still looks like a tag cloud of different sizes and works perfectly as an example."),"\n",s.createElement(t.p,null,"This is a list, it's easy to generate from markdown:"),"\n",s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="html"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cloud<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>performance testing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>stress testing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>conformance testing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>acceptane testing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>smoke testing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n  ...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre></div>'}}),"\n",s.createElement(t.p,null,"Then, flattened as usual:"),"\n",s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="css"><pre class="language-css"><code class="language-css"><span class="token selector">.cloud</span> <span class="token punctuation">{</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>\n  <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.cloud li</span> <span class="token punctuation">{</span>\n  <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(t.p,null,"And then different sizes are made with a few ",s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nth-of-type</code>'}})," combined in different variants:"),"\n",s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="css"><pre class="language-css"><code class="language-css"><span class="token selector">.cloud li:nth-of-type(3n + 1)</span> <span class="token punctuation">{</span>\n  <span class="token property">font-size</span><span class="token punctuation">:</span> 1.25em<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.cloud li:nth-of-type(4n + 3)</span> <span class="token punctuation">{</span>\n  <span class="token property">font-size</span><span class="token punctuation">:</span> 1.5em<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.cloud li:nth-of-type(5n - 3)</span> <span class="token punctuation">{</span>\n  <span class="token property">font-size</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(t.p,null,"I tuned the ",s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nth-of-type</code>'}})," values so that it would look nicely. Depending on the length of the words used, you may need\nto play arownd with the values and maybe use more than 3 sizes."))}var p=function(n){void 0===n&&(n={});const{wrapper:t}=Object.assign({},(0,a.MN)(),n.components);return t?s.createElement(t,n,s.createElement(o,n)):o(n)},c=e(3268),i=e.n(c),u=e(8164),r=e(5864),g=e(4388),m=e(7264),d=e(7768);const k={Box:u.k,Button:r.q,Text:g.a,Heading:m._m,Paragraph:m.gZ,PatternJourney:m.cR,PureHtml:m.Sc,Section:m.iG,Hero:m.Ax,Widget:m.MF,PatternJourney:m.cR,WidgetContainer:m.gV,Workshop:m.yw,ProjectRoles:m.Ij,DsAspects:m.gN,Link:m.cH,Image:m.WC,ImageBlock:m.uD},h=n=>t=>{let{children:e}=t;return s.createElement(m._m,{level:n},e)},f={h1:h(1),h2:h(2),h3:h(3),h4:h(4),h5:h(5),h6:h(6),p:n=>{let{children:t}=n;return s.createElement(m.gZ,{standout:!0},t)},a:m.cH,div:n=>{let{"data-excerpt":t,children:e,...a}=n;return t?s.createElement(m.gZ,{as:"div",lead:!0},e):s.createElement("div",a,e)}};f.h1.propTypes={children:i().node};const y=n=>{let{data:{mdx:t,site:{siteMetadata:{siteUrl:e}}},children:l,pageContext:{next:o,prev:p,fileSourceUrl:c}}=n;const{readingTime:i,slug:r,disqusIdentifier:g}=t.fields,{date:h,title:y,subTitle:E,cover:v,tumblr:w}=t.frontmatter,b=t.frontmatter.tags&&t.frontmatter.tags.split(","),x=r.startsWith("blog/");return t?s.createElement(m._W,null,s.createElement(m.my,{imageUrl:v&&v.childImageSharp.gatsbyImageData.images.fallback.src,tags:b,date:h,readingTime:x&&parseInt(i.minutes)>0?Math.round(i.minutes).toFixed(1)+" min read":null,title:y,subTitle:E}),s.createElement(m.yc,{data:t}),s.createElement(u.k,{flex:"grow",width:"xlarge",margin:{horizontal:"auto"},pad:"medium",direction:"column"},s.createElement(a.Iu,{components:{...f,...k}},l),s.createElement(u.k,{direction:"row",fill:"horizontal",justify:"center",margin:{bottom:"auto"},pad:{vertical:"medium"}},b&&b.length>0&&b.map((n=>s.createElement(m.ED,{key:n,name:n.trim(),slug:(0,d.MZ)(n),margin:"xsmall"})))),x&&s.createElement(s.Fragment,null,s.createElement(m.uU,{flex:!1,prevSlug:p&&"/"+p.fields.slug,nextSlug:o&&"/"+o.fields.slug,prevTitle:p&&p.frontmatter.title,nextTitle:o&&o.frontmatter.title,pad:{vertical:"medium"}}),s.createElement(m.Oc,{link:c}),s.createElement(m.QZ,{slug:r,title:y,disqusIdentifier:g,tumblr:w,siteUrl:e})))):null};function E(n){return s.createElement(y,n,s.createElement(p,n))}},4552:function(n,t,e){e.d(t,{Iu:function(){return p},MN:function(){return l}});var a=e(1504);const s=a.createContext({});function l(n){const t=a.useContext(s);return a.useMemo((()=>"function"==typeof n?n(t):{...t,...n}),[t,n])}const o={};function p({components:n,children:t,disableParentContext:e}){let p;return p=e?"function"==typeof n?n({}):n||o:l(n),a.createElement(s.Provider,{value:p},t)}}}]);
//# sourceMappingURL=component---src-templates-post-js-content-file-path-home-runner-work-varya-github-com-varya-github-com-content-posts-pseudo-tag-cloud-css-index-en-md-6ad1a84656eb183c842c.js.map