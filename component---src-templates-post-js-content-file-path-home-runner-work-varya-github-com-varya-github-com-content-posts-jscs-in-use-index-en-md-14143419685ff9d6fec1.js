"use strict";(self.webpackChunkvarya_me=self.webpackChunkvarya_me||[]).push([[4851],{8365:function(e,t,n){n.r(t),n.d(t,{default:function(){return w}});var a=n(1151),l=n(7294);function s(e){const t=Object.assign({p:"p",strong:"strong",a:"a",span:"span",ul:"ul",li:"li",h2:"h2",img:"img"},(0,a.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement("div",{"data-excerpt":!0},l.createElement(t.p,null,"This time I would like to share my experience of keeping a codestyle in one of my working projects. This is about a new\ntool called ",l.createElement(t.strong,null,"JSCS")," which we have recently chosen with the team and now are very pleased with the result.")),"\n",l.createElement(t.p,null,"Once I joined ",l.createElement(t.a,{href:"http://styleguide.sc5.io/"},"SC5 Styleguide")," project, I discovered that it was not consistent enough from\nits codestyle perspective. It was not frightening by that time, but it was already clear that the project was going to\ngrow fast and the sooner we start bothering about keeping the codestyle the better. I was already aware about JSCS and\nits features because had published ",l.createElement(t.a,{href:"http://frontendbabel.info/articles/jscs-javascript-code-style/"},"a translation of author's tool\nintroduction")," in one of my side-projects. So the\ndecision which tool to use was made quickly."),"\n",l.createElement(t.p,null,"There are indeed many other solutions, such as JSLint and JSHint, the most mentioned once. But let me first tell you a\nstory."),"\n",l.createElement(t.p,null,"Interesting enough that JSHint authors liked JSCS so much that they prefered to contribute into it rather than develop\nstyle checkings in their tool. So they removed all the style enforcement rules out of JSHint and keep it now for\nmore complex things not about coding style but about programming patterns."),"\n",l.createElement("blockquote",{class:"twitter-tweet",lang:"en"},l.createElement("p",null,"And with that, JSCS now has all the style enforcement rules that are\nbeing dropped in ",l.createElement("a",{href:"https://twitter.com/JSHint"},"@JSHint")," 3.0: ",l.createElement("a",{href:"https://t.co/W98EMSiTN5"},l.createElement(t.a,{href:"https://t.co/W98EMSiTN5"},"https://t.co/W98EMSiTN5"))," cc ",l.createElement("a",{href:"https://twitter.com/valueof"},"@valueof")),"â€” Mike Sherov (@mikesherov) ",l.createElement("a",{href:"https://twitter.com/mikesherov/status/419596672520318976"},"4 Jan 2014")),"\n",l.createElement("script",{async:!0,src:"//platform.twitter.com/widgets.js",charset:"utf-8"}),"\n",l.createElement(t.p,null,"This means that there is no question if you choose JSLint, JSHint ",l.createElement(t.strong,null,"or")," JSCS. Currently you can choose between\nJSLint and JSHint + JSCS working together."),"\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"jslint"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"jshint"</span><span class="token punctuation">,</span> <span class="token string">"jscs"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",l.createElement(t.p,null,"Assuming that JSCS is a new tool with not yet spoiled structure, I suppose that it would be a pleasure to contribute\ninto it. Also, the tool's youth promises that future possible bugs would be fixed soon as there is no legacy."),"\n",l.createElement(t.p,null,"Moreover, I personally find encouraging that JSCS has been already chosen by such respectable teams as jQuery, Bootsrap\nand AngularJS."),"\n",l.createElement(t.p,null,"Long story short, JSCS is an npm package. You can install it either globally or locally for a particular project:"),"\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">npm install jscs</code></pre></div>'}}),"\n",l.createElement(t.p,null,"Besides, you will need a configuration file ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.jscsrc</code>'}})," and define what kind of JavaScript style you prefer for the\nproject. This file should be put into the root of your project."),"\n",l.createElement(t.p,null,"JSCS support tonns of rules. Nethertheless, your config file would not be too heavy thanks to presets. In most cases we\nchoose from popular JavaScript styles and so there is no need to define the rules over and over again. You only need to\nwrite who you prefer to look like:"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"airbnb"),"\n",l.createElement(t.li,null,"crockford"),"\n",l.createElement(t.li,null,"google"),"\n",l.createElement(t.li,null,"jquery"),"\n",l.createElement(t.li,null,"mdcs"),"\n",l.createElement(t.li,null,"wikimedia"),"\n",l.createElement(t.li,null,"yandex"),"\n"),"\n",l.createElement(t.p,null,"Even if you want to be special, you still can choose the most similar preset and redefine some of its rules below."),"\n",l.createElement(t.p,null,"Important thing is that JSCS is already quite a mature thing, which means that you can easily find acompanying packages\nand needed plug-ins for editors."),"\n",l.createElement(t.h2,{id:"the-success-story",style:{position:"relative"}},l.createElement(t.a,{href:"#the-success-story","aria-label":"the success story permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"The Success Story"),"\n",l.createElement(t.p,null,"Assuming these facts, we decided to give JSCS a try. We started with defining a lovely configuration but excluded all\nthe files from the checking process yet. Our project already had modular structure, so this was easy."),"\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">{\n    ...\n\n    "excludeFiles": [\n      "node_modules/**",\n      "src/modules/a/**",\n      "src/modules/b/**",\n      "src/*.js\n    ]\n}</code></pre></div>'}}),"\n",l.createElement(t.p,null,"Then, we agreed that if any of us starts coding or changing a module, he/she will fix the codestyle and swipe out the\nfixed module from the ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">excludeFiles</code>'}})," list. Following this, we got our files fixed quite fast and even avoid conflicts."),"\n",l.createElement(t.p,null,"Keeping the codestyle when maintaining these files lately turned out to be more challengeable. Automatic checkings are\nvery helpful here, but we needed to decide how strict we should be. The codestyle should not be our main goal instead of\ndevelopment."),"\n",l.createElement(t.p,null,'Finally we came up with "separation of concerns" model. Thus, for the upstream repository we have strict codestyle\npolicy, and for the forks it is more suggestive. We taught Travis to check codestyle in the pull requests we are\ngetting. If codestyle is broken, the Travis build fails. So, pull requests with wrong codestyle cannot be merged into\nthe upstream. This ensures us that we will never get bad code there. However for the forks it is not that strict. We\nturned down the idea of using pre-push hooks but recommend a developer to install a pre-commit hook in their repository\nclone as well as using JSCS IDE plugins in order to learn about wrong codestyle while developing and not when their pull\nrequest gets broken. These recommendations are described in our documentation for developers and all the team members\nfollow them.'),"\n",l.createElement(t.p,null,"Everyone especially likes that JSCS can work with the code editors. The codestyle configuration is stored in the project\nrepository and so an editor reads on its own. The most wonderful thing is that when switching between the projects with\ndifferent codestyles, it does not require any change of settings."),"\n",l.createElement(t.img,{src:"http://varya.me/jscs-talk/pictures/sublime.gif",alt:""}),"\n",l.createElement(t.p,null,"And of course it is always possible to check the codestyle manually running a gulp task."),"\n",l.createElement(t.img,{src:"http://varya.me/jscs-talk/pictures/travis.png",alt:""}),"\n",l.createElement(t.h2,{id:"word-of-caution",style:{position:"relative"}},l.createElement(t.a,{href:"#word-of-caution","aria-label":"word of caution permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Word of caution"),"\n",l.createElement(t.p,null,"We faced a couple of problems when applying the tool. I believe they are worth to be mentioned, especially as I can\nprovide the solutions."),"\n",l.createElement(t.p,null,'The most painful was "out of memory" error when running a gulp task with JSCS checking. Turned out, that excluding files\nin the configuration is not enough. Gulp tries to process all the files that match the mask and is soon run out of\nmemory. We fixed this with using ',l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">gulp-ingnore</code>'}})," package:"),"\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gulp.task('jscs', function() {\n  return gulp.src([\n    '**/*.js'\n  ])\n  .pipe(gulpIgnore.exclude([\n    'node_modules/**',\n    'demo-output/**'\n  ]))\n  .pipe(jscs());\n})</code></pre></div>"}}),"\n",l.createElement(t.p,null,"This is not the best solution because we need to list the excluded files in both ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.jscs</code>'}})," configuration and the\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">gulpfile.js</code>'}}),". But there is nothing better yet."),"\n",l.createElement(t.p,null,"The second trick is about checking the codestyle while watching the project files with Gulp. You would probably like to\nsee the errors reported in your terminal but still have the ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">watch</code>'}})," task running. This is possible with the help of\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">gulp-plumber</code>'}}),":"),"\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">gulp.task(\'jscs\', function() {\n  return gulp.src([\n    \'**/*.js\'\n  ])\n  ...\n  .pipe(plumber())\n  .pipe(jscs());\n});</code></pre></div>'}}),"\n",l.createElement(t.p,null,"This is all, we did not face any other problem with the tool. It works just fine and has already saved thousands of\nman-hours."),"\n",l.createElement(t.h2,{id:"besides",style:{position:"relative"}},l.createElement(t.a,{href:"#besides","aria-label":"besides permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Besides"),"\n",l.createElement(t.p,null,"If you are interested in the slides for this talk, here they are\n",l.createElement(t.a,{href:"http://varya.me/jscs-talk/"},"http://varya.me/jscs-talk/"),"."))}var o=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.ah)(),e.components);return t?l.createElement(t,e,l.createElement(s,e)):s(e)},r=n(5697),i=n.n(r),c=n(211),u=n(7034),h=n(9947),d=n(2348),p=n(3103);const m={Box:c.x,Button:u.z,Text:h.x,Heading:d.X6,Paragraph:d.nv,PatternJourney:d.Bk,PureHtml:d.hT,Section:d.$0,Hero:d.VM,Widget:d.$L,PatternJourney:d.Bk,WidgetContainer:d.Hl,Workshop:d.pC,ProjectRoles:d.MB,DsAspects:d.ED,Link:d.rU,Image:d.Ee,ImageBlock:d.r8},g=e=>t=>{let{children:n}=t;return l.createElement(d.X6,{level:e},n)},f={h1:g(1),h2:g(2),h3:g(3),h4:g(4),h5:g(5),h6:g(6),p:e=>{let{children:t}=e;return l.createElement(d.nv,{standout:!0},t)},a:d.rU,div:e=>{let{"data-excerpt":t,children:n,...a}=e;return t?l.createElement(d.nv,{as:"div",lead:!0},n):l.createElement("div",a,n)}};f.h1.propTypes={children:i().node};const y=e=>{let{data:{mdx:t,site:{siteMetadata:{siteUrl:n}}},children:s,pageContext:{next:o,prev:r,fileSourceUrl:i}}=e;const{readingTime:u,slug:h,disqusIdentifier:g}=t.fields,{date:y,title:w,subTitle:v,cover:E,tumblr:b}=t.frontmatter,S=t.frontmatter.tags&&t.frontmatter.tags.split(","),k=h.startsWith("blog/");return t?l.createElement(d.Ar,null,l.createElement(d.mV,{imageUrl:E&&E.childImageSharp.gatsbyImageData.images.fallback.src,tags:S,date:y,readingTime:k&&parseInt(u.minutes)>0?`${Math.round(u.minutes).toFixed(1)} min read`:null,title:w,subTitle:v}),l.createElement(d.pQ,{data:t}),l.createElement(c.x,{flex:"grow",width:"xlarge",margin:{horizontal:"auto"},pad:"medium",direction:"column"},l.createElement(a.Zo,{components:{...f,...m}},s),l.createElement(c.x,{direction:"row",fill:"horizontal",justify:"center",margin:{bottom:"auto"},pad:{vertical:"medium"}},S&&S.length>0&&S.map((e=>l.createElement(d.Vp,{key:e,name:e.trim(),slug:(0,p.mA)(e),margin:"xsmall"})))),k&&l.createElement(l.Fragment,null,l.createElement(d.Yp,{flex:!1,prevSlug:r&&`/${r.fields.slug}`,nextSlug:o&&`/${o.fields.slug}`,prevTitle:r&&r.frontmatter.title,nextTitle:o&&o.frontmatter.title,pad:{vertical:"medium"}}),l.createElement(d.vc,{link:i}),l.createElement(d.HW,{slug:h,title:w,disqusIdentifier:g,tumblr:b,siteUrl:n})))):null};function w(e){return l.createElement(y,e,l.createElement(o,e))}},1151:function(e,t,n){n.d(t,{Zo:function(){return r},ah:function(){return s}});var a=n(7294);const l=a.createContext({});function s(e){const t=a.useContext(l);return a.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const o={};function r({components:e,children:t,disableParentContext:n}){let r;return r=n?"function"==typeof e?e({}):e||o:s(e),a.createElement(l.Provider,{value:r},t)}}}]);
//# sourceMappingURL=component---src-templates-post-js-content-file-path-home-runner-work-varya-github-com-varya-github-com-content-posts-jscs-in-use-index-en-md-14143419685ff9d6fec1.js.map