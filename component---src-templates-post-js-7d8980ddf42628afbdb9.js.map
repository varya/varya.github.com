{"version":3,"file":"component---src-templates-post-js-7d8980ddf42628afbdb9.js","mappings":"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","sources":["webpack://varya.me/./src/templates/Post.js","webpack://varya.me/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { graphql } from \"gatsby\";\nimport { MDXProvider } from \"@mdx-js/react\";\nimport { Box, Button, Text } from \"grommet\";\nimport {\n  Comments,\n  DsAspects,\n  GithubEdit,\n  Heading,\n  Hero,\n  Image,\n  ImageBlock,\n  Layout,\n  Link,\n  Paragraph,\n  PatternJourney,\n  PostHeader,\n  PrevNextNav,\n  ProjectRoles,\n  Workshop,\n  PureHtml,\n  Section,\n  Seo,\n  Tag,\n  Widget,\n  WidgetContainer,\n} from \"@components\";\n\nimport { toKebabCase } from \"../common/utils\";\n\nconst globalMdxComponents = {\n  Box,\n  Button,\n  Text,\n  Heading,\n  Paragraph,\n  PatternJourney,\n  PureHtml,\n  Section,\n  Hero,\n  Widget,\n  PatternJourney,\n  WidgetContainer,\n  Workshop,\n  ProjectRoles,\n  DsAspects,\n  Link,\n  Image,\n  ImageBlock,\n};\n\nconst _Heading = (level) => {\n  const component = ({ children }) => (\n    <Heading level={level}>{children}</Heading>\n  );\n  component.propTypes = { children: PropTypes.node };\n  return component;\n};\n\nconst _Paragraph = () => {\n  const component = ({ children }) => (\n    <Paragraph standout>{children}</Paragraph>\n  );\n  component.propTypes = { children: PropTypes.node };\n  return component;\n};\n\n// Apply styling to excerpt\nconst _div = ({ \"data-excerpt\": dataExcerpt, children, ...props }) =>\n  dataExcerpt ? (\n    <Paragraph as=\"div\" lead>\n      {children}\n    </Paragraph>\n  ) : (\n    <div {...props}>{children}</div>\n  );\n\n_div.propTypes = {\n  \"data-excerpt\": PropTypes.string,\n  children: PropTypes.node,\n};\n\nconst postComponents = {\n  h1: _Heading(1),\n  h2: _Heading(2),\n  h3: _Heading(3),\n  h4: _Heading(4),\n  h5: _Heading(5),\n  h6: _Heading(6),\n  p: _Paragraph(),\n  a: Link,\n  div: _div,\n};\n\npostComponents.h1.propTypes = {\n  children: PropTypes.node,\n};\n\nconst Post = ({\n  data: {\n    mdx,\n    site: {\n      siteMetadata: { siteUrl },\n    },\n  },\n  children,\n  pageContext: { next, prev, fileSourceUrl },\n}) => {\n  const { readingTime, slug, disqusIdentifier } = mdx.fields;\n  const { date, title, subTitle, cover, tumblr } = mdx.frontmatter;\n  const tags = mdx.frontmatter.tags && mdx.frontmatter.tags.split(\",\");\n\n  // specify if blog-specific meta should be shown or hidden\n  const showBlogMeta = slug.startsWith(\"blog/\");\n\n  if (!mdx) {\n    return null;\n  }\n\n  return (\n    <Layout>\n      <PostHeader\n        imageUrl={\n          cover && cover.childImageSharp.gatsbyImageData.images.fallback.src\n        }\n        tags={tags}\n        date={date}\n        readingTime={\n          showBlogMeta && parseInt(readingTime.minutes) > 0\n            ? `${Math.round(readingTime.minutes).toFixed(1)} min read`\n            : null\n        }\n        title={title}\n        subTitle={subTitle}\n      />\n      <Seo data={mdx} />\n      <Box\n        flex=\"grow\"\n        width=\"xlarge\"\n        margin={{ horizontal: \"auto\" }}\n        pad=\"medium\"\n        direction=\"column\"\n      >\n        <MDXProvider components={{ ...postComponents, ...globalMdxComponents }}>\n          {children}\n        </MDXProvider>\n        <Box\n          direction=\"row\"\n          fill=\"horizontal\"\n          justify=\"center\"\n          margin={{ bottom: \"auto\" }}\n          pad={{ vertical: \"medium\" }}\n        >\n          {tags &&\n            tags.length > 0 &&\n            tags.map((tag) => (\n              <Tag\n                key={tag}\n                name={tag.trim()}\n                slug={toKebabCase(tag)}\n                margin=\"xsmall\"\n              />\n            ))}\n        </Box>\n        {showBlogMeta && (\n          <>\n            <PrevNextNav\n              flex={false}\n              prevSlug={prev && `/${prev.fields.slug}`}\n              nextSlug={next && `/${next.fields.slug}`}\n              prevTitle={prev && prev.frontmatter.title}\n              nextTitle={next && next.frontmatter.title}\n              pad={{ vertical: \"medium\" }}\n            />\n            <GithubEdit link={fileSourceUrl} />\n            <Comments {...{ slug, title, disqusIdentifier, tumblr, siteUrl }} />\n          </>\n        )}\n      </Box>\n    </Layout>\n  );\n};\n\nPost.propTypes = {\n  imageUrl: PropTypes.string,\n  data: PropTypes.object,\n  pageContext: PropTypes.shape({\n    prev: PropTypes.object,\n    next: PropTypes.object,\n    fileSourceUrl: PropTypes.string,\n  }),\n};\n\nexport default Post;\n\nexport const query = graphql`\n  query PostQuery($slug: String!) {\n    mdx(fields: { slug: { eq: $slug } }) {\n      id\n      body\n      fields {\n        slug\n        disqusIdentifier\n        readingTime {\n          minutes\n        }\n      }\n      frontmatter {\n        title\n        subTitle\n        date(formatString: \"DD MMMM YYYY\")\n        v2\n        old\n        tumblr\n        tags\n        meta {\n          desc\n        }\n        canonical\n        cover {\n          childImageSharp {\n            gatsbyImageData(layout: FIXED)\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["globalMdxComponents","Box","Button","Text","Heading","Paragraph","PatternJourney","PureHtml","Section","Hero","Widget","WidgetContainer","Workshop","ProjectRoles","DsAspects","Link","Image","ImageBlock","_Heading","level","_ref","children","React","postComponents","h1","h2","h3","h4","h5","h6","p","_ref2","standout","a","div","_ref3","dataExcerpt","props","as","lead","propTypes","PropTypes","_ref4","data","mdx","site","siteMetadata","siteUrl","pageContext","next","prev","fileSourceUrl","readingTime","slug","disqusIdentifier","fields","date","title","subTitle","cover","tumblr","frontmatter","tags","split","showBlogMeta","startsWith","Layout","PostHeader","imageUrl","childImageSharp","gatsbyImageData","images","fallback","src","parseInt","minutes","Math","round","toFixed","Seo","flex","width","margin","horizontal","pad","direction","MDXProvider","components","fill","justify","bottom","vertical","length","map","tag","Tag","key","name","trim","toKebabCase","PrevNextNav","prevSlug","nextSlug","prevTitle","nextTitle","GithubEdit","link","Comments","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}